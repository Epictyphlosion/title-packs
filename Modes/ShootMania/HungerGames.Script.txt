// -------------------------------------- //
//  HUNGER GAMES by domino54              //
//  script version: 2.0                   //
// -------------------------------------- //

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const CompatibleMapTypes	"HungerGamesArena"
#Const Version				"2014-05-10"
#Const ScriptName			"HungerGames.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/CustomUI.Script.txt" as CustomUI
#Include "Libs/Nadeo/Sound.Script.txt" as Sound
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/Nadeo/ShootMania/WeaponSwitch.Script.txt" as WeaponSwitch
#Include "Libs/Domino/ShootMania/ScoresTableHG.Script.txt" as ScoresTable
#Include "Libs/Domino/Music.Script.txt" as Music

#Setting S_OffZoneStartOnDuel	True	as _("Activate tornado when there are 2 players left")
#Setting S_OffZoneAutoTime		360		as _("Time before auto activation of the tornado")
#Setting S_CharChoiceUse		False	as _("Allow players to choose their characters")
#Setting S_CharChoiceTime		30		as _("Time limit to choose a character")
#Setting S_ItemsRespawnDelay	300		as _("Charge, Weapon and MiniCharge respawn delay")
#Setting S_ItemsArmorDelay		120		as _("Armor and Replie respawn delay")
#Setting S_ItemsSpawnAll		False	as _("Spawn all items (advanced maps)")
#Setting S_ToadsSpawn			True	as _("Spawn the Toads (advanced maps)")
#Setting S_ToadsArmor			3		as _("Toads armor points")
#Setting S_MinimapShow			True	as _("Show MiniMap on players HUD")
#Setting S_NewPlayersAllow		True	as _("Allow new players to join shortly after game start")
#Setting S_NewPlayersTime		120		as _("Time for new players to join game")
#Setting S_PlayersArmor			5		as _("Basic player armor points")
#Setting S_FakePlayers			0		as _("Fake players")

#Const C_ModeStatus _("TYPE: Free for all\nOBJECTIVE: Survive as last man alive. Pick up bonuses to get weapons and faster reload.")

#Const C_BaseDir "file://Media/Manialinks/HungerGames/"

#Const C_OffZoneStartRadius		275.
#Const C_OffZoneFinalRadius		25.
#Const C_OffZoneShrinkSpeed		2.

#Const C_ChatPrefixColor		<1.0, 0.7, 0.1>

#Const C_ItemBlastRadius		0.5
#Const C_ItemPickPoints[
	"Armor" => 1,
	"Charge" => 2,
	"Weapon" => 5,
	"Mini" => 2,
	"Replie" => 3
]

// ----------------------------------- //
// Global variables
declare Ident[]			G_SpawnsList;			// Id of all the landmarks with a player spawn of the map
declare Ident			G_LatestSpawnId;		// Id of the last landmark used
declare CSmMapLandmark	G_CenterPole;			// Pole used as OffZone center
declare Boolean			G_OffZoneIsActivated;	// OffZone status
declare Ident[Text]		G_Objects;				// All objects
declare Integer			G_ItemVariant;			// Group of spawned items
declare Boolean			G_UseCharChoice;		// Use character choosing
declare Integer			G_CharMusicIndex;		// Index of char choose music

// ----------------------------------- //
// Extend
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(Layers::GetScriptName(), Layers::GetScriptVersion());
MB_LogVersion(Message::GetScriptName(), Message::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
***

// ----------------------------------- //
// Set mode rules
***Rules***
***
declare ModeName = "Hunger Games";
declare ModeRules = TextLib::Compose(_("$<%11. $>Run to the pole to get a weapon.\n$<%12. $>Pick up different items to upgrade your character.\n$<%13. $>After time limit tornado will be activated.\n$<%14. $>You can check your position and statistics by pressing 'E' key.\n$<%15. $>If you have more weapons, use mouse roll to switch them.\n$<%16. $>Last player alive wins."), "$"^SpawnScreen::GetModeColor());

SpawnScreen::AddSubsection(_("Type"), _("Free for all"), 0.);
SpawnScreen::AddSubsection(_("Objectives"), ModeRules, 20.);
SpawnScreen::CreatePrettyRules(ModeName);
***

// ----------------------------------- //
// Server start
***StartServer***
***
UseClans = False;
ForceNavMapsComputation = True;
UseMinimap = True;

---Rules---

SpawnScreen::CreateScores("Score.RoundPoints");
SpawnScreen::CreateMapInfo();

MB_NeutralEmblemUrl = "http://dominolink.aq.pl/HungerGames/emblem.dds";

// Include the items //
ItemList_Begin();
G_Objects["Armor"]		= ItemList_Add("SMCommon\\HG\\Armor.Item.gbx");
G_Objects["Charge"]		= ItemList_Add("SMCommon\\HG\\Rocket.Item.gbx");
G_Objects["Weapon"]		= ItemList_Add("SMCommon\\HG\\Laser.Item.gbx");
G_Objects["Mini"]		= ItemList_Add("SMCommon\\HG\\Arrow.Item.gbx");
G_Objects["Replie"]		= ItemList_Add("SMCommon\\HG\\Nucleus.Item.gbx");

G_Objects["Sintel"] 	= ItemList_Add("Characters\\SintelSample.Item.gbx");
G_Objects["Susu"] 		= ItemList_Add("Characters\\Susu.Item.gbx");
G_Objects["Toad"] 		= ItemList_Add("Characters\\ToadSample.Item.gbx");
G_Objects["Engineer"] 	= ItemList_Add("Characters\\BLR_Engineer.Item.gbx");
G_Objects["Boba"] 		= ItemList_Add("Characters\\Boba_Fett.Item.gbx");
G_Objects["Steve"] 		= ItemList_Add("Characters\\MinecraftSteve.Item.gbx");
G_Objects["Creeper"] 	= ItemList_Add("Characters\\MinecraftCreeper.Item.gbx");
ItemList_End();

CustomUI::Load();
CustomUI::Add("HG_AmmoCounter", <-50.5, -74.5>, <45., 7.>);
CustomUI::Add("HG_BuffCounter", <33.25, -74.5>, <10.5, 7.>);
CustomUI::Add("HG_MiniMap", <138., -68.>, <42., 42.>);
CustomUI::Add("HG_MapLegend", <145.25, 59.>, <29.5, 10.>);
CustomUI::Add("HG_Position", <-150., 59.>, <20., 10.>);
CustomUI::Add("HG_TipsWindow", <0., -57.>, <128., 10.>);
CustomUI::Build();

// Create the scores table
ScoresTable::Load();
ScoresTable::SetColumnsWidth(1.5, 1.5, 2., 18., 1.25, 1.25, 1.75, 1.75, 1.75, 3.25, 0.);
ScoresTable::SetTableFormat(2, 6);
ScoresTable::SetTableWidth(200.);
ScoresTable::SetColumnName("Custom1", "Itm");
ScoresTable::SetColumnName("Custom2", "Sv");
ScoresTable::SetColumnName("Custom3", "Hit");
ScoresTable::SetTableBackgroundImage(C_BaseDir^"scores_hg.png", <0.1, 1.0>, <206., 93.>);
ScoresTable::SetDefaultFooterStats("Tributes alive: "^ClansNbPlayersAlive[0]);
ScoresTable::Build();

Sound::Load();
Sound::Attach();

Layers::Create("toPole", "");
***

// ----------------------------------- //
// Map start
***StartMap***
***
Users_SetNbFakeUsers(S_FakePlayers, 0);
SM::SetupDefaultVisibility();
G_ItemVariant = MathLib::Rand(1, 3);
G_UseCharChoice = S_CharChoiceUse;

Score::MatchBegin();
Score::RoundBegin();

Layers::Create("hgInfo", "");

G_CharMusicIndex += 1;
if (G_CharMusicIndex > 3) G_CharMusicIndex = 1;

Music::Load();

declare Integer SyncPlayersCount;

// Turn the lights on //
foreach (Base in MapBases) {
	Base.Clan = 0;
	Base.IsActive = True;
}

// Set tornado center //
foreach (Pole in MapLandmarks_Gauge) {
	if (Pole.Tag == "HornOfPlenty") {
		G_CenterPole <=> Pole;
		OffZoneCenterLandmarkId = Pole.Id;
	}
}

Layers::Update("toPole", LayerGoPole());

// Reset players' ScoresTable columns
foreach (Player in AllPlayers) {
	ScoresTable::SetCustom1(Player, "");
	ScoresTable::SetCustom2(Player, "");
	ScoresTable::SetCustom3(Player, "");
	
	declare PlayerSpawned for Player = False;
	PlayerSpawned = False;
}

declare Integer OffZoneAutoTime;
OffZoneAutoTime = S_OffZoneAutoTime * 1000;
G_OffZoneIsActivated = False;

// Prepare pole //
G_CenterPole.Gauge.Max = MathLib::FloorInteger((C_OffZoneStartRadius - C_OffZoneFinalRadius) * 1000 / C_OffZoneShrinkSpeed);
G_CenterPole.Gauge.Value = G_CenterPole.Gauge.Max;
G_CenterPole.Gauge.Captured = True;

UIManager.UIAll.SpectatorForcedTarget = G_CenterPole.Id;
UIManager.UIAll.SpectatorForceCameraType = 1;

// Init objects //
ObjectDestroyAll();
foreach (MapLandmark in MapLandmarks_ObjectAnchor) {
	declare ObjectSpawned for MapLandmark = False;
	declare ObjectNextSpawn for MapLandmark = Now;
	ObjectSpawned = False;
	ObjectNextSpawn = Now;

	declare netwrite Integer[Text] Net_Combo_ItemsRespawn for Teams[0];
	Net_Combo_ItemsRespawn["Marker_Object"^MapLandmark.Id] = ObjectNextSpawn;
}

SendChat(_("New map"));

// Wait for enough players //
while (Players.count < 2) {
	yield;	
	UIManager.UIAll.BigMessage = _("Waiting for players...");
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::Warning;
}
UIManager.UIAll.BigMessage = "";

UIManager.UIAll.OverlayHideCountdown = True;

//  Character choosing
if (S_CharChoiceUse) {
	MB_Sleep(3000);
	declare ChoiceEnd = Now + S_CharChoiceTime * 1000;
	
	declare BasePage = GetCharacterChoosingUI();
	
	Music::CharChoice(G_CharMusicIndex);
	
	Layers::Create("CharChoose", """			
		{{{BasePage}}}								
		<script><!--
		#Include "TextLib" as TL	
			
		declare CMlQuad[] Highlights;
		
		Void AnimHighlights(Integer _Ident) {
			declare TgtHighlight = Highlights[_Ident];
			foreach (Highlight in Highlights) {
				if (Highlight != TgtHighlight) Highlight.Hide();
				else Highlight.Show();
			}
		}
				
		main() {						
			declare Label_Button1 <=> (Page.GetFirstChild("Label_Button1") as CMlLabel);
			declare Label_Button2 <=> (Page.GetFirstChild("Label_Button2") as CMlLabel);
			declare Label_Button3 <=> (Page.GetFirstChild("Label_Button3") as CMlLabel);
			declare Label_Button4 <=> (Page.GetFirstChild("Label_Button4") as CMlLabel);
			declare Label_Button5 <=> (Page.GetFirstChild("Label_Button5") as CMlLabel);
			declare Label_Button6 <=> (Page.GetFirstChild("Label_Button6") as CMlLabel);
			declare Label_Button7 <=> (Page.GetFirstChild("Label_Button7") as CMlLabel);
			declare Label_Button8 <=> (Page.GetFirstChild("Label_Button8") as CMlLabel);
			
			declare Highlight1 <=> (Page.GetFirstChild("Quad_Highlight1") as CMlQuad);
			declare Highlight2 <=> (Page.GetFirstChild("Quad_Highlight2") as CMlQuad);
			declare Highlight3 <=> (Page.GetFirstChild("Quad_Highlight3") as CMlQuad);
			declare Highlight4 <=> (Page.GetFirstChild("Quad_Highlight4") as CMlQuad);
			declare Highlight5 <=> (Page.GetFirstChild("Quad_Highlight5") as CMlQuad);
			declare Highlight6 <=> (Page.GetFirstChild("Quad_Highlight6") as CMlQuad);
			declare Highlight7 <=> (Page.GetFirstChild("Quad_Highlight7") as CMlQuad);
			declare Highlight8 <=> (Page.GetFirstChild("Quad_Highlight8") as CMlQuad);
			
			Highlights.add(Highlight1);
			Highlights.add(Highlight2);
			Highlights.add(Highlight3);
			Highlights.add(Highlight4);
			Highlights.add(Highlight5);
			Highlights.add(Highlight6);
			Highlights.add(Highlight7);
			Highlights.add(Highlight8);
			
			declare Label_Armor1 <=> (Page.GetFirstChild("Label_Armor1") as CMlLabel);
			declare Label_Armor2 <=> (Page.GetFirstChild("Label_Armor2") as CMlLabel);
			declare Label_Armor3 <=> (Page.GetFirstChild("Label_Armor3") as CMlLabel);
			declare Label_Armor4 <=> (Page.GetFirstChild("Label_Armor4") as CMlLabel);
			declare Label_Armor5 <=> (Page.GetFirstChild("Label_Armor5") as CMlLabel);
			declare Label_Armor6 <=> (Page.GetFirstChild("Label_Armor6") as CMlLabel);
			declare Label_Armor7 <=> (Page.GetFirstChild("Label_Armor7") as CMlLabel);
			declare Label_Armor8 <=> (Page.GetFirstChild("Label_Armor8") as CMlLabel);
			
			declare Label_Chrono <=> (Page.GetFirstChild("Label_Chrono") as CMlLabel);
			
			Label_Armor1.SetText("{{{S_PlayersArmor}}}");
			Label_Armor2.SetText("{{{S_PlayersArmor}}}");
			Label_Armor3.SetText("{{{S_PlayersArmor}}}");
			Label_Armor4.SetText("{{{S_PlayersArmor + 2}}}");
			Label_Armor5.SetText("{{{S_PlayersArmor + 1}}}");
			Label_Armor6.SetText("{{{S_PlayersArmor + 1}}}");
			Label_Armor7.SetText("{{{S_PlayersArmor}}}");
			Label_Armor8.SetText("{{{S_PlayersArmor}}}");
			
			declare netwrite Integer Net_Model for UI;
			
			declare Choose = 1;
			
			Choose = 1;
			
			while(True) {	
				yield;	
				
				Label_Chrono.SetText(""^TL::TimeToText({{{ChoiceEnd}}} - ArenaNow + 1000, False));
				
				Net_Model = Choose;				
				AnimHighlights(Choose - 1);
				
				declare Pressed = False;
									
				foreach (Event in PendingEvents) {
					if (Event.Type == CMlEvent::Type::MouseClick) {
						if (Event.ControlId == "Label_Button1") Choose = 1;
						if (Event.ControlId == "Label_Button2") Choose = 2;
						if (Event.ControlId == "Label_Button3") Choose = 3;
						if (Event.ControlId == "Label_Button4") Choose = 4;
						if (Event.ControlId == "Label_Button5") Choose = 5;
						if (Event.ControlId == "Label_Button6") Choose = 6;
						if (Event.ControlId == "Label_Button7") Choose = 7;
						if (Event.ControlId == "Label_Button8") Choose = 8;
					}
					
					if (Event.Type == CMlEvent::Type::KeyPress) {
						if (Event.CharPressed == "65536") Choose = 1;
						if (Event.CharPressed == "131072") Choose = 2;
						if (Event.CharPressed == "196608") Choose = 3;
						if (Event.CharPressed == "262144") Choose = 4;
						if (Event.CharPressed == "327680") Choose = 5;
						if (Event.CharPressed == "393216") Choose = 6;
						if (Event.CharPressed == "458752") Choose = 7;
						if (Event.CharPressed == "524288") Choose = 8;
					}
				}
			}
		}
		--></script>
	""");	
	
	foreach (Player in Players) Layers::Attach("CharChoose", Player);
	wait (Now > ChoiceEnd);
}

foreach (Player in Players) Layers::Detach("CharChoose", Player);

MB_Sleep(2000);

Music::Silence();
Countdown();

StartTime = Now;

if (S_OffZoneStartOnDuel) {
	UIManager.UIAll.CountdownEndTime = Now + S_OffZoneAutoTime * 1000;
	UIManager.UIAll.OverlayHideCountdown = False;
} else {
	UIManager.UIAll.OverlayHideCountdown = True;
}

UIManager.UIAll.SpectatorForcedTarget = NullId;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

MB_Sleep(1000);

DestroyAllBotPlayers();

// Configure animals //
foreach (MapLandmark in MapLandmarks_BotPath) {
	if (S_ToadsSpawn && MapLandmarks_BotPath.count > 0) {
		declare Bot for MapLandmark = CreateBotPlayer(G_Objects["Toad"], 0);
		SpawnBotPlayer(Bot, 0, 200, MapLandmark.BotPath, Now);
	}
}

foreach (Bot in BotPlayers) {
	Bot.Driver.Behaviour = CSmPlayerDriver::ESmDriverBehaviour::IA;
	Bot.Driver.AttackFilter = CSmPlayerDriver::ESmAttackFilter::AllPlayers;
	Bot.Driver.Accuracy				= 0.75;
	Bot.Driver.AggroRadius			= 16.;
	Bot.Driver.DisengageDistance	= 40.;
	Bot.Driver.ShootPeriodMin		= 750;
	Bot.Driver.ShootPeriodMax		= 1000;		
	SetPlayerAmmoMax(Bot, CSmMode::EWeapon::Rocket, 3);
	SetPlayerAmmoMax(Bot, CSmMode::EWeapon::Nucleus, 1);
	Bot.AmmoGain		= 0.5;
	Bot.SpeedPower 		= 0.33; 
	Bot.ArmorMax		= S_ToadsArmor * 100;
	Bot.Armor			= S_ToadsArmor * 100;
	Bot.EnergyLevel		= 0.;
	Bot.ForceColor		= <0., 1., 0.>;
}

foreach (Player in Players) {
	HungerGamesSpawnPlayer(Player);
}

SyncPlayersCount = PlayersNbAlive;

Music::InGame(G_CharMusicIndex);
***

***OneNewPlayer***
***
declare PlayerSpawned for Player = False;
PlayerSpawned = False;
***

***OneNewSpectator***
***
declare PlayerSpawned for Spectator = False;
PlayerSpawned = False;
***

// ----------------------------------- //
// Play loop
***PlayLoop***
***
Message::Loop();
WeaponSwitch::Loop();
Combo_SpawnObjects();

// Events management //
foreach (Event in PendingEvents) {
	// Armor empty //
	if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
		if (!Event.Victim.IsBot) {
			if (PlayersNbAlive > 2) {
				Message::SendStatusMessage(TextLib::Compose(_("$<%1$> is eliminated!"), Event.Victim.Name), 4000, 1, CUIConfig::EUISound::Silence, 0);
			} else {
				Message::SendBigMessage("", 1000, 1, CUIConfig::EUISound::VictoryPoint, 0);
			}
		}
		
		foreach (Player in Players) {
			if (Player != Event.Victim && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !Event.Victim.IsBot) {
				Score::AddPoints(Player, 10);
				
				declare SurivalPoints for Player = 0;
				SurivalPoints += 1;
				
				ScoresTable::SetCustom2(Player, ""^SurivalPoints);
			}
		}
		
		if (Event.Victim.IsBot && !Event.Victim.IsInOffZone) {
			declare DropChance for Event.Victim = MathLib::Rand(1, 3);
			
			if (DropChance == 1) {
				declare Object for Event.Victim = ObjectCreate(G_Objects["Charge"]);
				declare Tag for Object = "";
				Tag = "Charge";
				Object.SetPosition(Event.Victim.Position);
			}
		}
		
		XmlRpc::OnArmorEmpty(Event);
		PassOn(Event);
	}
	// On hit //
	else if (Event.Type == CSmModeEvent::EType::OnHit) {
		if (Event.Victim == Null || Event.Shooter == Event.Victim) {
			Discard(Event);
		} else {
			Event.Damage = 100;
			
			HungerGamesCriticalHit(Event);
			
			declare HitPoints for Event.Shooter = 0;
			
			declare Points = Event.Damage / 100;
			Score::AddPoints(Event.Shooter, Points);
			Event.ShooterPoints = Points;
			
			HitPoints += Points;
			
			ScoresTable::SetCustom3(Event.Shooter, ""^HitPoints);
			
			XmlRpc::OnHit(Event);
			PassOn(Event);
		}
	}
	// Player requests respawn //
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
		Message::SendStatusMessage(Event.Player, "$F00"^"You can't respawn in Hunger Games!", 3000, 4, CUIConfig::EUISound::Silence, 0);
		Discard(Event);
	}
	// Player touches item //
	else if (Event.Type == CSmModeEvent::EType::OnPlayerTouchesObject) {
		if (Event.Player == Null || Event.Player.IsBot || Event.Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
			Discard(Event);
		} else {
			if (Event.Player.AmmoGain != 0.) {
				PickUpObject(Event.Player, Event.Object);
				PassOn(Event);
			} else {
				Message::SendStatusMessage(Event.Player, "$F00"^"You must score in Horn of Plenty first!", 3000, 3, CUIConfig::EUISound::Silence, 0);
				Discard(Event);
			}
		}
	}
	// Action slots //
	else if (Event.Type == CSmModeEvent::EType::OnActionEvent) {		
		declare Integer AmmoCountLaser		for Event.Player;
		declare Integer AmmoCountNucleus	for Event.Player;
		declare Integer AmmoCountArrow		for Event.Player;
		
		switch (Event.ActionInput) {
			case CSmModeEvent::EActionInput::Activable1: {
				if (AmmoCountLaser != 0) SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Laser, False);
			}
			case CSmModeEvent::EActionInput::Activable2: {
				if (AmmoCountNucleus != 0) SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Nucleus, False);
			}
			case CSmModeEvent::EActionInput::Activable3: {
				if (AmmoCountArrow != 0) SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Arrow, False);
			}
			case CSmModeEvent::EActionInput::Activable4: {
				SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Rocket, False);
			}
		}
	}
	// Weapon scroll //
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestActionChange) {
		SwitchWeapon(Event);
	}
	// On near miss //
	else if (Event.Type == CSmModeEvent::EType::OnNearMiss) {
		if (!Event.Shooter.IsFakePlayer) {
			if (1.0 >= 0 && Event.MissDist <= 1.0) {
				declare Text Message = "";
				Message = GetNearMissMessage(Event);
				Message::SendStatusMessage(Event.Shooter, Message, 3000, 3, CUIConfig::EUISound::Silence, 0);
			}
		}
		PassOn(Event);
	}
	// Others //
	else {
		PassOn(Event);
	}
}

// Player functions //
foreach (Player in Players) {
	declare CUIConfig UI <=> UIManager.GetUI(Player);	
	declare Boolean HasWeapon for Player;
	
	declare Integer AmmoCountLaser for Player;
	declare Integer AmmoCountNucleus for Player;
	declare Integer AmmoCountArrow for Player;
	declare Integer AmmoCountRocket for Player;
	declare Integer PlayerRepliesCount for Player;
	
	declare netwrite Integer Net_AmmoCountLaser for UI;
	declare netwrite Integer Net_AmmoCountNucleus for UI;
	declare netwrite Integer Net_AmmoCountArrow for UI;
	declare netwrite Integer Net_AmmoCountRocket for UI;
	declare netwrite Integer Net_RepliesCount for UI;
	declare netread Integer Net_RepliesCount2 for UI;
	
	Net_AmmoCountLaser = AmmoCountLaser;
	Net_AmmoCountNucleus = AmmoCountNucleus;
	Net_AmmoCountArrow = AmmoCountArrow;
	Net_AmmoCountRocket = AmmoCountRocket;
	Net_RepliesCount = PlayerRepliesCount;
	
	declare netwrite Integer Net_PlayersNbAlive for UI;
	Net_PlayersNbAlive = PlayersNbAlive;
	
	SetPlayerReloadAllWeapons(Player, True);
	
	// Player touches pole //
	if (Player.CapturedLandmark == G_CenterPole && HasWeapon == False) {
		HungerGamesPoleCapture(Player);	
		Layers::Detach("toPole", Player);
		HasWeapon = True;
	}
	
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned || Player.RequestsSpectate) {
		Layers::Detach("hgInfo", Player);
		Layers::Detach("toPole", Player);
	}
	
	// Player escapes arena //
	if (Player.Position[0] < 0. || Player.Position[0] > 384. || Player.Position[2] < 0. || Player.Position[2] > 384.) {
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
			Player.Armor = 0;
			UnspawnPlayer(Player);
			SendChat("$<"^Player.Name^"$> tried to escape arena.");
		}
	}
	
	/// Drop the items
	declare DroppedItems for Player = False;
	
	if (!DroppedItems && Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && Player.Objects.count > 0) {
		Player.Objects[0].SetPosition(Player.Position + <MathLib::Rand(-C_ItemBlastRadius, C_ItemBlastRadius), MathLib::Rand(-0.1, 0.35), MathLib::Rand(-C_ItemBlastRadius, C_ItemBlastRadius)>);
	}
	
	if (Player.Objects.count > 0) DroppedItems = False;
	else DroppedItems = True;
	
	// Replies //
	Net_RepliesCount = PlayerRepliesCount;
	
	declare RepliesCountSync for Player = 0;
	
	if (RepliesCountSync != Net_RepliesCount2) {
		if (Net_RepliesCount2 < RepliesCountSync) Player.Armor += 100;
		RepliesCountSync = Net_RepliesCount2;
	}
	
	declare PlayerSpawned for Player = False;
	
	if (S_NewPlayersAllow) {
		if (Now < StartTime + S_NewPlayersTime * 1000 && !G_OffZoneIsActivated) {
			if (!PlayerSpawned) {
				HungerGamesSpawnPlayer(Player);
				SendChat("$<"^Player.Name^"$> has joined the game!");
			}
		} else {
			if (!PlayerSpawned) {
				UI.SendChat("$"^TextLib::ColorToText(C_ChatPrefixColor)^"»$fff "^"Time to join for new players has expired. Please wait for the next map.");
				PlayerSpawned = True;
			}
		}
	}
}

if (Now > StartTime + 2000) {
	Layers::Detach("countdown");
	Layers::Destroy("countdown");
}

foreach (Spectator in Spectators) Layers::Detach("hgInfo", Spectator);

// Tributes count notification //
if (SyncPlayersCount != PlayersNbAlive && PlayersNbAlive >= 2 && SyncPlayersCount > PlayersNbAlive) {
	Sound::PlaySound(C_BaseDir^"cannon.ogg");
	declare TextPrefix = "$"^TextLib::ColorToText(C_ChatPrefixColor)^"»$fff";
	declare Text Message;
	Message = TextLib::Compose("%1 %2%3", TextPrefix, _("Remaining players: "), TextLib::ToText(PlayersNbAlive));
	UIManager.UIAll.SendChat(Message);
	SyncPlayersCount = PlayersNbAlive;
}

foreach (Player in AllPlayers) ScoresTable::SetFooterStats(Player, "Tributes alive: "^PlayersNbAlive);

// Start the storm //
if (S_OffZoneStartOnDuel && !G_OffZoneIsActivated) {
	if (Now > UIManager.UIAll.CountdownEndTime || PlayersNbAlive == 2) {
		if (PlayersNbAlive == 2 || Now >= StartTime + OffZoneAutoTime) {
			OffZoneRadius = C_OffZoneStartRadius;
			G_CenterPole.Gauge.Speed = -1;
			G_CenterPole.Gauge.Captured = False;
			SendChat(_("Tornado activated."));
			UIManager.UIAll.CountdownEndTime = Now;
			UIManager.UIAll.OverlayHideCountdown = True;
			G_OffZoneIsActivated = True;
		}
	}
}

// Stop the storm //
if (G_OffZoneIsActivated && OffZoneRadius >= C_OffZoneFinalRadius) OffZoneRadiusSpeed = C_OffZoneShrinkSpeed;
else OffZoneRadiusSpeed = 0.;

// Victory conditions //
if (PlayersNbAlive <= 1) MB_StopMap = True;
***

// ----------------------------------- //
// Map end
***EndMap***
***
OffZoneRadiusSpeed = 0.;
OffZoneRadius = -1.;
G_CenterPole.Gauge.Speed = 0;

Layers::Destroy("hgInfo");

DestroyAllBotPlayers();
ObjectDestroyAll();

UIManager.UIAll.CountdownEndTime = Now;
UIManager.UIAll.MarkersXML = "";

Message::CleanBigMessages();
Message::CleanStatusMessages();

MB_Sleep(1000);

UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;

MB_Sleep(2000);

foreach (Player in Players) {
	declare CSmPlayer Winner;
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
		Score::AddPoints(Player, 50);
		Winner = Player;
		Message::CleanBigMessages();
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> won the Hunger Games!"), Winner.User.Name);
		UIManager.UIAll.SpectatorForcedTarget = Winner.Id;
		UIManager.UIAll.SpectatorForceCameraType = 0;
	}
}

if (PlayersNbAlive == 0) UIManager.UIAll.BigMessage = "Fuck Capitol, there's no winner!";

ScoresTable::SetColumnsWidth(1.5, 1.5, 2., 18., 1.25, 1.25, 1.75, 1.75, 1.75, 0., 3.25);
ScoresTable::Build();
Score::RoundEnd();
Score::MatchEnd(True);

MB_Sleep(5000);

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;

MB_Sleep(10000);

Music::Silence();

ScoresTable::SetColumnsWidth(1.5, 1.5, 2., 18., 1.25, 1.25, 1.75, 1.75, 1.75, 3.25, 0.);
ScoresTable::Build();

while(!UIManager.UIAll.UISequenceIsCompleted) {
	MB_Yield();
}

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.BigMessage = "";
***

// ----------------------------------- //
// Server end
***EndServer***
***
SpawnScreen::DestroyRules();
SpawnScreen::DestroyScores();
SpawnScreen::DestroyMapInfo();
***

// ----------------------------------- //
// Send informations
Void SendChat(Text _Message) {
	declare TextPrefix = "$"^TextLib::ColorToText(C_ChatPrefixColor)^"»$fff";
	UIManager.UIAll.SendChat(TextLib::Compose("%1 %2", TextPrefix, _Message));
}

Void HungerGamesPoleCapture(CSmPlayer _Player) {
	SetPlayerWeapon(_Player, CSmMode::EWeapon::Rocket, False);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 4);
	SetPlayerAmmo(_Player, CSmMode::EWeapon::Rocket, 0);
	
	declare Integer AmmoCountRocket for _Player;
	AmmoCountRocket = 4;
	
	switch (_Player.ForceModelId) {
		case NullId : {
			_Player.AmmoGain = 0.5;
			_Player.StaminaGain = 0.1;
		}
		case G_Objects["Sintel"] : {
			_Player.AmmoGain = 0.7;
			_Player.StaminaGain = 0.3;
		}
		case G_Objects["Susu"] : {
			_Player.AmmoGain = 0.7;
			_Player.StaminaGain = 0.3;
		}
		case G_Objects["Toad"] : {
			_Player.AmmoGain = 0.5;
			_Player.StaminaGain = 0.5;
		}
		case G_Objects["Engineer"] : {
			_Player.AmmoGain = 0.5;
			_Player.StaminaGain = 0.3;
		}
		case G_Objects["Boba"] : {
			_Player.AmmoGain = 0.5;
			_Player.StaminaGain = 0.3;
		}
		case G_Objects["Steve"] : {
			_Player.AmmoGain = 0.4;
			_Player.StaminaGain = 0.1;
		}
		case G_Objects["Creeper"] : {
			_Player.AmmoGain = 0.7;
			_Player.StaminaGain = 0.1;
		}
	}
	
	XmlRpc.SendCallback("poleCapture", _Player.Login);
}

Void Combo_SpawnObjects() {
	foreach (MapLandmark in MapLandmarks_ObjectAnchor) {
		declare ObjectAnchor <=> MapLandmark.ObjectAnchor;
		if (ObjectAnchor == Null) continue;

		declare ObjectSpawned for MapLandmark = False;
		declare ObjectNextSpawn for MapLandmark = Now;
		if (ObjectSpawned) continue;
		if (ObjectNextSpawn > Now) continue;
		
		declare CSmObject Object;		
		if (MapLandmark.Order == G_ItemVariant || MapLandmark.Order == 0 || S_ItemsSpawnAll) {
			switch (MapLandmark.Tag) {
				case "Armor" :		Object = ObjectCreate(G_Objects["Armor"]);
				case "Charge" :		Object = ObjectCreate(G_Objects["Charge"]);
				case "Weapon" :		Object = ObjectCreate(G_Objects["Weapon"]);
				case "Mini" :		Object = ObjectCreate(G_Objects["Mini"]);
				case "Replie" :		Object = ObjectCreate(G_Objects["Replie"]);
			}
		}
		
		declare Boolean WeaponIsHealing for Object;
		WeaponIsHealing = True;
		
		declare Boolean MiniTakesArmor for Object;
		MiniTakesArmor = True;
		
		if (Object != Null) {
			declare AnchorId for Object = NullId;
			declare Tag for Object = MapLandmark.Tag;
			AnchorId = MapLandmark.Id;
			Tag = MapLandmark.Tag;
			ObjectSpawned = True;
			Object.SetAnchor(ObjectAnchor);
		}
	}
}

Void PickUpObject(CSmPlayer _Player, CSmObject _Object) {
	if (_Player == Null || _Object == Null) return;

	declare Tag for _Object = "";
	declare AnchorId for _Object = NullId;

	if (!MapLandmarks_ObjectAnchor.existskey(AnchorId)) return;
	declare MapLandmark <=> MapLandmarks_ObjectAnchor[AnchorId];
	declare ObjectSpawned for MapLandmark = False;
	declare ObjectNextSpawn for MapLandmark = Now;
	ObjectSpawned = False;
	
	switch (Tag) {
		case "Armor" : ObjectNextSpawn = Now + S_ItemsArmorDelay * 1000;
		case "Replie" : ObjectNextSpawn = Now + S_ItemsArmorDelay * 1000;
		case "Charge" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
		case "Weapon" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
		case "Mini" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
	}
	
	declare ScorePointsItems for _Player = 0;	
	ScorePointsItems += C_ItemPickPoints[Tag];
	Score::AddPoints(_Player, C_ItemPickPoints[Tag]);
	
	declare Integer WeaponIndex;
	WeaponIndex = MathLib::Rand(1, 3);
	
	declare ItemPoints for _Player = 0;
	
	declare Boolean WeaponIsHealing for _Object;
	declare Boolean MiniTakesArmor for _Object;
	
	declare Integer AmmoCountLaser		for _Player;
	declare Integer AmmoCountNucleus	for _Player;
	declare Integer AmmoCountArrow		for _Player;
	declare Integer PlayerRepliesCount	for _Player;
	
	switch (Tag) {		
		case "Armor" : {
			_Player.Armor += 100;
			
			ItemPoints += C_ItemPickPoints[Tag];
			
			ObjectDestroy(_Object);
		}
		
		case "Charge" : {
			if (_Player.AmmoGain <= 9.9) _Player.AmmoGain  += 0.1;
			if (_Player.StaminaGain < 1.) _Player.StaminaGain  += 0.1;
			
			if (_Player.StaminaGain < 1.) _Player.StaminaGain = 1.;
			
			ItemPoints += C_ItemPickPoints[Tag];
			
			_Object.SetPlayer(_Player);
		}
		
		case "Weapon" : {
			switch (WeaponIndex) {
				case 1: AmmoCountLaser		+= 1;
				case 2: AmmoCountNucleus	+= 1;
				case 3: AmmoCountArrow		+= 1;
			}
			
			SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser, AmmoCountLaser);
			SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Nucleus, AmmoCountNucleus);
			SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Arrow, AmmoCountArrow);
			
			if (WeaponIsHealing) {
				_Player.Armor += 100;
				WeaponIsHealing = False;
			}
			
			ItemPoints += C_ItemPickPoints[Tag];
			
			_Object.SetPlayer(_Player);
		}
		
		case "Mini" : {
			if (MiniTakesArmor) {
				_Player.Armor -= 100;
				MiniTakesArmor = False;
			}
			
			if (_Player.AmmoGain <= 9.8) _Player.AmmoGain  += 0.2;
			else if (_Player.AmmoGain <= 9.9) _Player.AmmoGain  += 0.1;
			if (_Player.StaminaGain <= 0.8) _Player.StaminaGain  += 0.2;
			else if (_Player.StaminaGain <= 0.9) _Player.StaminaGain  += 0.1;
			
			if (_Player.Armor < 100) SendChat("$<"^_Player.Name^"$> got eliminated by picking up MiniCharge.");
			
			ItemPoints += C_ItemPickPoints[Tag];
			
			_Object.SetPlayer(_Player);
		}
		
		case "Replie" : {
			PlayerRepliesCount += 1;
			
			ItemPoints += C_ItemPickPoints[Tag];
			
			ObjectDestroy(_Object);
		}
	}
	
	ScoresTable::SetCustom1(_Player, ""^ItemPoints);
}

Void HungerGamesCriticalHit(CSmModeEvent _Event) {
	declare Boolean IsCrit for _Event.Shooter;
	IsCrit = False;
	
	declare CritChance = 0;
	
	switch (_Event.Shooter.ForceModelId) {
		case NullId :				CritChance = MathLib::Rand(1, 100);
		case G_Objects["Sintel"] : 	CritChance = MathLib::Rand(1, 33);
		case G_Objects["Susu"] :	CritChance = MathLib::Rand(1, 33);
		case G_Objects["Toad"] : 	CritChance = MathLib::Rand(1, 50);
		case G_Objects["Engineer"]: CritChance = MathLib::Rand(1, 50);
		case G_Objects["Boba"] : 	CritChance = MathLib::Rand(1, 50);
		case G_Objects["Steve"] : 	CritChance = MathLib::Rand(1, 50);
		case G_Objects["Creeper"] : CritChance = MathLib::Rand(1, 20);
	}
	
	if (CritChance == 1) {
		_Event.Damage += 100;
		
		Message::SendStatusMessage(_Event.Shooter, "$t"^"Critical hit!", 2000, 2, CUIConfig::EUISound::Silence, 0);
		Message::SendStatusMessage(_Event.Victim, "$f00"^"Critical hit!", 2000, 2, CUIConfig::EUISound::Silence, 0);
	}
}

Text GetHudOverlay() {
	return """
		<frame class="LibCustomUI_Module" id="HG_AmmoCounter"><frame posn="-73 -71" id="Frame_AmmoCounter">
			<frame posn="0 0">
				<quad sizen="10.5 7" bgcolor="000A"/>
				<quad posn="1 -1 2" sizen="5 5" id="Quad_Laser0" image="{{{C_BaseDir}}}laser_0.png"/>
				<quad posn="1 -1 3" sizen="5 5" id="Quad_Laser1" image="{{{C_BaseDir}}}laser_1.png" hidden="1"/>
				<label posn="8 -1.875 2" scale="1.25" halign="center" style="TextButtonNav" id="Label_CountLaser"/>
			</frame>
			<frame posn="11.5 0">
				<quad sizen="10.5 7" bgcolor="000A"/>
				<quad posn="1 -1 2" sizen="5 5" id="Quad_Nucleus0" image="{{{C_BaseDir}}}nucleus_0.png"/>
				<quad posn="1 -1 3" sizen="5 5" id="Quad_Nucleus1" image="{{{C_BaseDir}}}nucleus_1.png" hidden="1"/>
				<label posn="8 -1.875 2" scale="1.25" halign="center" style="TextButtonNav" id="Label_CountNucleus"/>
			</frame>
			<frame posn="23 0">
				<quad sizen="10.5 7" bgcolor="000A"/>
				<quad posn="1 -1 2" sizen="5 5" id="Quad_Arrow0" image="{{{C_BaseDir}}}arrow_0.png"/>
				<quad posn="1 -1 3" sizen="5 5" id="Quad_Arrow1" image="{{{C_BaseDir}}}arrow_1.png" hidden="1"/>
				<label posn="8 -1.875 2" scale="1.25" halign="center" style="TextButtonNav" id="Label_CountArrow"/>
			</frame>
			<frame posn="34.5 0">
				<quad sizen="10.5 7" bgcolor="000A"/>
				<quad posn="1 -1 2" sizen="5 5" id="Quad_Rocket0" image="{{{C_BaseDir}}}rocket_0.png"/>
				<quad posn="1 -1 3" sizen="5 5" id="Quad_Rocket1" image="{{{C_BaseDir}}}rocket_1.png" hidden="1"/>
				<label posn="8 -1.875 2" scale="1.25" halign="center" style="TextButtonNav" id="Label_CountRocket"/>
			</frame>
			<quad posn="0 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon1" hidden="1"/>
			<quad posn="11.5 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon2" hidden="1"/>
			<quad posn="23 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon3" hidden="1"/>
				<quad posn="34.5 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon4" hidden="1"/>
		</frame></frame>
		
		<frame class="LibCustomUI_Module" id="HG_BuffCounter"><frame posn="28 -71" id="Frame_ReplieCounter">
			<quad sizen="10.5 7" bgcolor="000A"/>
			<quad posn="1 -1 2" sizen="5 5" id="Quad_Replie0" image="{{{C_BaseDir}}}replie_0.png"/>
			<quad posn="1 -1 3" sizen="5 5" id="Quad_Replie1" image="{{{C_BaseDir}}}replie_1.png" hidden="1"/>
			<label posn="8 -1.875 2" scale="1.25" halign="center" style="TextButtonNav" id="Label_CountReplies"/>
		</frame></frame>
		
		<frame class="LibCustomUI_Module" id="HG_MiniMap"><frame posn="158 -88" id="Frame_MiniMap" hidden="1">
			<quad posn="0 0 4.3" sizen="0.5 0.5" halign="center" valign="center" id="Quad_MiniMapPointer"/>
			<quad posn="0 0 4.2" sizen="0.5 0.5" halign="center" valign="center" bgcolor="F00F" id="Quad_MiniMapOpponent" hidden="1"/>
			<minimap sizen="40 40" posn="-40 40 1" mapposition="1 0"/>
			<quad sizen="42 42" posn="-41 41 0" bgcolor="000A"/>
		</frame></frame>
		
		<frame posn="0 0 -10" id="Frame_MapMenu" hidden="1">
			<quad posn="-160 90 0" sizen="320 180" bgcolor="000A"/>
			<quad posn="-160 90 3" sizen="320 180" image="file://Media/Images/Effects/Vignette.dds"/>
			<quad posn="-160 90 3" sizen="320 180" image="file://Media/Images/Effects/Vignette.dds"/>
			
			<minimap sizen="240 240" posn="0 0 1" halign="center" valign="center" mapposition="1 0" id="MiniMap_Main"/>
			
			<quad posn="0 0 4" sizen="2 2" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_MapPointer"/>
			<quad posn="0 0 3.1" sizen="2 2" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_MenuPole" colorize="1. 1. 1."/>
			<quad posn="0 0 3.2" sizen="2 2" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" hidden="1" id="Quad_MenuOpponent"/>
			
			<frame class="LibCustomUI_Module" id="HG_MapLegend"><frame posn="160 64 10" id="Frame_Legend">
				<quad posn="-0.5" sizen="0.5 10" bgcolor="777F" id="Quad_LegendBg"/>
				<quad posn="-3.5 -1 2" sizen="2 2" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_LegendYou"/>
				<quad posn="-3.5 -4 2" sizen="2 2" image="{{{C_BaseDir}}}hud_map_pointer.png" colorize="1. 1. 1."/>
				<quad posn="-3.5 -7 2" sizen="2 2" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_LegendOpponent"/>
				<label posn="-4.5 -2 2" scale="0.75" valign="center2" halign="right" style="TextButtonNav" text="$s$fffYou"/>
				<label posn="-4.5 -5 2" scale="0.75" valign="center2" halign="right" style="TextButtonNav" text="$s$fffHorn of Plenty"/>
				<label posn="-4.5 -8 2" scale="0.75" valign="center2" halign="right" style="TextButtonNav" text="$s$fffOpponent" id="Label_LegendOpponent"/>
			</frame></frame>
			
			<frame class="LibCustomUI_Module" id="HG_Position"><frame posn="-160 64 10" id="Frame_Position">
				<quad sizen="0.5 10" bgcolor="777F"/>
				<label posn="2 -2 2" valign="center2" scale="0.875" style="TextButtonNav" id="Label_PositionX"/>
				<label posn="2 -5 2" valign="center2" scale="0.875" style="TextButtonNav" id="Label_PositionY"/>
				<label posn="2 -8 2" valign="center2" scale="0.875" style="TextButtonNav" id="Label_PositionZ"/>
			</frame></frame>
			
			<frame posn="86 -66 10" id="Frame_CharInfo">
				<quad sizen="96 24" image="{{{C_BaseDir}}}ScoresRectangleUnspawn2.dds"/>
				<quad posn="44 13 1" sizen="30 30" id="Quad_CharImage"/>
				<quad posn="44 12.5 0.5" sizen="30 30" image="{{{C_BaseDir}}}char_bg_glow.png" opacity="0.5"/>
				
				<label posn="59 -19.25 2" sizen="42 4" scale="0.675" halign="center" valign="center" id="Label_PlayerName"/>
				
				<format textcolor="777"/>
				<label posn="3 -3 2" scale="0.8" style="TextButtonNav" text="Ammo Reload"/>
				<label posn="3 -6.33 2" scale="0.8" style="TextButtonNav" text="Stamina"/>
				<label posn="3 -9.66 2" scale="0.8" style="TextButtonNav" text="Speed"/>
				<label posn="3 -13 2" scale="0.8" style="TextButtonNav" text="Crit chance"/>
				
				<label posn="3 -18.6 2" scale="0.8" style="TextButtonNav" id="Label_CharName"/>
				
				<format textcolor="FFF"/>
				<label posn="44 -3 2" scale="0.8" halign="right" style="TextButtonNav" id="Label_AmmoGain"/>
				<label posn="44 -6.33 2" scale="0.8" halign="right" style="TextButtonNav" id="Label_StaminaGain"/>
				<label posn="44 -9.66 2" scale="0.8" halign="right" style="TextButtonNav" id="Label_Speed"/>
				<label posn="44 -13 2" scale="0.8" halign="right" style="TextButtonNav" id="Label_Criticals"/>
			</frame>
		</frame>
		
		<script><!--
			#Include "MathLib" as ML
			#Include "TextLib" as TL
			
			main() {
				declare Frame_MiniMap <=> (Page.GetFirstChild("Frame_MiniMap") as CMlFrame);
				declare Frame_MapMenu <=> (Page.GetFirstChild("Frame_MapMenu") as CMlFrame);
				
				declare Label_CountLaser	<=> (Page.GetFirstChild("Label_CountLaser") as CMlLabel);
				declare Label_CountNucleus	<=> (Page.GetFirstChild("Label_CountNucleus") as CMlLabel);
				declare Label_CountArrow	<=> (Page.GetFirstChild("Label_CountArrow") as CMlLabel);
				declare Label_CountRocket	<=> (Page.GetFirstChild("Label_CountRocket") as CMlLabel);
				declare Label_CountReplies	<=> (Page.GetFirstChild("Label_CountReplies") as CMlLabel);
				
				declare Quad_Laser0		<=> (Page.GetFirstChild("Quad_Laser0") as CMlQuad);
				declare Quad_Laser1		<=> (Page.GetFirstChild("Quad_Laser1") as CMlQuad);
				declare Quad_Nucleus0	<=> (Page.GetFirstChild("Quad_Nucleus0") as CMlQuad);
				declare Quad_Nucleus1	<=> (Page.GetFirstChild("Quad_Nucleus1") as CMlQuad);
				declare Quad_Arrow0		<=> (Page.GetFirstChild("Quad_Arrow0") as CMlQuad);
				declare Quad_Arrow1		<=> (Page.GetFirstChild("Quad_Arrow1") as CMlQuad);
				declare Quad_Rocket0	<=> (Page.GetFirstChild("Quad_Rocket0") as CMlQuad);
				declare Quad_Rocket1	<=> (Page.GetFirstChild("Quad_Rocket1") as CMlQuad);
				declare Quad_Replie0	<=> (Page.GetFirstChild("Quad_Replie0") as CMlQuad);
				declare Quad_Replie1	<=> (Page.GetFirstChild("Quad_Replie1") as CMlQuad);
				
				declare netread Integer Net_AmmoCountLaser for UI;
				declare netread Integer Net_AmmoCountNucleus for UI;
				declare netread Integer Net_AmmoCountArrow for UI;
				declare netread Integer Net_AmmoCountRocket for UI;
				declare netread Integer Net_RepliesCount for UI;
				
				declare Quad_MiniMapPointer		<=> (Page.GetFirstChild("Quad_MiniMapPointer") as CMlQuad);
				declare Quad_MiniMapOpponent	<=> (Page.GetFirstChild("Quad_MiniMapOpponent") as CMlQuad);
				
				declare MiniMap_Main			<=> (Page.GetFirstChild("MiniMap_Main") as CMlMinimap);
				declare Quad_MenuPole			<=> (Page.GetFirstChild("Quad_MenuPole") as CMlQuad);
				declare Quad_MenuOpponent		<=> (Page.GetFirstChild("Quad_MenuOpponent") as CMlQuad);
				declare Quad_LegendOpponent		<=> (Page.GetFirstChild("Quad_LegendOpponent") as CMlQuad);
				declare Label_LegendOpponent	<=> (Page.GetFirstChild("Label_LegendOpponent") as CMlLabel);
				declare Quad_LegendBg			<=> (Page.GetFirstChild("Quad_LegendBg") as CMlQuad);
				declare Quad_LegendYou			<=> (Page.GetFirstChild("Quad_LegendYou") as CMlQuad);
				declare Quad_MapPointer			<=> (Page.GetFirstChild("Quad_MapPointer") as CMlQuad);
				
				declare Label_PositionX <=> (Page.GetFirstChild("Label_PositionX") as CMlLabel);
				declare Label_PositionY <=> (Page.GetFirstChild("Label_PositionY") as CMlLabel);
				declare Label_PositionZ <=> (Page.GetFirstChild("Label_PositionZ") as CMlLabel);
				
				declare Label_AmmoGain		<=> (Page.GetFirstChild("Label_AmmoGain") as CMlLabel);
				declare Label_StaminaGain	<=> (Page.GetFirstChild("Label_StaminaGain") as CMlLabel);
				declare Label_Speed			<=> (Page.GetFirstChild("Label_Speed") as CMlLabel);
				declare Label_Criticals		<=> (Page.GetFirstChild("Label_Criticals") as CMlLabel);
				declare Quad_CharImage		<=> (Page.GetFirstChild("Quad_CharImage") as CMlQuad);
				declare Label_CharName		<=> (Page.GetFirstChild("Label_CharName") as CMlLabel);
				declare Label_PlayerName	<=> (Page.GetFirstChild("Label_PlayerName") as CMlLabel);
				
				declare Quad_Weapon1 <=> (Page.GetFirstChild("Quad_Weapon1") as CMlQuad);
				declare Quad_Weapon2 <=> (Page.GetFirstChild("Quad_Weapon2") as CMlQuad);
				declare Quad_Weapon3 <=> (Page.GetFirstChild("Quad_Weapon3") as CMlQuad);
				declare Quad_Weapon4 <=> (Page.GetFirstChild("Quad_Weapon4") as CMlQuad);
				
				declare HudColor for UI = TL::ColorToText(InputPlayer.User.Color);
				
				Quad_LegendYou.Colorize = InputPlayer.User.Color;
				Quad_MapPointer.Colorize = InputPlayer.User.Color;
				Quad_MiniMapPointer.BgColor = InputPlayer.User.Color;
				
				declare netread Integer Net_Model2 for UI;
				declare netread Integer Net_PlayersNbAlive for UI;
				
				declare netwrite Integer Net_RepliesCount2 for UI;
				
				declare RepliesCountSync = 0;
				declare RepliesCount = 0;
				
				RepliesCountSync = 0;
				RepliesCount = 0;
				
				declare ModelId = 0;
				if (Net_Model2 == 0) ModelId = 1;
				else ModelId = Net_Model2;
				
				declare CSmPlayer Opponent;
				
				{{{CustomUI::InjectMLInit()}}}
				
				while(True) {
					yield;
					
					{{{CustomUI::InjectMLLoop()}}}
					
					//// Switch menu visibility ////
					
					Frame_MapMenu.Visible = IsKeyPressed(32);
					if (True) Frame_MiniMap.Visible = !IsKeyPressed(32);
					
					//// MiniMap: Player position ////
					
					Quad_MiniMapPointer.RelativePosition = <
						InputPlayer.Position[0] / 384. * -40.,
						InputPlayer.Position[2] / 384. * 40.,
						2.
					>;
					
					//// Map menu ////
					
					MiniMap_Main.RelativePosition = <
						InputPlayer.Position[0] / 384. * 240 - 120,
						InputPlayer.Position[2] / 384. * -240 + 120,
						1.
					>;
					
					Quad_MenuPole.RelativePosition = MiniMap_Main.RelativePosition + <
						{{{G_CenterPole.Position[0]}}} / 384. * -240 + 120,
						{{{G_CenterPole.Position[2]}}} / 384. * 240 - 120,
						3.
					>;
					
					if (Net_PlayersNbAlive == 2) {
						foreach (Player in Players) {
							if (Player != InputPlayer && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !Player.IsBot) Opponent <=> Player;
						}
							if (Opponent != Null) {
							Quad_MenuOpponent.Show();
							Quad_MiniMapOpponent.Show();
							Quad_LegendOpponent.Show();
							Label_LegendOpponent.Show();
							Quad_LegendBg.Size = <0.5, 10.>;
							Quad_LegendOpponent.Colorize = Opponent.User.Color;
							Quad_MenuOpponent.Colorize = Opponent.User.Color;
							Quad_MiniMapOpponent.BgColor = Opponent.User.Color;
							Quad_MenuOpponent.RelativePosition = MiniMap_Main.RelativePosition + <
								Opponent.Position[0] / 384. * -240 + 120,
								Opponent.Position[2] / 384. * 240 - 120,
								3.
							>;
							Quad_MiniMapOpponent.RelativePosition = <
								Opponent.Position[0] / 384. * -40.,
								Opponent.Position[2] / 384. * 40.,
								2.
							>;
						}
					} else {
						Quad_MenuOpponent.Hide();
						Quad_MiniMapOpponent.Hide();
						Quad_LegendOpponent.Hide();
						Label_LegendOpponent.Hide();
						Quad_LegendBg.Size = <0.5, 7.>;
					}
					
					//// Position ////
					
					Label_PositionX.SetText("X: "^ML::FloorInteger(InputPlayer.Position[0]));
					Label_PositionY.SetText("Y: "^ML::FloorInteger(InputPlayer.Position[1]));
					Label_PositionZ.SetText("Z: "^ML::FloorInteger(InputPlayer.Position[2]));
					
					//// Display ammo count ////
					
					if (Net_AmmoCountLaser > 0) {
						Label_CountLaser.SetText("$s$FFF"^Net_AmmoCountLaser);
						Quad_Laser0.Hide();
						Quad_Laser1.Show();
					} else {
						Label_CountLaser.SetText("$s$777"^"0");
						Quad_Laser0.Show();
						Quad_Laser1.Hide();
					}
					
					if (Net_AmmoCountNucleus > 0) {
						Label_CountNucleus.SetText("$s$FFF"^Net_AmmoCountNucleus);
						Quad_Nucleus0.Hide();
						Quad_Nucleus1.Show();
					} else {
						Label_CountNucleus.SetText("$s$777"^"0");
						Quad_Nucleus0.Show();
						Quad_Nucleus1.Hide();
					}
					
					if (Net_AmmoCountArrow > 0) {
						Label_CountArrow.SetText("$s$FFF"^Net_AmmoCountArrow);
						Quad_Arrow0.Hide();
						Quad_Arrow1.Show();
					} else {
						Label_CountArrow.SetText("$s$777"^"0");
						Quad_Arrow0.Show();
						Quad_Arrow1.Hide();
					}
					
					if (Net_AmmoCountRocket > 0) {
						Label_CountRocket.SetText("$s$FFF"^Net_AmmoCountRocket);
						Quad_Rocket0.Hide();
						Quad_Rocket1.Show();
					} else {
						Label_CountRocket.SetText("$s$777"^"0");
						Quad_Rocket0.Show();
						Quad_Rocket1.Hide();
					}
					
					if (RepliesCount > 0) {
						Label_CountReplies.SetText("$s$FFF"^RepliesCount);
						Quad_Replie0.Hide();
						Quad_Replie1.Show();
					} else {
						Label_CountReplies.SetText("$s$777"^"0");
						Quad_Replie0.Show();
						Quad_Replie1.Hide();
					}
					
					//// Char info ////
					
					Label_AmmoGain.SetText(""^InputPlayer.AmmoGain);
					Label_StaminaGain.SetText(""^InputPlayer.StaminaGain);
					Label_Speed.SetText(ML::FloorInteger(InputPlayer.SpeedPower * 100)^"%");
					Label_PlayerName.SetText(InputPlayer.Name);
					
					switch (ModelId) {
						case 1 : {
							Label_Criticals.SetText("1%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_player.png";
							Label_CharName.SetText("Arena Player");
						}				
						case 2 : {
							Label_Criticals.SetText("3%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_sintel.png";
							Label_CharName.SetText("Sintel");
						}
						case 3 : {
							Label_Criticals.SetText("3%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_susu.png";
							Label_CharName.SetText("Susu");
						}
						case 4 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_organic.png";
							Label_CharName.SetText("Toad");
						}
						case 5 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_engineer.png";
							Label_CharName.SetText("Engineer");
						}
						case 6 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_boba.png";
							Label_CharName.SetText("Boba Fett");
						}
						case 7 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_steve.png";
							Label_CharName.SetText("Steve");
						}
						case 8 : {
							Label_Criticals.SetText("5%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_creeper.png";
							Label_CharName.SetText("Creeper");
						}
					}
					
					//// Highlight weapon ////
					
					if (InputPlayer.CurWeapon == 1) {
						Quad_Weapon1.Show();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Hide();
					} else if (InputPlayer.CurWeapon == 3) {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Show();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Hide();
					} else if (InputPlayer.CurWeapon == 5) {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Show();
						Quad_Weapon4.Hide();
					} else if (InputPlayer.CurWeapon == 2 && Net_AmmoCountRocket > 0) {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Show();
					} else {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Hide();
					}
					
					Quad_Weapon1.Colorize = InputPlayer.User.Color;
					Quad_Weapon2.Colorize = InputPlayer.User.Color;
					Quad_Weapon3.Colorize = InputPlayer.User.Color;
					Quad_Weapon4.Colorize = InputPlayer.User.Color;
					
					//// Replies ////
					
					if (Net_RepliesCount != RepliesCountSync) {
						RepliesCount += 1;
						RepliesCountSync = Net_RepliesCount;
					}
					
					foreach (Event in PendingEvents) {
						if (Event.Type == CMlEvent::Type::KeyPress && Event.CharPressed == "2359296" && InputPlayer.Armor < InputPlayer.ArmorMax && RepliesCount > 0) {
							RepliesCount -= 1;
						}
					}
					
					Net_RepliesCount2 = RepliesCount;
				}
			}
		--></script>
	""";
}

Void HungerGamesSpawnPlayer(CSmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	_Player.AmmoGain = 0.;
	_Player.StaminaGain = 0.;
	_Player.ForceColor = _Player.User.Color;
	
	Layers::Attach("toPole", _Player);
	
	declare Boolean HasWeapon for _Player;
	HasWeapon = False;
	
	declare HitPoints for _Player = 0;
	HitPoints = 0;
	
	declare ItemPoints for _Player = 0;
	ItemPoints = 0;
	
	declare SurivalPoints for _Player = 0;
	SurivalPoints = 0;
	
	declare Integer AmmoCountLaser		for _Player;
	declare Integer AmmoCountNucleus	for _Player;
	declare Integer AmmoCountArrow		for _Player;
	declare Integer AmmoCountRocket		for _Player;
	declare Integer PlayerRepliesCount	for _Player;
	
	declare netwrite Integer Net_RepliesCount for UI;
	Net_RepliesCount = 0;
	
	AmmoCountLaser		= 0;
	AmmoCountNucleus	= 0;
	AmmoCountArrow		= 0;
	AmmoCountRocket		= 0;
	PlayerRepliesCount	= 0;
	
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser, 0);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Nucleus, 0);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Arrow, 0);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 0);
	
	SetPlayerWeapon(_Player, CSmMode::EWeapon::Rocket, False);
	
	declare PlayerSpawned for _Player = False;
	PlayerSpawned = True;
	
	declare netread Integer Net_Model for UI;
	declare netwrite Integer Net_Model2 for UI;
	declare Integer Model for _Player;
	
	if (Net_Model == 0) Model = 1;
	else Model = Net_Model;
	
	Net_Model2 = Model;
	
	switch (Model) {
		case 1 : {
			_Player.ForceModelId = NullId;
			_Player.ArmorMax = S_PlayersArmor * 100;
			_Player.Armor = S_PlayersArmor * 100;
			_Player.SpeedPower = 1.;
		}
		case 2 : {
			_Player.ForceModelId = G_Objects["Sintel"];
			_Player.ArmorMax = S_PlayersArmor * 100;
			_Player.Armor = S_PlayersArmor * 100;
			_Player.SpeedPower = 0.75;
		}
		case 3 : {
			_Player.ForceModelId = G_Objects["Susu"];
			_Player.ArmorMax = S_PlayersArmor * 100;
			_Player.Armor = S_PlayersArmor * 100;
			_Player.SpeedPower = 0.75;
		}
		case 4 : {
			_Player.ForceModelId = G_Objects["Toad"];
			_Player.ArmorMax = S_PlayersArmor * 100 + 200;
			_Player.Armor = S_PlayersArmor * 100 + 200;
			_Player.SpeedPower = 1.;
		}
		case 5 : {
			_Player.ForceModelId = G_Objects["Engineer"];
			_Player.ArmorMax = S_PlayersArmor * 100 + 100;
			_Player.Armor = S_PlayersArmor * 100 + 100;
			_Player.SpeedPower = 0.75;
		}
		case 6 : {
			_Player.ForceModelId = G_Objects["Boba"];
			_Player.ArmorMax = S_PlayersArmor * 100 + 100;
			_Player.Armor = S_PlayersArmor * 100 + 100;
			_Player.SpeedPower = 0.75;
		}
		case 7 : {
			_Player.ForceModelId = G_Objects["Steve"];
			_Player.ArmorMax = S_PlayersArmor * 100;
			_Player.Armor = S_PlayersArmor * 100;
			_Player.SpeedPower = 1.;
		}
		case 8 : {
			_Player.ForceModelId = G_Objects["Creeper"];
			_Player.ArmorMax = S_PlayersArmor * 100;
			_Player.Armor = S_PlayersArmor * 100;
			_Player.SpeedPower = 2/3.;
		}
	}
	
	if (_Player.IsFakePlayer) {
		_Player.Driver.Accuracy = 0.95;
		_Player.Driver.AggroRadius = 60.;
		_Player.Driver.DisengageDistance = 100.;
		_Player.Driver.ShootPeriodMin = 300;
		_Player.Driver.ShootPeriodMax = 500;
		_Player.AmmoGain = 0.5;
		SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 0);
	}
	
	Layers::Update("hgInfo", GetHudOverlay());
	Layers::Attach("hgInfo", _Player);
		
	if (G_SpawnsList.count == 0) {
		foreach (MapLandmark in MapLandmarks_PlayerSpawn) G_SpawnsList.add(MapLandmark.Id);
	}
	
	declare SpawnId = NullId;
	while (True) {
		SpawnId = G_SpawnsList[MathLib::Rand(0, G_SpawnsList.count - 1)];
		if (SpawnId != G_LatestSpawnId) break;
		if (G_SpawnsList.count == 1) break;
	}
	G_LatestSpawnId = SpawnId;
	SM::SpawnPlayer(_Player, 0, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn);
	declare Removed = G_SpawnsList.remove(SpawnId);
}

Text GetCharacterChoosingUI() {
return
"""
<frame posn="0 -1 0">
	<quad posn="-106 73" sizen="212 145" image="{{{C_BaseDir}}}char_bg.png"/>
	<label posn="0 68 1" scale="1.5" halign="center" style="TextButtonNav" textprefix="$n$fff$t$s" text="Select your character"/>
	<label posn="101 68.5 1" scale="0.625" halign="right" style="TextRaceChrono" textprefix="$fd0" text="-:--" id="Label_Chrono"/>
	
	<label id="Label_Button1" posn="-102.5 0 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 1)" ScriptEvents="1"/>
	<label id="Label_Button2" posn="-50.5 0 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 2)" ScriptEvents="1"/>
	<label id="Label_Button3" posn="1.5 0 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 3)" ScriptEvents="1"/>
	<label id="Label_Button4" posn="53.5 0 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 4)" ScriptEvents="1"/>
	<label id="Label_Button5" posn="-102.5 -65 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 5)" ScriptEvents="1"/>
	<label id="Label_Button6" posn="-50.5 -65 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 6)" ScriptEvents="1"/>
	<label id="Label_Button7" posn="1.5 -65 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 7)" ScriptEvents="1"/>
	<label id="Label_Button8" posn="53.5 -65 2" scale="0.65" style="CardButtonMediumWide" text="Select (Press 8)" ScriptEvents="1"/>
	
	<frame posn="-103 60 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight1"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Arena Player"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_player.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor1"/>
			<label posn="0 -6" halign="right" text="100%"/>
			<label posn="0 -12" halign="right" text="0.5"/>
			<label posn="0 -18" halign="right" text="0.1"/>
			<label posn="0 -24" halign="right" text="1%"/>
		</frame>
	</frame>
	<frame posn="-51 60 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight2"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Sintel"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_sintel.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor2"/>
			<label posn="0 -6" halign="right" text="75%"/>
			<label posn="0 -12" halign="right" text="0.75"/>
			<label posn="0 -18" halign="right" text="0.3"/>
			<label posn="0 -24" halign="right" text="3%"/>
		</frame>
	</frame>
	<frame posn="1 60 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight3"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Susu"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_susu.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor3"/>
			<label posn="0 -6" halign="right" text="100%"/>
			<label posn="0 -12" halign="right" text="0.75"/>
			<label posn="0 -18" halign="right" text="0.3"/>
			<label posn="0 -24" halign="right" text="3%"/>
		</frame>
	</frame>
	<frame posn="53 60 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight4"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Toad"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_organic.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor4"/>
			<label posn="0 -6" halign="right" text="50%"/>
			<label posn="0 -12" halign="right" text="1.0"/>
			<label posn="0 -18" halign="right" text="1.0"/>
			<label posn="0 -24" halign="right" text="4%"/>
		</frame>
	</frame>
	
	<frame posn="-103 -5 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight5"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Engineer"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_engineer.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor5"/>
			<label posn="0 -6" halign="right" text="75%"/>
			<label posn="0 -12" halign="right" text="0.6"/>
			<label posn="0 -18" halign="right" text="0.3"/>
			<label posn="0 -24" halign="right" text="2%"/>
		</frame>
	</frame>
	<frame posn="-51 -5 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight6"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Boba Fett"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_boba.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor6"/>
			<label posn="0 -6" halign="right" text="75%"/>
			<label posn="0 -12" halign="right" text="0.6"/>
			<label posn="0 -18" halign="right" text="0.3"/>
			<label posn="0 -24" halign="right" text="2%"/>
		</frame>
	</frame>
	<frame posn="1 -5 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight7"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Steve"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_steve.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor7"/>
			<label posn="0 -6" halign="right" text="100%"/>
			<label posn="0 -12" halign="right" text="0.4"/>
			<label posn="0 -18" halign="right" text="0.1"/>
			<label posn="0 -24" halign="right" text="2%"/>
		</frame>
	</frame>
	<frame posn="53 -5 1">
		<quad sizen="50 60" image="{{{C_BaseDir}}}char_card_n.png"/>
		<quad posn="0 0 1" sizen="50 60" image="{{{C_BaseDir}}}char_card_h.png" hidden="1" id="Quad_Highlight8"/>
		<label posn="25 -2.5 1" halign="center" style="TextButtonNav" text="Creeper"/>
		<quad posn="9 -6 1" sizen="32 32" image="{{{C_BaseDir}}}char_creeper.png"/>
		<quad posn="0 -38 2" sizen="50 0.5" image="{{{C_BaseDir}}}gradient.png"/>
		<frame posn="3.5 -40 1" scale="0.6">
			<label posn="0 0" textprefix="$s$888" text="Max armor points"/>
			<label posn="0 -6" textprefix="$s$888" text="Speed"/>
			<label posn="0 -12" textprefix="$s$888" text="Weapon reload"/>
			<label posn="0 -18" textprefix="$s$888" text="Stamina gain"/>
			<label posn="0 -24" textprefix="$s$888" text="Critical hit chance"/>
		</frame>
		<frame posn="46.5 -40 2" scale="0.6" halign="right" >
			<label posn="0 0" halign="right" text="" id="Label_Armor8"/>
			<label posn="0 -6" halign="right" text="66%"/>
			<label posn="0 -12" halign="right" text="0.75"/>
			<label posn="0 -18" halign="right" text="0.1"/>
			<label posn="0 -24" halign="right" text="5%"/>
		</frame>
	</frame>
</frame>
""";
}

Void SwitchWeapon (CSmModeEvent Event) {
	declare WeaponIndex for Event.Player = 0;
	WeaponIndex = Event.Player.CurWeapon;
	
	declare Integer AmmoCountLaser		for Event.Player;
	declare Integer AmmoCountNucleus	for Event.Player;
	declare Integer AmmoCountArrow		for Event.Player;
	
	switch (Event.ActionChange) {
		case -1 : {
			switch (Event.Player.CurWeapon) {
				case 1: WeaponIndex = 2;
				case 3: {
					if (AmmoCountLaser > 0) WeaponIndex = 1;
					else WeaponIndex = 2;
				}
				
				case 5: {
					if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountLaser > 0) WeaponIndex = 1;
					else WeaponIndex = 2;
				}
				
				case 2: {
					if (AmmoCountArrow > 0) WeaponIndex = 5;
					else if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountLaser > 0) WeaponIndex = 1;
				}
			}
		}
		case 1 : {
			switch (Event.Player.CurWeapon) {					
				case 1: {
					if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountArrow > 0) WeaponIndex = 5;
					else WeaponIndex = 2;
				}
				
				case 3: {
					if (AmmoCountArrow > 0) WeaponIndex = 5;
					else WeaponIndex = 2;
				}
				
				case 5: WeaponIndex = 2;
				
				case 2: {
					if (AmmoCountLaser > 0) WeaponIndex = 1;
					else if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountArrow > 0) WeaponIndex = 5;
				}
			}
		}
	}
	
	switch (WeaponIndex) {
		case 1 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Laser, False);
		case 2 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Rocket, False);
		case 3 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Nucleus, False);
		case 5 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Arrow, False);
	}
}

// Creates message for near miss
Text GetNearMissMessage(CSmModeEvent _Event) {
	// Catch invalid events
	if (_Event.Type != CSmModeEvent::EType::OnNearMiss) return "";
	if (_Event.Shooter.CurWeapon != 1) return "";
	if (_Event.MissDist <= 0.0) return "";
	
	// Get message text
	declare Message = "";
	declare Dist = MathLib::NearestInteger(_Event.MissDist * 1000);
	if (Dist >= 10) {
		Message = """You missed $<{{{_Event.Victim.Name}}}$> by {{{Dist/10.0}}}cm!""";
	} else {
		Dist = MathLib::NearestInteger(_Event.MissDist * 10000);
		if (Dist >= 10) {
			Message = """You missed $<{{{_Event.Victim.Name}}}$> by {{{Dist/10.0}}}mm!""";
		} else {
			Dist = MathLib::NearestInteger(_Event.MissDist * 10000000);
			Message = """You missed $<{{{_Event.Victim.Name}}}$> by {{{Dist/10.0}}}µm!""";
		}
	}
	return Message;
}

Void Countdown() {
	Layers::Create("countdown", """
		<quad posn="0 0 1" sizen="60 60" halign="center" valign="center" bgcolor="000" id="Quad_MainDigit"/>
		<quad posn="0 0 0" sizen="60 60" halign="center" valign="center" bgcolor="333" id="Quad_SecDigit"/>
		<script><!--
			main() {
				declare test <=> (Page.GetFirstChild("test") as CMlLabel);
				
				declare Quad_MainDigit <=> (Page.GetFirstChild("Quad_MainDigit") as CMlQuad);
				declare Quad_SecDigit <=> (Page.GetFirstChild("Quad_SecDigit") as CMlQuad);
				
				declare Tick = 11;
				declare TickEndTime = Now + 1000;
				
				declare Sound = Audio.CreateSound("file://Media/Manialinks/HungerGames/countdown.ogg", 1., False, False, False);
				Sound.Play();
				
				Quad_MainDigit.Hide();
				Quad_SecDigit.Hide();
				
				sleep(1227);
				
				while(True) {
					yield;
					
					if (Tick > -1) {
						Quad_MainDigit.Show();
						Quad_SecDigit.Show();
						
						Quad_MainDigit.RelativeScale -= 0.005;
						Quad_MainDigit.Opacity -= 0.005;
						
						Quad_SecDigit.RelativeScale += 0.0025;
						Quad_SecDigit.Opacity -= 0.0025;
					}
					
					if (Now >= TickEndTime && Tick > 0) {
						TickEndTime = Now + 1000;
						
						Quad_MainDigit.RelativeScale = 1.;
						Quad_MainDigit.Opacity = 1.;
						
						Quad_SecDigit.RelativeScale = 1.;
						Quad_SecDigit.Opacity = 0.75;
						
						Tick -= 1;
					}
					
					if (Now >= TickEndTime && Tick == 0) {
						if (Quad_MainDigit.Opacity >= 0.025) Quad_MainDigit.Opacity -= 0.025;
						if (Quad_SecDigit.Opacity >= 0.025) Quad_SecDigit.Opacity -= 0.025;
						if (Quad_MainDigit.Opacity <= 0.) Quad_MainDigit.Hide();
						if (Quad_SecDigit.Opacity <= 0.) Quad_SecDigit.Hide();
					}
					
					Quad_MainDigit.ImageUrl = "file://Media/Manialinks/HungerGames/countdown/main_"^Tick^".png";
					Quad_SecDigit.ImageUrl = "file://Media/Manialinks/HungerGames/countdown/sec_"^Tick^".png";
				}
			}
		--></script>
	""");
	foreach (Player in Players) Layers::Attach("countdown", Player);
	
	MB_Sleep(11225);
	
	Message::SendBigMessage("", 1000, 1, CUIConfig::EUISound::PhaseChange, 0);
}

Text LayerGoPole() {
	return """
		<frame class="LibCustomUI_Module" id="HG_TipsWindow"><frame posn="-64 -52">
			<quad sizen="128 10" bgcolor="000A"/>
			<label posn="64 -5" halign="center" valign="center2" style="TextValueSmallSm" id="Label_Tip"/>
		</frame></frame>
		<script><!--
			#Include "MathLib" as ML
			main() {
				declare Label_Tip <=> (Page.GetFirstChild("Label_Tip") as CMlLabel);
				declare Message = "Run to the Pole and touch it to get a weapon!";
				declare Phase = False;
				declare NextPhase = Now + 125;
				{{{CustomUI::InjectMLInit()}}}
				while(True) {
					yield;
					{{{CustomUI::InjectMLLoop()}}}
					if (ML::Distance(InputPlayer.Position, {{{G_CenterPole.Position}}}) > 60. && InputPlayer.Position != <0., 0., 0.>) {
						if (Now > NextPhase) {
							if (Phase) {
								Label_Tip.SetText("$f00"^Message);
								Phase = False;
							} else {
								Label_Tip.SetText("$600"^Message);
								Phase = True;
							}
							NextPhase = Now + 125;
						}
							
					} else {
						Label_Tip.SetText("$fff"^Message);
					}
				}
			}
		--></script>
	""";
}
