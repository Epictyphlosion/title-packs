// -------------------------------------- //
//  INVASION ARENA by domino54            //
//  script version: 2017-03-21            //
// -------------------------------------- //

#RequireContext CSmMapType

#Const Version			"2017-03-21"
#Const MapTypeVersion	2
#Const ScriptName		"InvasionArena.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
#Include "Libs/domino54/EditAnchors.Script.txt" as EditAnchors

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_InvasionArena_WindowSize	<100., 60.>

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/// Check if the map is valid.
Void UpdateValidability() {
	foreach (Data in AnchorData) {
		Data.Tag = Data.DefaultTag;
		Data.Order = Data.DefaultOrder;
		if (Data.Tag == "Checkpoint") Data.Tag = "Goal";
	}
	
	Anchor::UpdateAnchorCounts();
				
	if (!Anchor::HasAtLeastOneAnchor("Spawn", 0, _("You must place at least one Spawn"))) return;
	if (!Anchor::HasAtLeastOneAnchor("Goal", 0, _("You must place at least one Goal"))) return;
	
	ValidationStatus = CMapType::ValidationStatus::Validated;
}

// ---------------------------------- //
/** Create layer for editing objectives.
 *
 *	@return		Objectives editing layer.
 */
Text CreateManialinkEditObjectives() {  
	return """
<manialink version="3" name="InvasionArena:EditObjectives">
<stylesheet>
	<style class="entry" pos="0 -23" size="18 5" halign="center" valign="center2" textsize="2" textcolor="FFF" textemboss="1" />
</stylesheet>

<frame id="Frame_ObjectivesEditWindow" z-index="100" hidden="1">
	<label pos="0 19" halign="center" textemboss="1" textsize="2" textcolor="FFF" text="Score in points" />
	<frame pos="0 12">
		<frame pos="-33">
			<quad halign="center" size="20 20" style="MedalsBig" substyle="MedalBronze" />
			<entry class="entry" default="-1" id="Entry_MapObjectiveBronze" />
		</frame>
		<frame pos="-11">
			<quad halign="center" size="20 20" style="MedalsBig" substyle="MedalSilver" />
			<entry class="entry" default="-1" id="Entry_MapObjectiveSilver" />
		</frame>
		<frame pos="11">
			<quad halign="center" size="20 20" style="MedalsBig" substyle="MedalGold" />
			<entry class="entry" default="-1" id="Entry_MapObjectiveGold" />
		</frame>
		<frame pos="33">
			<quad halign="center" size="20 20" style="MedalsBig" substyle="MedalNadeo" />
			<entry class="entry" default="-1" id="Entry_MapObjectiveAuthor" />
		</frame>
	</frame>

	<label pos="0 -16" size="{{{C_InvasionArena_WindowSize.Y - 6}}}" halign="center" autonewline="1" textemboss="1" textsize="1" id="Label_MapObjectivesStatus" />
	<label pos="-20 -26" halign="center" style="CardButtonMedium" text="OK" ScriptEvents="1" id="Label_ButtonSaveScores" />
	<label pos="20 -26" halign="center" style="CardButtonMedium" text="Cancel" ScriptEvents="1" id="Label_ButtonStopEdit" />

	<frame pos="0 {{{(C_InvasionArena_WindowSize.Y + 12) / 2}}}">
		<label pos="0 -6" halign="center" valign="center2" style="TextTitle3" text="Set map objectives" translate="1" />
		<quad pos="0 4.75" halign="center" size="{{{C_InvasionArena_WindowSize.X + 7.5}}} 8" style="Bgs1InRace" substyle="BgGlow2" />
		<quad pos="0 -{{{C_InvasionArena_WindowSize.Y + 12}}}" halign="center" size="{{{C_InvasionArena_WindowSize.X + .5}}} 2" style="Bgs1" substyle="BgMetalBar" />
		<quad halign="center" size="{{{C_InvasionArena_WindowSize.X + .5}}} 12" style="Bgs1" substyle="BgTitle" />
		<quad halign="center" size="{{{C_InvasionArena_WindowSize.X}}} {{{C_InvasionArena_WindowSize.Y + 12}}}" style="Bgs1" substyle="BgWindow2" />
	</frame>

	<quad z-index="-1" size="320 180" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" ScriptEvents="1" />
</frame>

<frame posn="-116 84">
	<quad sizen="6 6" style="Icons128x128_1" substyle="MedalCount" />
	<quad sizen="6 6" style="Bgs1InRace" substyle="BgCard" id="Quad_OpenEditObjectives" ScriptEvents="1" />
</frame>

<script><!--
/**
 *	InvasionArena - Edit objectives
 */

#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_ObjectivesEditWindow	<=> (Page.GetFirstChild("Frame_ObjectivesEditWindow") as CMlFrame);
	declare Entry_MapObjectiveBronze	<=> (Page.GetFirstChild("Entry_MapObjectiveBronze") as CMlEntry);
	declare Entry_MapObjectiveSilver	<=> (Page.GetFirstChild("Entry_MapObjectiveSilver") as CMlEntry);
	declare Entry_MapObjectiveGold		<=> (Page.GetFirstChild("Entry_MapObjectiveGold") as CMlEntry);
	declare Entry_MapObjectiveAuthor	<=> (Page.GetFirstChild("Entry_MapObjectiveAuthor") as CMlEntry);
	declare Label_MapObjectivesStatus	<=> (Page.GetFirstChild("Label_MapObjectivesStatus") as CMlLabel);
	declare Label_ButtonSaveScores		<=> (Page.GetFirstChild("Label_ButtonSaveScores") as CMlLabel);
	
	// ---------------------------------- //
	// Variables
	declare IsEditingObjectives	for Page = False;
	declare ObjectivesAreValid	for Page = False;
	declare PageObjectiveBronze	for Page = -1;
	declare PageObjectiveSilver	for Page = -1;
	declare PageObjectiveGold	for Page = -1;
	declare PageObjectiveAuthor	for Page = -1;
	declare UpdateObjectivesStatus = True;
	
	// Update
	declare PrevEntryValueBronze = "";
	declare PrevEntryValueSilver = "";
	declare PrevEntryValueGold = "";
	declare PrevEntryValueAuthor = "";
	
	// ---------------------------------- //
	// Initialize entries
	Entry_MapObjectiveBronze.Value = "{{{Map.ObjectiveTextBronze}}}";
	Entry_MapObjectiveSilver.Value = "{{{Map.ObjectiveTextSilver}}}";
	Entry_MapObjectiveGold.Value = "{{{Map.ObjectiveTextGold}}}";
	Entry_MapObjectiveAuthor.Value = "{{{Map.ObjectiveTextAuthor}}}";
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		
		// ---------------------------------- //
		// Manage events
		foreach (Event in PendingEvents) {
			// ---------------------------------- //
			// On mouse click
			if (Event.Type == CMlEvent::Type::MouseClick) {
				// ---------------------------------- //
				// Start editing the objectives
				if (Event.ControlId == "Quad_OpenEditObjectives") IsEditingObjectives = True;

				// ---------------------------------- //
				// Stop editing the objectives
				if (Event.ControlId == "Label_ButtonSaveScores" || Event.ControlId == "Label_ButtonStopEdit") IsEditingObjectives = False;
			}
		}

		// Update the frame visibility
		Frame_ObjectivesEditWindow.Visible = IsEditingObjectives;

		// Continue if the user is not editing the map objectives
		if (!IsEditingObjectives) continue;
		
		// ---------------------------------- //
		// Bronze objective value change
		if (PrevEntryValueBronze != Entry_MapObjectiveBronze.Value) {
			PrevEntryValueBronze != Entry_MapObjectiveBronze.Value;

			PageObjectiveBronze = TL::ToInteger(Entry_MapObjectiveBronze.Value);
			Entry_MapObjectiveBronze.Value = TL::ToText(PageObjectiveBronze);
			UpdateObjectivesStatus = True;
		}
		
		// ---------------------------------- //
		// Silver objective value change
		if (PrevEntryValueSilver != Entry_MapObjectiveSilver.Value) {
			PrevEntryValueSilver != Entry_MapObjectiveSilver.Value;

			PageObjectiveSilver = TL::ToInteger(Entry_MapObjectiveSilver.Value);
			Entry_MapObjectiveSilver.Value = TL::ToText(PageObjectiveSilver);
			UpdateObjectivesStatus = True;
		}
		
		// ---------------------------------- //
		// Gold objective value change
		if (PrevEntryValueGold != Entry_MapObjectiveGold.Value) {
			PrevEntryValueGold != Entry_MapObjectiveGold.Value;

			PageObjectiveGold = TL::ToInteger(Entry_MapObjectiveGold.Value);
			Entry_MapObjectiveGold.Value = TL::ToText(PageObjectiveGold);
			UpdateObjectivesStatus = True;
		}
		
		// ---------------------------------- //
		// Author objective value change
		if (PrevEntryValueAuthor != Entry_MapObjectiveAuthor.Value) {
			PrevEntryValueAuthor != Entry_MapObjectiveAuthor.Value;

			PageObjectiveAuthor = TL::ToInteger(Entry_MapObjectiveAuthor.Value);
			Entry_MapObjectiveAuthor.Value = TL::ToText(PageObjectiveAuthor);
			UpdateObjectivesStatus = True;
		}

		// ---------------------------------- //
		// Update map objectives status
		if (UpdateObjectivesStatus) {
			UpdateObjectivesStatus = False;

			// Reset validation status
			declare StatusMessage = _("Scores have been set correctly.");
			ObjectivesAreValid = True;

			// All scores have to be greater than 0 
			if (PageObjectiveBronze <= 0 || PageObjectiveSilver <= 0 || PageObjectiveGold <= 0 || PageObjectiveAuthor <= 0) {
				StatusMessage = _("All scores have to be greater than 0!");
				ObjectivesAreValid = False;
			}

			// Bronze score must be smaller than Silver, Gold and Author
			else if (PageObjectiveBronze > PageObjectiveSilver) {
				StatusMessage = _("Bronze score must be smaller than Silver, Gold and Author!");
				ObjectivesAreValid = False;
			}

			// Silver score must be greater than Bronze and smaller than Gold and Author
			else if (PageObjectiveSilver > PageObjectiveGold) {
				StatusMessage = _("Silver score must be greater than Bronze and smaller than Gold and Author!");
				ObjectivesAreValid = False;
			}

			// Gold score must be greater than Bronze and Silver and smaller than Author
			else if (PageObjectiveGold > PageObjectiveAuthor) {
				StatusMessage = _("Gold score must be greater than Bronze and Silver and smaller than Author!");
				ObjectivesAreValid = False;
			}

			// Update the objectives status
			Label_MapObjectivesStatus.Value = StatusMessage;
			Label_ButtonSaveScores.Visible = ObjectivesAreValid;
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	MapType::SetVersion(MapTypeVersion);
	EditAnchors::SetAvailableTags(Text[][Text]);
	UpdateValidability();

	// ---------------------------------- //
	// Objectives editing
	declare LayerObjectives = UILayerCreate();
	LayerObjectives.ManialinkPage = CreateManialinkEditObjectives();
	declare LOPage <=> LayerObjectives.LocalPage;

	// ---------------------------------- //
	// Objectives editing variables
	declare IsEditingObjectives	for LOPage = False;
	declare ObjectivesAreValid	for LOPage = False;
	declare PrevIsEditingObjectives = False;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {	
		yield;	
		
		// ---------------------------------- //
		// Events management
		foreach (Event in PendingEvents) {
			// ---------------------------------- //
			// On map modified
			if (Event.Type == CPluginEvent::Type::MapModified) UpdateValidability();

			// ---------------------------------- //
			// On validation
			else if (Event.Type == CPluginEvent::Type::StartValidation) TestMapWithMode("InvasionSolo.Script.txt");

			// ---------------------------------- //
			// Edit objectives
			else if (Event.Type == CPluginEvent::Type::EditObjectives) IsEditingObjectives = True;
		}

		// ---------------------------------- //
		// On objectives editing state change
		if (PrevIsEditingObjectives != IsEditingObjectives) {
			PrevIsEditingObjectives = IsEditingObjectives;

			// ---------------------------------- //
			// Save updated objectives in the map file
			if (!IsEditingObjectives) {
				// ---------------------------------- //
				// Save new objectives if valid
				if (ObjectivesAreValid) {
					declare Integer PageObjectiveBronze	for LOPage;
					declare Integer PageObjectiveSilver	for LOPage;
					declare Integer PageObjectiveGold	for LOPage;
					declare Integer PageObjectiveAuthor	for LOPage;

					Map.ObjectiveTextBronze	= TL::ToText(PageObjectiveBronze);
					Map.ObjectiveTextSilver	= TL::ToText(PageObjectiveSilver);
					Map.ObjectiveTextGold	= TL::ToText(PageObjectiveGold);
					Map.ObjectiveTextAuthor	= TL::ToText(PageObjectiveAuthor);
				}
				// ---------------------------------- //
				// Reset if target objectives are invalid
				else {
					Map.ObjectiveTextBronze	= "";
					Map.ObjectiveTextSilver	= "";
					Map.ObjectiveTextGold	= "";
					Map.ObjectiveTextAuthor	= "";
				}
			}
		}
	}	
}
