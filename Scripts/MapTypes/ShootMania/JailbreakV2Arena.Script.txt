// -------------------------------------- //
//  JAILBREAK V2 ARENA by domino54        //
//  script version: 2016-07-01            //
//  original concept by Akbalder          //
// -------------------------------------- //

#RequireContext CSmMapType

#Const Version			"2016-07-01"
#Const MapTypeVersion	1
#Const ScriptName		"JailbreakV2Arena.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
// Custom libraries
#Include "Libs/domino54/EditAnchors.Script.txt" as EditAnchors

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_Rules "$<%11.$> Place exactly one Spawn #1 and one Spawn #2, where players appear at the beginning of the round.\n$<%12.$> Place one JailSpawn #1 and one JailSpawn #2 in isolated rooms, where jailed players spawn after being eliminated.\n$<%13.$> Place one Goal #1 and one Goal #2 - teammates standing on them will make the Gates open and OffZone harmless.\n$<%14.$> Place the same number of Gate #1 and Gate #2 or use OffZone to build the jail doors.\n$<%15.$> Players $F00can't$g leave the jail other way than going through a Gate or the OffZone.\n$<%16.$> Gates $F00must$g be placed with their round capture plate at the outside of the jail - standing on it makes the player free."

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/// Initialize the anchors
Void InitAnchors() {
	foreach (Anchor in AnchorData) {
		if (Anchor.DefaultTag == "Spawn") {
			if (Anchor.Tag != "Spawn" && Anchor.Tag != "JailSpawn") Anchor.Tag = Anchor.DefaultTag;
			if (Anchor.Order != 1 && Anchor.Order != 2) Anchor.Order = 1;
		} else if (Anchor.DefaultTag == "Goal") {
			Anchor.Tag = Anchor.DefaultTag;
			if (Anchor.Order != 1 && Anchor.Order != 2) Anchor.Order = 1;
		} else if (Anchor.DefaultTag == "Checkpoint") {
			Anchor.Tag = "Goal";
			if (Anchor.Order != 1 && Anchor.Order != 2) Anchor.Order = 1;
		} else if (Anchor.DefaultTag == "Gate") {
			Anchor.Tag = "Gate";
			if (Anchor.Order != 1 && Anchor.Order != 2) Anchor.Order = 1;
		} else {
			Anchor.Tag = Anchor.DefaultTag;
			Anchor.Order = Anchor.DefaultOrder;
		}
	}
}

// ---------------------------------- //
/// Check if the map is valid
Void UpdateValidability() {
	ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	InitAnchors();
	Anchor::UpdateAnchorCounts();
	
	// ---------------------------------- //
	// Get the amount of Gates
	declare ClansNbGates = [1 => 0, 2 => 0];
	foreach (Data in AnchorData)	
		if (Data.Tag == "Gate" && ClansNbGates.existskey(Data.Order)) ClansNbGates[Data.Order] += 1;
	
	// ---------------------------------- //
	// Check if map has exactly one landmark type per team
	for (I, 1, 2) {
		if (
			!Anchor::HasExactlyOneAnchor("Spawn", I, TL::Compose(_("You must place exactly one Spawn #%1"), ""^I)) ||
			!Anchor::HasExactlyOneAnchor("JailSpawn", I, TL::Compose(_("You must place exactly one JailSpawn #%1"), ""^I)) ||
			!Anchor::HasExactlyOneAnchor("Goal", I, TL::Compose(_("You must place at least one Goal #%1"), ""^I))
		) return;
	}
	
	// ---------------------------------- //
	// Gates amount doesn't match
	if (ClansNbGates[1] != ClansNbGates[2]) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place the same number of Gate #1 and Gate #2");
		return;
	}
	
	// Map is valid
	ValidationStatus = CSmMapType::ValidationStatus::Validated;	
}


// ---------------------------------- //
/// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	if (_EditedAnchorDataId == NullId) return;
	UpdateValidability();
	EditAnchors::EditAnchor(_EditedAnchorDataId);
	UpdateValidability();
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	MapType::SetVersion(MapTypeVersion);
	UpdateValidability();
	CustomEditAnchorData = True;
	
	EditAnchors::SetRulesText(TL::Compose(C_Rules, "$o$070"));
	EditAnchors::SetAvailableTags([
		"Spawn" => ["Spawn #1", "Spawn #2", "JailSpawn #1", "JailSpawn #2"],
		"Goal" => ["Goal #1", "Goal #2"],
		"Gate" => ["Gate #1", "Gate #2"],
		"Checkpoint" => ["Goal #1", "Goal #2"]
	]);
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		
		// ---------------------------------- //
		// Events management
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified	: UpdateValidability();			
				case CPluginEvent::Type::EditAnchor		: EditAnchorData(Event.EditedAnchorDataId);
			}
		}
	}
}