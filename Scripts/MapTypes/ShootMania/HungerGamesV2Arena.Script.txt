// -------------------------------------- //
//  HUNGER GAMES V2 ARENA by domino54     //
//  script version: 2016-12-05            //
// -------------------------------------- //

#RequireContext CSmMapType

#Const Version			"2016-12-05"
#Const MapTypeVersion	1
#Const ScriptName		"HungerGamesV2Arena.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
#Include "Libs/domino54/EditAnchors.Script.txt" as EditAnchors

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_Rules "$<%11.$> Place exactly one Goal.\n$<%12.$> Place at least one Spawn around the Goal (recommended: 8 - 12).\n$<%13.$> Place 8 Checkpoints, where players can respawn.\n$<%14.$> Place enough items to fill up counters in top left corner.\n$<%15.$> Place up to 14 BotPaths where Toads will be spawned."

#Const C_RequiredNbCheckpoints	8	///< Required Checkpoints amount on map

/// Maximum amount of every object
#Const C_MaxObjectsCount ["Weapon" => 12, "Charge" => 36, "Mini" => 24, "Replie" => 24, "Armor" => 36, "Fuel" => 12]

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/// Initialize the anchors
Void InitAnchors() {
	foreach (Anchor in AnchorData) {
		Anchor.Tag = Anchor.DefaultTag;
		Anchor.Order = Anchor.DefaultOrder;
	}
}

// ---------------------------------- //
/// Check if the map is valid
Void UpdateValidability() {
	ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	InitAnchors();
	Anchor::UpdateAnchorCounts();
	
	// ---------------------------------- //
	// Podium block is forbidden
	foreach (Block in Blocks) {
		if (!TL::Find("Podium", Block.BlockModel.Name, False, False)) continue;
		Anchor::Private_SetAsNotValid(_("You cannot place a podium block!"));
		return;
	}
	
	// ---------------------------------- //
	// Check if the map has Goal and Spawns
	if (!Anchor::HasExactlyOneAnchor("Goal", 0, _("You must place exactly one Goal."))) return;
	if (!Anchor::HasAtLeastOneAnchor("Spawn", 0, _("You must place at least one Spawn"))) return;
	if (!Anchor::HasExactlyXAnchor("Checkpoint", 0, C_RequiredNbCheckpoints, TL::Compose(_("You must place exactly %1 Checkpoints"), TL::ToText(C_RequiredNbCheckpoints)))) return;
	
	foreach (Tag => MaxAmount in C_MaxObjectsCount) {
		if (Anchor::GetCount(Tag) <= MaxAmount) continue;
		Anchor::Private_SetAsNotValid(TL::Compose(_("You cannot place more than %1 %2!"), TL::ToText(MaxAmount), Tag^"s"));
		return;
	}
	
	// Map is valid
	ValidationStatus = CSmMapType::ValidationStatus::Validated;	
}

// ---------------------------------- //
/// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	if (_EditedAnchorDataId == NullId) return;
	UpdateValidability();
	EditAnchors::EditAnchor(_EditedAnchorDataId);
	UpdateValidability();
}

// ---------------------------------- //
/** Get amount of every anchor
 *
 *	@return		Array of anchors amount
 */
Integer[Text] GetAnchorsAmount() {
	declare Integer[Text] AnchorsAmount;
	foreach (Anchor in AnchorData) {
		if (!AnchorsAmount.existskey(Anchor.Tag)) AnchorsAmount[Anchor.Tag] = 0;
		AnchorsAmount[Anchor.Tag] += 1;
	}
	return AnchorsAmount;
}

// ---------------------------------- //
/** Create manialin kfor the objects counter module
 *
 *	@return		The objects counter module
 */
Text CreateManialinkObjectsCounter() {
	return """
<manialink version="2" name="HungerGamesV2Arena:ObjectsCounter">
<stylesheet>
	<style class="font" valign="center2" style="TextValueSmallSm" scale=".5" textcolor="FFF"/>
</stylesheet>

<frame id="Frame_ObjectsCounter" posn="-160 78 -10" hidden="1">
	<quad sizen="44 31" style="Bgs1InRace" substyle="BgWindow2"/>
	
	<framemodel id="FrameModel_CounterItem">
		<gauge posn="-1 -1.5" valign="center" sizen="46 8" drawbg="0" id="Gauge_ItemProgress"/>
		<label posn="1 -4" class="font" textprefix="$t" id="Label_ItemName"/>
		<label posn="43 -4" class="font" halign="right" id="Label_ItemCount"/>
	</framemodel>
	
	<frame posn="0 0 1">
		<frameinstance modelid="FrameModel_CounterItem" id="Frame_CounterItem#0" posn="0 0"/>
		<frameinstance modelid="FrameModel_CounterItem" id="Frame_CounterItem#1" posn="0 -5"/>
		<frameinstance modelid="FrameModel_CounterItem" id="Frame_CounterItem#2" posn="0 -10"/>
		<frameinstance modelid="FrameModel_CounterItem" id="Frame_CounterItem#3" posn="0 -15"/>
		<frameinstance modelid="FrameModel_CounterItem" id="Frame_CounterItem#4" posn="0 -20"/>
		<frameinstance modelid="FrameModel_CounterItem" id="Frame_CounterItem#5" posn="0 -25"/>
	</frame>
</frame>

<script><!--
/**
 *	HungerGamesV2Arena: ObjectsCounter
 */

#Include "MathLib" as ML

#Const C_CountersNames	["Weapon", "Charge", "Mini", "Replie", "Armor", "Fuel"]
#Const C_CountersColors	[<.5, 0., 1.>, <1., 1., 0.>, <1., 0., 0.>, <1., 0., 1.>, <0., 1., .5>, <0., 1., 1.>]

// ---------------------------------- //
/** Change color brightness
 *
 *	@param	_Color			Input color
 *	@param	_Brightness		Target brightness
 *
 *	@return		New color
 */
Vec3 Brightness(Vec3 _Color, Real _Brightness) {
	if (_Brightness == 1) return _Color;
	if (_Brightness <= 0) return Vec3;
	
	declare Vec3 OutputColor;
	if (_Brightness < 1) for (I, 0, 2) OutputColor[I] = _Color[I] * _Brightness;
	else if (_Brightness > 1) for (I, 0, 2) OutputColor[I] = 1 - (1 / _Brightness) + _Color[I] * (1 / _Brightness);
	return OutputColor;
}

// ---------------------------------- //
/** Set gauge ratio with value cut fix
 *
 *	@param	_Gauge		The gauge to set ratio
 *	@param	_Ratio		Ratio to set
 */
Void SetGaugeRatio(CMlGauge _Gauge, Real _Ratio) {
	if (_Gauge == Null) return;
	if (_Ratio <= 0.) { _Gauge.Ratio = 0.; return; }
	if (_Ratio >= 1.) { _Gauge.Ratio = 1.; return; }
	declare GaugeCutOff = 4 / _Gauge.Size.X;
	_Gauge.Ratio = _Ratio * (1 - GaugeCutOff) + GaugeCutOff;
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_ObjectsCounter <=> (Page.GetFirstChild("Frame_ObjectsCounter") as CMlFrame);
	declare CMlFrame[] Frame_CounterItems;
	for (I, 0, 5) Frame_CounterItems.add((Page.GetFirstChild("Frame_CounterItem#"^I) as CMlFrame));
	
	// ---------------------------------- //
	// Variables
	declare Integer[Text] ObjectsAmount for Page;
	declare Integer[Text] ObjectsNbMax for Page;
	declare Integer AmountUpdate for Page;
	
	// Update
	declare PrevAmountUpdate = -1;
	
	// ---------------------------------- //
	// Preconfigure all items counters
	foreach (I => Frame in Frame_CounterItems) {
		declare Gauge_ItemProgress <=> (Frame.GetFirstChild("Gauge_ItemProgress") as CMlGauge);
		declare Label_ItemName <=> (Frame.GetFirstChild("Label_ItemName") as CMlLabel);
		declare Label_ItemCount <=> (Frame.GetFirstChild("Label_ItemCount") as CMlLabel);
		
		// Set item name
		Label_ItemName.SetText(C_CountersNames[I]);
		
		// Set item color
		declare Color = C_CountersColors[I];
		Gauge_ItemProgress.Color = Color;
		Label_ItemName.TextColor = Brightness(Color, 2.);
		Label_ItemCount.TextColor = Label_ItemName.TextColor;
	}
	
	// Show widget after successful loading
	Frame_ObjectsCounter.Show();
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		wait(PrevAmountUpdate != AmountUpdate);
		PrevAmountUpdate = AmountUpdate;
		
		// ---------------------------------- //
		// Update counters
		foreach (I => Frame in Frame_CounterItems) {
			declare Gauge_ItemProgress <=> (Frame.GetFirstChild("Gauge_ItemProgress") as CMlGauge);
			declare Label_ItemCount <=> (Frame.GetFirstChild("Label_ItemCount") as CMlLabel);
			
			// ---------------------------------- //
			// Get object information
			declare ObjectTag = C_CountersNames[I];
			declare ObjectCount = 0;
			declare ObjectNbMax = 0;
			if (ObjectsAmount.existskey(ObjectTag)) ObjectCount = ObjectsAmount[ObjectTag];
			if (ObjectsNbMax.existskey(ObjectTag)) ObjectNbMax = ObjectsNbMax[ObjectTag];
			
			// Set gauge ratio
			declare Ratio = 0.;
			if (ObjectNbMax > 0) Ratio = ML::ToReal(ObjectCount) / ObjectNbMax;
			SetGaugeRatio(Gauge_ItemProgress, Ratio);
			
			// Show amount
			Label_ItemCount.SetText(ObjectCount^" / "^ObjectNbMax);
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	MapType::SetVersion(MapTypeVersion);
	UpdateValidability();
	CustomEditAnchorData = True;
	
	EditAnchors::SetRulesText(TL::Compose(C_Rules, "$o$070"));
	EditAnchors::SetAvailableTags(Text[][Text]);
	
	// ---------------------------------- //
	// Create layer for editing dunk locations
	declare LayerObjectsCounter = UILayerCreate();
	LayerObjectsCounter.ManialinkPage = CreateManialinkObjectsCounter();
	declare ObjectsCounterPage <=> LayerObjectsCounter.LocalPage;
	
	// ---------------------------------- //
	// Variables
	declare ObjectsAmount for ObjectsCounterPage = GetAnchorsAmount();
	declare ObjectsNbMax for ObjectsCounterPage = C_MaxObjectsCount;
	declare AmountUpdate for ObjectsCounterPage = Now;
	
	yield;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		
		// ---------------------------------- //
		// Events management
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified : {
					UpdateValidability();
					ObjectsAmount = GetAnchorsAmount();
					AmountUpdate = Now;
				}		
				case CPluginEvent::Type::EditAnchor : EditAnchorData(Event.EditedAnchorDataId);
			}
		}
	}
}