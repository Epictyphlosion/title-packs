// -------------------------------------- //
//  JAILBREAK V2 ARENA by domino54        //
//  script version: 2017-05-07            //
// -------------------------------------- //

#RequireContext CSmMapType

#Const Version			"2017-05-07"
#Const MapTypeVersion	1
#Const ScriptName		"PayloadArena.Script.txt"

#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
// Custom libraries
#Include "Libs/domino54/EditAnchors.Script.txt" as EditAnchors

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_PayloadArena_MaxNbSectors	9	///< Maximum number of sectors the player can split the map to

#Const C_PayloadArena_Rules "$<%11.$> Your map must be split into Sectors in number of between 1 and 9.\n$<%12.$> Each Sector must consist of exactly one SpawnAtk, SpawnDef and Checkpoint.\n$<%13.$> First Sector's SpawnAtk must be in a separate room with at least one Gate being the only way out.\n$<%14.$> Draw a BotPath named Payload, which will define the Payload route. Keep in mind that Payload moves in a straight line between points in the BotPath, so the actual route will be different than line shown in editor. Put a point at start and end of every slope to avoid Payload clipping into ground or flying in air.\n$<%15.$> Gates separating next Sectors can be placed, but are not required."

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/// Update the map's validation status
Void UpdateValidability() {
	foreach (Anchor in AnchorData) {
		Anchor.Order = ML::Clamp(Anchor.Order, 1, C_PayloadArena_MaxNbSectors);
		
		if (Anchor.DefaultTag == "Spawn") {
			if (Anchor.Tag != "SpawnAtk" && Anchor.Tag != "SpawnDef") Anchor.Tag = "SpawnAtk";
		}
		else if (Anchor.DefaultTag == "BotPath") {
			if (Anchor.Tag != "BotPath" && Anchor.Tag != "Payload") Anchor.Tag = Anchor.DefaultTag;
		}
		else if (Anchor.DefaultTag == "Goal") Anchor.Tag = "Checkpoint";
		
		else Anchor.Tag = Anchor.DefaultTag;	
	}
	
	// ---------------------------------- //
	// Compute total amount of anchors on the map
	declare MaxOrder = 1;
	declare Integer[] AvailableOrders;
	
	declare Integer[Integer] NbSpawnsAtk;
	declare Integer[Integer] NbSpawnsDef;
	declare Integer[Integer] NbCheckpoints;
	
	foreach (Anchor in AnchorData) {
		// ---------------------------------- //
		// Get Ids of sectors the player has created
		if (!AvailableOrders.exists(Anchor.Order)) {
			AvailableOrders.add(Anchor.Order);
			AvailableOrders.sort();
		}
		
		// Update the highest sector order on the map
		if (Anchor.Order > MaxOrder) MaxOrder = Anchor.Order;
		
		// ---------------------------------- //
		// Get amount of SpawnAtk for every sector
		if (Anchor.Tag == "SpawnAtk") {
			if (!NbSpawnsAtk.existskey(Anchor.Order)) NbSpawnsAtk[Anchor.Order] = 0;
			NbSpawnsAtk[Anchor.Order] += 0;
		}
		
		// ---------------------------------- //
		// Get amount of SpawnDef for every sector
		if (Anchor.Tag == "SpawnDef") {
			if (!NbSpawnsDef.existskey(Anchor.Order)) NbSpawnsDef[Anchor.Order] = 0;
			NbSpawnsDef[Anchor.Order] += 0;
		}
		
		// ---------------------------------- //
		// Get amount of Checkpoints for every sector
		if (Anchor.Tag == "Checkpoint") {
			if (!NbCheckpoints.existskey(Anchor.Order)) NbCheckpoints[Anchor.Order] = 0;
			NbCheckpoints[Anchor.Order] += 0;
		}
	}
	
	// ---------------------------------- //
	// Player exceeded the maximum accepted number of sectors
	if (MaxOrder > C_PayloadArena_MaxNbSectors) {
		ValidationStatus = CMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = TL::Compose(_("You can split your map only up to %1 sectors!"), "9");
		return;
	}
	
	// ---------------------------------- //
	// Player missed at least one sector in the chain
	declare Text[] MissedSectors;
	for (I, 1, MaxOrder) if (!AvailableOrders.exists(I)) MissedSectors.add(TL::ToText(I));
	
	if (MissedSectors.count > 0) {
		ValidationStatus = CMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = TL::Compose(_("Your map is missing following sectors: %1."), TL::Join(", ", MissedSectors));
		return;
	}
	
	// Update amount of anchors in lib for later check
	Anchor::UpdateAnchorCounts();
	
	// ---------------------------------- //
	// Check if every sector has exactly one SpawnAtk, SpawnDef and Checkpoint
	for (I, 1, MaxOrder) {
		if (!Anchor::HasExactlyOneAnchor("SpawnAtk", I, TL::Compose(_("You must place exactly one SpawnAtk #1!"), TL::ToText(I)))) return;
		if (!Anchor::HasExactlyOneAnchor("SpawnDef", I, TL::Compose(_("You must place exactly one SpawnDef #1!"), TL::ToText(I)))) return;
		if (!Anchor::HasExactlyOneAnchor("Checkpoint", I, TL::Compose(_("You must place exactly one Checkpoint #1!"), TL::ToText(I)))) return;
	}
	
	// ---------------------------------- //
	// Map must have exactly one Payload BotPath
	
	// Ommited: BotPaths don't have an anchor, yet
	// if (!Anchor::HasAtLeastOneAnchor("Payload", 0, _("You must draw the Payload path!"))) return;
	
	// ---------------------------------- //
	// Map must have at least one jail Gate in the first sector
	if (!Anchor::HasAtLeastOneAnchor("Gate", 1, _("You must place at least one Gate #1"))) return;
	
	// ---------------------------------- //
	// Force player to place exactly one podium
	declare NbPodiums = 0;
	foreach (Block in Blocks) if (Block.BlockModel.Name == "Podium") NbPodiums += 1;
	
	if (NbPodiums != 1) {
		ValidationStatus = CMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly one Podium!");
		return;
	}
}

// ---------------------------------- //
/// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	if (_EditedAnchorDataId == NullId) return;
	UpdateValidability();
	EditAnchors::EditAnchor(_EditedAnchorDataId);
	UpdateValidability();
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	MapType::SetVersion(MapTypeVersion);
	UpdateValidability();
	CustomEditAnchorData = True;
	
	declare CpList = ["Checkpoint #1", "Checkpoint #2", "Checkpoint #3", "Checkpoint #4", "Checkpoint #5", "Checkpoint #6", "Checkpoint #7", "Checkpoint #8", "Checkpoint #9"];
	
	EditAnchors::SetRulesText(TL::Compose(C_PayloadArena_Rules, "$o$070"));
	EditAnchors::SetAvailableTags([
		"Spawn" => ["SpawnAtk #1", "SpawnAtk #2", "SpawnAtk #3", "SpawnAtk #4", "SpawnAtk #5", "SpawnAtk #6", "SpawnAtk #7", "SpawnAtk #8", "SpawnAtk #9", "SpawnDef #1", "SpawnDef #2", "SpawnDef #3", "SpawnDef #4", "SpawnDef #5", "SpawnDef #6", "SpawnDef #7", "SpawnDef #8", "SpawnDef #9"],
		"Goal" => CpList,
		"Checkpoint" => CpList,
		"Gate" => ["Gate #1", "Gate #2", "Gate #3", "Gate #4", "Gate #5", "Gate #6", "Gate #7", "Gate #8", "Gate #9"],
		"Laser" => ["Laser #1", "Laser #2", "Laser #3", "Laser #4", "Laser #5", "Laser #6", "Laser #7", "Laser #8", "Laser #9"],
		"Nucleus" => ["Nucleus #1", "Nucleus #2", "Nucleus #3", "Nucleus #4", "Nucleus #5", "Nucleus #6", "Nucleus #7", "Nucleus #8", "Nucleus #9"],
		"Arrow" => ["Arrow #1", "Arrow #2", "Arrow #3", "Arrow #4", "Arrow #5", "Arrow #6", "Arrow #7", "Arrow #8", "Arrow #9"],
		"Rocket" => ["Rocket #1", "Rocket #2", "Rocket #3", "Rocket #4", "Rocket #5", "Rocket #6", "Rocket #7", "Rocket #8", "Rocket #9"],
		"Fuel" => ["Fuel #1", "Fuel #2", "Fuel #3", "Fuel #4", "Fuel #5", "Fuel #6", "Fuel #7", "Fuel #8", "Fuel #9"],
		"Replie" => ["Replie #1", "Replie #2", "Replie #3", "Replie #4", "Replie #5", "Replie #6", "Replie #7", "Replie #8", "Replie #9"],
		"Armor" => ["Armor #1", "Armor #2", "Armor #3", "Armor #4", "Armor #5", "Armor #6", "Armor #7", "Armor #8", "Armor #9"]
	]);
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {	
		yield;
		
		// ---------------------------------- //
		// Events management
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified	: UpdateValidability();			
				case CPluginEvent::Type::EditAnchor		: EditAnchorData(Event.EditedAnchorDataId);
			}
		}
	}	
}
