// -------------------------------------- //
//  TEAM MELEE ARENA by domino54          //
//  script version: 2016-07-01            //
// -------------------------------------- //

#RequireContext CSmMapType

#Const Version			"2016-07-01"
#Const MapTypeVersion	1
#Const ScriptName		"TeamMeleeArena.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType
// Custom libraries
#Include "Libs/domino54/EditAnchors.Script.txt" as EditAnchors

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_Rules "$<%11.$> Place at least one Spawn #1 and one Spawn #2.\n$<%12.$> Number of spawns must remain the same for both sides."

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/// Initialize the anchors
Void InitAnchors() {
	foreach (Anchor in AnchorData) {
		if (Anchor.DefaultTag == "Spawn") {
			if (Anchor.Tag != "Spawn") Anchor.Tag = Anchor.DefaultTag;
			if (Anchor.Order != 1 && Anchor.Order != 2) Anchor.Order = 1;
		} else {
			Anchor.Tag = Anchor.DefaultTag;
			Anchor.Order = Anchor.DefaultOrder;
		}
	}
}

// ---------------------------------- //
/// Check if the map is valid
Void UpdateValidability() {
	ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
	InitAnchors();
	Anchor::UpdateAnchorCounts();
	
	// ---------------------------------- //
	// Get the amount of Gates
	declare ClansNbSpawns = [1 => 0, 2 => 0];
	foreach (Data in AnchorData)	
		if (Data.Tag == "Spawn" && ClansNbSpawns.existskey(Data.Order)) ClansNbSpawns[Data.Order] += 1;
	
	// ---------------------------------- //
	// Check if map has at least one Spawn per team
	for (I, 1, 2) {
		if (!Anchor::HasAtLeastOneAnchor("Spawn", I, TL::Compose(_("You must place at least one Spawn #%1"), ""^I))) return;
	}
	
	// ---------------------------------- //
	// Gates amount doesn't match
	if (ClansNbSpawns[1] != ClansNbSpawns[2]) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place the same number of Spawn #1 and Spawn #2");
		return;
	}
	
	// Map is valid
	ValidationStatus = CSmMapType::ValidationStatus::Validated;	
}


// ---------------------------------- //
/// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {
	if (_EditedAnchorDataId == NullId) return;
	UpdateValidability();
	EditAnchors::EditAnchor(_EditedAnchorDataId);
	UpdateValidability();
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	MapType::SetVersion(MapTypeVersion);
	UpdateValidability();
	CustomEditAnchorData = True;
	
	EditAnchors::SetRulesText(TL::Compose(C_Rules, "$o$070"));
	EditAnchors::SetAvailableTags(["Spawn" => ["Spawn #1", "Spawn #2"]]);
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		
		// ---------------------------------- //
		// Events management
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CPluginEvent::Type::MapModified	: UpdateValidability();			
				case CPluginEvent::Type::EditAnchor		: EditAnchorData(Event.EditedAnchorDataId);
			}
		}
	}
}