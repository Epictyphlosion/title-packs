// --------------------------------------- //
//  LIBRARY MENU TABS MANAGER by domino54  //
//  script version: 2017-07-11             //
// --------------------------------------- //

/**
 *	Exclusive for GalaxyTitles.
 *
 *	This library creates a menu with which the user can
 *	switch across different menu tabs. Tabs are listed
 *	in order of creation.
 */

#Include "MathLib" as ML
#Include "Libs/domino54/ManialinkEffects.Script.txt" as Effects
#Include "Libs/domino54/ManialinkTools.Script.txt" as Tools

#Const Version		"2017-07-11"
#Const ScriptName	"Libs/domino54/GalaxyTitles/MenuTabsMgr.Script.txt"

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare CUILayer G_LibMenuTabsMgr_TabsMenuLayer;
declare Text[] G_LibMenuTabsMgr_AvailableTabs;

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// "Private"
// ---------------------------------- //

// ---------------------------------- //
/** Create manialink for the tabs manager.
 *
 *	@return		The tabs manager manialink.
 */
Text Private_CreateLayerMenuTabs() {
	declare TabsFrames = "";
	for (I, 0, G_LibMenuTabsMgr_AvailableTabs.count)
		TabsFrames ^= "<frameinstance modelid='FrameModel_MenuTabButton' id='Frame_MenuTabButton#"^I^"' />";

	return """
<manialink version="3" name="MenuTabsMgr">
<stylesheet>
	<style class="Font" valign="center2" textsize="2" textcolor="FFF" textfont="Eurostile" />
	<style class="FontB" valign="center2" textsize="2" textcolor="FFF" textfont="Eurostile_Bold" />
</stylesheet>

<frame id="Frame_MenuTabsContainer" pos="0 79">
	<frame pos="-156 5">
		<quad pos="4 -5" size="7 7" halign="center" valign="center" colorize="AAA" image="./MenuIconQuit.png" />
		<quad size="8 10" class="Color Hover" id="Quad_QuitTitleButton" opacity="0" ScriptEvents="1" />
	</frame>
	<quad pos="-147" size="30 6" valign="center" image="./MenuLogo.png" />

	<quad size="6 6" halign="right" valign="center" class="PadButton LB" id="Quad_ScrollButtonLeft" />
	<frame id="Frame_MenuTabsOffset">
		<gauge pos="0 -4.25" size="0 7" valign="center" drawbg="0" ratio="1" class="Color" id="Gauge_ActiveTabLight" />
		<framemodel id="FrameModel_MenuTabButton">
			<label pos="2.5" class="Font" textprefix="$t" id="Label_MenuTabText" />
			{{{Effects::InsertRipple()}}}
			<quad size="0 10" class="Color Hover Ripple" valign="center" id="Quad_MenuTabCard" ScriptEvents="1" opacity="0" />
		</framemodel>
		{{{TabsFrames}}}
	</frame>
	<quad size="6 6" halign="left" valign="center" class="PadButton RB" id="Quad_ScrollButtonRight" />

	<frame pos="158">
		<frame id="Frame_PlayerInformation" pos="-10" hidden="1">
			<label pos="0 2.5" class="Font" halign="right" textsize="1.5" text="{{{LocalUser.Name}}}" id="Label_PlayerNickname" />
			<gauge pos="-38 -3.25" size="40 7" valign="center" drawbg="0" id="Gauge_PlayerEchelonProgress" />
			
			<frame id="Frame_PlayerInformationMiddleLine" pos="-6 -.75">
				<label pos="-.5" halign="right" textsize="1" textcolor="B7AF6F" class="B" id="Label_PlayerLadderPoints" text="10000" />
				<quad size="6 6" valign="center2" style="Icons128x128_1" substyle="LadderPoints" />

			</frame>
		</frame>

		<frame id="Frame_PlayerMultiRanking" pos="-44">
			<frame id="Frame_PlayerLadderRank" pos="22 2.25">
				<quad size="3.5 3.5" valign="center" id="Quad_PlayerRankZoneIcon" />
				<label size="36" class="FontB" textsize=".75" textprefix="$t" id="Label_PlayerRankValue" />
			</frame>
			<gauge pos="0 0" size="44 7" valign="center" drawbg="0" id="Gauge_PlayerLPProgress" />
			<frame id="Frame_LadderPointsValue" pos="22 -2.25">
				<label class="FontB" textsize=".75" textcolor="B7AF6F" id="Label_LadderPointsValue1" />
				<quad size="6 6" valign="center" style="Icons128x128_1" substyle="LadderPoints" id="Quad_LadderPointsIcon1" />
				<label class="FontB" textsize=".75" textcolor="B7AF6F" id="Label_LadderPointsValue2" />
				<quad size="6 6" valign="center" style="Icons128x128_1" substyle="LadderPoints" id="Quad_LadderPointsIcon2" />
			</frame>
		</frame>

		<frame id="Frame_PlayerEchelonBadge" pos="-5.5" hidden="1">
			<label pos="0 -.5" size="6" halign="center" textemboss="1" textsize="4" class="FontB" id="Label_PlayerEchelonNumber" text="6" />
			<quad halign="center" valign="center" size="6.5 8" id="Quad_PlayerEchelonImage" image="file://Media/Manialinks/Common/Echelons/echelon6.dds" />
		</frame>
	</frame>
	
	<quad size="316 10" halign="center" valign="center" bgcolor="000" opacity=".625" />
	<quad size="316 10" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0" />
	<quad size="642 30" halign="center" valign="center" scale=".5" style="Bgs1InRace" substyle="BgButtonShadow" />
</frame>

<script><!--
/**
 *	Menu tabs manager
 */

#Include "AnimLib" as AL
#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_LibMenuTabsMgr_AvailableTabs {{{dump(G_LibMenuTabsMgr_AvailableTabs)}}}

{{{Effects::InsertFunctions()}}}
{{{Tools::Functions(["ComputeWidth", "SetGaugeRatio", "GetEchelonImage"])}}}

// ---------------------------------- //
/** Get the color of the echelon progress bar
 *
 *	@param	_Echelon	Level of the echelon to get color
 *
 *	@return		Echelon color
 */
Vec3 GetEchelonColor(Integer _Echelon) {
	if (_Echelon <= 0) return <1., 1., 1.>;
	else if (_Echelon <= 3) return <1., .375, 0.>;
	else if (_Echelon <= 6) return <1., 1., 1.>;
	return  <1., .875, 0.>;
}

main() {
	// ---------------------------------- //
	// Load interface elements
	declare Frame_MenuTabsOffset <=> (Page.GetFirstChild("Frame_MenuTabsOffset") as CMlFrame);
	declare Gauge_ActiveTabLight <=> (Page.GetFirstChild("Gauge_ActiveTabLight") as CMlGauge);
	declare Quad_ScrollButtonLeft <=> (Page.GetFirstChild("Quad_ScrollButtonLeft") as CMlQuad);
	declare Quad_ScrollButtonRight <=> (Page.GetFirstChild("Quad_ScrollButtonRight") as CMlQuad);

	// Player multiplayer ranking
	declare Frame_PlayerMultiRanking <=> (Page.GetFirstChild("Frame_PlayerMultiRanking") as CMlFrame);
	declare Gauge_PlayerLPProgress <=> (Page.GetFirstChild("Gauge_PlayerLPProgress") as CMlGauge);
	declare Frame_PlayerEchelonBadge <=> (Page.GetFirstChild("Frame_PlayerEchelonBadge") as CMlFrame);
	declare Label_PlayerEchelonNumber <=> (Page.GetFirstChild("Label_PlayerEchelonNumber") as CMlLabel);
	declare Quad_PlayerEchelonImage <=> (Page.GetFirstChild("Quad_PlayerEchelonImage") as CMlQuad);

	// Ladder points
	declare Frame_LadderPointsValue <=> (Page.GetFirstChild("Frame_LadderPointsValue") as CMlFrame);
	declare Label_LadderPointsValue1 <=> (Page.GetFirstChild("Label_LadderPointsValue1") as CMlLabel);
	declare Label_LadderPointsValue2 <=> (Page.GetFirstChild("Label_LadderPointsValue2") as CMlLabel);
	declare Quad_LadderPointsIcon1 <=> (Page.GetFirstChild("Quad_LadderPointsIcon1") as CMlQuad);
	declare Quad_LadderPointsIcon2 <=> (Page.GetFirstChild("Quad_LadderPointsIcon2") as CMlQuad);

	// Ladder rank
	declare Frame_PlayerLadderRank <=> (Page.GetFirstChild("Frame_PlayerLadderRank") as CMlFrame);
	declare Label_PlayerRankValue <=> (Page.GetFirstChild("Label_PlayerRankValue") as CMlLabel);
	declare Quad_PlayerRankZoneIcon <=> (Page.GetFirstChild("Quad_PlayerRankZoneIcon") as CMlQuad);

	declare CMlFrame[] Frame_MenuTabButtons;
	declare CMlLabel[] Label_ColorizableLabels;

	for (I, 0, C_LibMenuTabsMgr_AvailableTabs.count - 1)
		Frame_MenuTabButtons.add((Page.GetFirstChild("Frame_MenuTabButton#"^I) as CMlFrame));

	// ---------------------------------- //
	// Persistent settings
	declare persistent Persistent_LibMenuTabsMgr_CurrentMenuTab for LocalUser = 0;
	if (Persistent_LibMenuTabsMgr_CurrentMenuTab >= Frame_MenuTabButtons.count)
		Persistent_LibMenuTabsMgr_CurrentMenuTab = 0;

	// ---------------------------------- //
	// Variables
	declare SelectedMenuTab for Page = 0.;
	declare ButtonsWidth = Real[];
	declare ButtonsTotalWidth = 0.;

	declare AnimStartTime = -1;
	declare AnimBaseValue = 0.;
	declare AnimTargetValue = 0.;

	/// Update
	declare PrevSelectedMenuTab = -1.;
	declare PrevLocalUserLadderPoints = -1.;

	/// Initialize the page
	SelectedMenuTab = ML::ToReal(Persistent_LibMenuTabsMgr_CurrentMenuTab);
	EnableMenuNavigation(True, False, Null, 0);

	// ---------------------------------- //
	// Configure the menu tabs
	foreach (I => Frame in Frame_MenuTabButtons) {
		Frame.RelativePosition_V3.X = ButtonsTotalWidth;

		declare Label_MenuTabText <=> (Frame.GetFirstChild("Label_MenuTabText") as CMlLabel);
		Label_MenuTabText.Value = TL::GetTranslatedText(C_LibMenuTabsMgr_AvailableTabs[I]);
		Label_ColorizableLabels.add(Label_MenuTabText);

		declare Quad_MenuTabCard <=> (Frame.GetFirstChild("Quad_MenuTabCard") as CMlQuad);
		Quad_MenuTabCard.Size.X = ComputeWidth(Label_MenuTabText) + Label_MenuTabText.RelativePosition_V3.X * 2;
		
		ButtonsWidth.add(Quad_MenuTabCard.Size.X);
		ButtonsTotalWidth += Quad_MenuTabCard.Size.X;
	}
	Frame_MenuTabsOffset.RelativePosition_V3.X = ButtonsTotalWidth / -2.;
	Quad_ScrollButtonLeft.RelativePosition_V3.X = Frame_MenuTabsOffset.RelativePosition_V3.X - 1;
	Quad_ScrollButtonRight.RelativePosition_V3.X = Quad_ScrollButtonLeft.RelativePosition_V3.X + ButtonsTotalWidth + 2;

	while (True) {
		yield;
		if (!PageIsVisible) continue;
		Effects_Loop();

		// ---------------------------------- //
		// Manage events
		foreach (Event in PendingEvents) {
			// ---------------------------------- //
			// On mouse click
			if (Event.Type == CMlEvent::Type::MouseClick) {
				// ---------------------------------- //
				// Change active menu tab
				if (Event.ControlId == "Quad_MenuTabCard") {
					declare TabID = Frame_MenuTabButtons.keyof(Event.Control.Parent);
					Persistent_LibMenuTabsMgr_CurrentMenuTab = TabID;

					AnimStartTime = Now;
					AnimBaseValue = SelectedMenuTab;
					AnimTargetValue = ML::ToReal(Persistent_LibMenuTabsMgr_CurrentMenuTab);
				}
				// ---------------------------------- //
				// Quit title button
				else if (Event.ControlId == "Quad_QuitTitleButton") {
					SendCustomEvent("QuitTitle", Text[]);
				}
			}
		}

		// ---------------------------------- //
		// Input manager events
		foreach (Event in Input.PendingEvents) {
			// ---------------------------------- //
			// On key press
			if (Event.Type == CInputEvent::EType::PadButtonPress) {
				switch (Event.Button) {
					// ---------------------------------- //
					// Slide to the left tab
					case CInputEvent::EButton::L1 : if (Persistent_LibMenuTabsMgr_CurrentMenuTab > 0) {
						Persistent_LibMenuTabsMgr_CurrentMenuTab -= 1;
						AnimStartTime = Now;
						AnimBaseValue = SelectedMenuTab;
						AnimTargetValue = ML::ToReal(Persistent_LibMenuTabsMgr_CurrentMenuTab);
					}
					// ---------------------------------- //
					// Slide to the right tab
					case CInputEvent::EButton::R1 : if (Persistent_LibMenuTabsMgr_CurrentMenuTab < Frame_MenuTabButtons.count - 1) {
						Persistent_LibMenuTabsMgr_CurrentMenuTab += 1;
						AnimStartTime = Now;
						AnimBaseValue = SelectedMenuTab;
						AnimTargetValue = ML::ToReal(Persistent_LibMenuTabsMgr_CurrentMenuTab);
					}
					// ---------------------------------- //
					// Trigger quit menu
					case CInputEvent::EButton::B : {
						SendCustomEvent("QuitTitle", Text[]);
					}
				}
			}
		}

		// ---------------------------------- //
		// Create slide animation between tabs.
		if (AnimStartTime > 0) {
			SelectedMenuTab = AL::EaseOutSine(Now - AnimStartTime, AnimBaseValue, AnimTargetValue - AnimBaseValue, 375);
			if (Now > AnimStartTime + 375) AnimStartTime = -1;
		}
		else if (SelectedMenuTab != Persistent_LibMenuTabsMgr_CurrentMenuTab)
			SelectedMenuTab = ML::ToReal(Persistent_LibMenuTabsMgr_CurrentMenuTab);

		// ---------------------------------- //
		// Update the highlight over active menu tab.
		if (PrevSelectedMenuTab != SelectedMenuTab) {
			PrevSelectedMenuTab = SelectedMenuTab;

			declare Clamp = ML::Clamp(PrevSelectedMenuTab, 0., ML::ToReal(Frame_MenuTabButtons.count));
			declare Floor = ML::FloorInteger(Clamp);
			declare Diff = SelectedMenuTab - Floor;

			Gauge_ActiveTabLight.RelativePosition_V3.X = 0.;
			if (Clamp > 0) for (I, 0, Floor - 1) Gauge_ActiveTabLight.RelativePosition_V3.X += ButtonsWidth[I];
			if (Diff > 0) Gauge_ActiveTabLight.RelativePosition_V3.X += ButtonsWidth[Floor] * Diff;

			Gauge_ActiveTabLight.Size.X = ButtonsWidth[Floor];
			if (Diff > 0) Gauge_ActiveTabLight.Size.X += (ButtonsWidth[Floor + 1] - ButtonsWidth[Floor]) * Diff;

			foreach (I => Label in Label_ColorizableLabels) {
				declare IsSelected = ML::Abs(Clamp - I) < .5;
				Label.DataAttributeSet("NoHover", TL::ToText(IsSelected));

				if (IsSelected) Label.TextColor = <1., 1., 1.>;
				else Label.TextColor = <.625, .625, .625>;
			}
		}

		// ---------------------------------- //
		// Update on ladder points amount change
		if (PrevLocalUserLadderPoints != LocalUser.LadderPoints) {
			PrevLocalUserLadderPoints = LocalUser.LadderPoints;
			declare LP = LocalUser.LadderPoints;

			// ---------------------------------- //
			// Configure ladder progress bar
			declare PlayerEchelon = ML::Max(ML::FloorInteger(LP / 10000), 0);
			declare EchelonProgress = (LP - PlayerEchelon * 10000.) / 10000.;

			SetGaugeRatio(Gauge_PlayerLPProgress, EchelonProgress);
			Gauge_PlayerLPProgress.Color = GetEchelonColor(PlayerEchelon);
			Frame_PlayerMultiRanking.RelativePosition_V3.X = -44.;

			Frame_PlayerEchelonBadge.Visible = PlayerEchelon > 0;
			if (Frame_PlayerEchelonBadge.Visible) {
				Quad_PlayerEchelonImage.ImageUrl = GetEchelonImage(PlayerEchelon);
				Label_PlayerEchelonNumber.Value = TL::ToText(PlayerEchelon);
				Frame_PlayerMultiRanking.RelativePosition_V3.X += -8.5;
			}

			// ---------------------------------- //
			// Format the rank of the player
			declare PlayerZoneName = _("World");
			declare PlayerPosition = _("Not ranked");
			declare ZoneExplode = TL::Split("|", LocalUser.LadderZoneName);
			if (ZoneExplode.count > 0) PlayerZoneName = ZoneExplode[ZoneExplode.count - 1];
			if (LocalUser.LadderRank > 0) PlayerPosition = "#"^LocalUser.LadderRank;
			Label_PlayerRankValue.Value = TL::Compose("%1: %2", PlayerZoneName, PlayerPosition);

			Quad_PlayerRankZoneIcon.ImageUrl = LocalUser.LadderZoneFlagUrl;
			Label_PlayerRankValue.RelativePosition_V3.X = Quad_PlayerRankZoneIcon.Size.X + .5;
			Frame_PlayerLadderRank.RelativePosition_V3.X = 22 + (
				Quad_PlayerRankZoneIcon.Size.X + ML::Min(ComputeWidth(Label_PlayerRankValue), Label_PlayerRankValue.Size.X)
			+ .5) / -2;

			// ---------------------------------- //
			// Format ladder points of the player
			declare NextEchelonLP = (ML::FloorInteger(LP / 10000) + 1) * 10000.;
			Label_LadderPointsValue1.Value = ""^	ML::FloorInteger(LP);
			Label_LadderPointsValue2.Value = "/ "^	ML::FloorInteger(NextEchelonLP);

			declare TotalWidth = ComputeWidth(Label_LadderPointsValue1) + .5;
			Quad_LadderPointsIcon1.RelativePosition_V3.X = TotalWidth;
			TotalWidth += Quad_LadderPointsIcon1.Size.X + 1;
			Label_LadderPointsValue2.RelativePosition_V3.X = TotalWidth;
			TotalWidth += ComputeWidth(Label_LadderPointsValue2) + .5;
			Quad_LadderPointsIcon2.RelativePosition_V3.X = TotalWidth;
			TotalWidth += Quad_LadderPointsIcon1.Size.X;
			Frame_LadderPointsValue.RelativePosition_V3.X = 22 + TotalWidth / -2;
		}
	}
}
--></script>
</manialink>
	""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script.
 *
 *	@return		The version number of the script.
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script.
 *
 *	@return		The name of the script.
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Add tab to the manager.
 *
 *	@param	_MenuTabName	Text displayed over the tab.
 *
 *	@return		Order of the tab in the list.
 */
Integer AddTab(Text _MenuTabName) {
	if (_MenuTabName == "" || G_LibMenuTabsMgr_AvailableTabs.exists(_MenuTabName)) return -1;
	G_LibMenuTabsMgr_AvailableTabs.add(_MenuTabName);
	return G_LibMenuTabsMgr_AvailableTabs.keyof(_MenuTabName);
}

// ---------------------------------- //
/** Remove a tab from the manager.
 *
 *	@param	_MenuTabName	The name of the tab to remove.
 *
 */
Void RemoveTab(Text _MenuTabName) {
	if (!G_LibMenuTabsMgr_AvailableTabs.exists(_MenuTabName)) return;
	declare Removed = G_LibMenuTabsMgr_AvailableTabs.remove(_MenuTabName);
}

// ---------------------------------- //
/** Set the tabs menu visibility.
 *
 *	@param	_Visibility		When set to True, tabs menu is visible.
 */
Void SetVisibility(Boolean _Visibility) {
	if (G_LibMenuTabsMgr_TabsMenuLayer != Null)
		G_LibMenuTabsMgr_TabsMenuLayer.IsVisible = _Visibility;
}

// ---------------------------------- //
/// Hide the tabs menu.
Void Hide() {
	SetVisibility(False);
}

// ---------------------------------- //
/// Show the tabs menu.
Void Show() {
	SetVisibility(False);
}

// ---------------------------------- //
/** Get the amount of created tabs.
 *
 *	@return		Amount of created tabs.
 */
Integer NbTabs() {
	return G_LibMenuTabsMgr_AvailableTabs.count;
}

// ---------------------------------- //
/** Get the currently active tab (or transition).
 *
 *	@return		Order of the currently active tab.
 */
Real CurrentTab() {
	if (G_LibMenuTabsMgr_TabsMenuLayer == Null) return 0.;
	declare SelectedMenuTab for G_LibMenuTabsMgr_TabsMenuLayer.LocalPage = 0.;
	return ML::Clamp(SelectedMenuTab, 0., ML::ToReal(NbTabs()));
}

// ---------------------------------- //
/// Unload the library.
Void Unload() {
	if (G_LibMenuTabsMgr_TabsMenuLayer != Null) {
		UILayerDestroy(G_LibMenuTabsMgr_TabsMenuLayer);
		G_LibMenuTabsMgr_TabsMenuLayer = Null;
	}

	G_LibMenuTabsMgr_AvailableTabs.clear();
}

// ---------------------------------- //
/// Same as above, lol.
Void Load() {
	Unload();
}

// ---------------------------------- //
/// Build the tabs manager layer.
Void Build() {
	if (G_LibMenuTabsMgr_TabsMenuLayer != Null)
		UILayerDestroy(G_LibMenuTabsMgr_TabsMenuLayer);

	G_LibMenuTabsMgr_TabsMenuLayer <=> UILayerCreate();
	G_LibMenuTabsMgr_TabsMenuLayer.ManialinkPage = Private_CreateLayerMenuTabs();
	Effects::AddColorLayer(G_LibMenuTabsMgr_TabsMenuLayer);
}

// ---------------------------------- //
/** Get the layer of the tabs manager.
 *
 *	@return		The layer used by the tabs manager.
 */
CUILayer GetLayer() {
	return G_LibMenuTabsMgr_TabsMenuLayer;
}

// ---------------------------------- //
/** Check if the user wants to leave the title.
 *
 *	@return		True, if user wants to leave the title.
 */
Boolean RequestsQuitTitle() {
	foreach (Event in PendingEvents) {
		if (Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
			if (Event.CustomEventLayer != GetLayer()) continue;
			if (Event.CustomEventType == "QuitTitle") return True;
		}
	}
	return False;
}