// -------------------------------------- //
//  LIBRARY PAUSE MENU 2 by domino54      //
//  script version: 2017-11-26            //
// -------------------------------------- //

/**
 *	This script deprecates PauseMenu.Script.txt, which was
 *	previously exclusive to ShootMania Galaxy.
 *
 *	This library creates customized pause menu, available
 *	for both ShootMania and TrackMania. Main window and team
 *	selection are enhanced with new design. Menu can be
 *	customized with additional buttons with various actions,
 *	as well as display team selection screen in game modes
 *	using multiple custom teams.
 */

#Const Version		"2017-11-26"
#Const ScriptName	"Libs/domino54/PauseMenu2.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/domino54/Bindings.Script.txt" as Bindings
#Include "Libs/domino54/ManialinkTools.Script.txt" as ManialinkTools
#Include "Libs/domino54/Translations.Script.txt" as Translations

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_LibPauseMenu_ManialinkLayerId		"PauseMenu:Manialink"
#Const C_LibPauseMenu_MXAPIMapInfoRoute 	"https://api.mania-exchange.com/%1/maps/%2?format=xml"
#Const C_LibPauseMenu_MXAPIScreenshotRoute	"https://%1.mania-exchange.com/tracks/screenshot/normal/%2?.png"
#Const C_LibPauseMenu_MXMapShowcaseRoute	"exchange?g=%1&id=%2"
#Const C_LibPauseMenu_MPWSMapInfoRoute 		"http://v4.live.maniaplanet.com/webservices/maps/"
#Const C_LibPauseMenu_MPMapShowcaseRoute	"map?"

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Text[] G_LibPauseMenu_CreatedButtons;
declare Real[Text] G_LibPauseMenu_ButtonsOffsets;
declare Text[Text] G_LibPauseMenu_ButtonsLabels;
declare Text[Text] G_LibPauseMenu_ButtonsIcons;
declare Text[Text] G_LibPauseMenu_ButtonsScripts;

/// Custom team change requests
declare Integer[Ident] G_LibPauseMenu_CustomTeamChangeRequests;

/// Title custom settings
declare CHttpRequest G_LibPauseMenu_TitleSettingsReq;
declare Integer G_LibPauseMenu_TitleSettingsReqStart;
declare Text[Text] G_LibPauseMenu_TitleSettingsGroups;
declare Text[Integer] G_LibPauseMenu_TitleSettingsNames;
declare Text[Integer] G_LibPauseMenu_TitleSettingsDesc;
declare Text[Integer] G_LibPauseMenu_TitleSettingsGroup;
declare Text[Integer] G_LibPauseMenu_TitleSettingsType;
declare Text[Integer] G_LibPauseMenu_TitleSettingsDefault;
declare Text[][Integer] G_LibPauseMenu_TitleSettingsEnumVal;
declare Text[][Integer] G_LibPauseMenu_TitleSettingsEnumName;
declare Boolean[Integer] G_LibPauseMenu_TitleSettingsInvert;

/// Custom key bindings
declare Text[Integer] G_LibPauseMenu_KeyBindingsNames;
declare Text[Integer] G_LibPauseMenu_KeyBindingsDesc;
declare Text[Integer] G_LibPauseMenu_KeyBindingsDefault;

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
/** Create manialink for the pause menu.
 *
 *	@param	_FontMedium		Font used in the manialink.
 *
 *	@return		The pause menu manialink.
 */
Text Private_CreateManialinkPauseMenu(Text _FontMedium) {
	// ---------------------------------- //
	// Dump buttons array
	declare Text[] AvailableButtonsIds;
	foreach (ButtonId => ButtonOffset in G_LibPauseMenu_ButtonsOffsets) AvailableButtonsIds.add(ButtonId);
	declare Dump_AvailableButtonsIds = dump(AvailableButtonsIds);
	if (Dump_AvailableButtonsIds == "[]") Dump_AvailableButtonsIds = "Text[]";

	// ---------------------------------- //
	// Dump text arrays
	declare Dump_ButtonsLabels = dump(G_LibPauseMenu_ButtonsLabels);
	declare Dump_ButtonsIcons = dump(G_LibPauseMenu_ButtonsIcons);
	if (Dump_ButtonsLabels == "[]") Dump_ButtonsLabels = "Text[Text]";
	if (Dump_ButtonsIcons == "[]") Dump_ButtonsIcons = "Text[Text]";

	// ---------------------------------- //
	// Create pause menu tiles
	declare ButtonsFrames = "";
	for (I, 0, AvailableButtonsIds.count - 1)
		ButtonsFrames ^= "<frameinstance modelid='FrameModel_PauseMenuButton' id='Frame_PauseMenuButton#"^I^"' hidden='1' />";

	// ---------------------------------- //
	// Format menu buttons script part
	declare MenuButtonsScripts = "";
	foreach (ButtonId => ButtonScript in G_LibPauseMenu_ButtonsScripts)
		MenuButtonsScripts ^= "case \""^ButtonId^"\" : {\n"^ButtonScript^"\n}\n";

	// ---------------------------------- //
	// Create teams cards buttons
	declare TeamsButtons = "";
	for (I, 0, 5) TeamsButtons ^= "<frameinstance modelid='FrameModel_TeamSelectionCard' id='Frame_TeamSelectionCard#"^I^"' pos='"^I*55.5^"' hidden='1' />";

	declare ServerManagerButtons = "";
	for (I, 0, 9) ServerManagerButtons ^= "<frameinstance modelid='FrameModel_ServerMgrButton' id='Frame_ServerMgrButton#"^I^"' pos='0 "^I*-9^"' hidden='0' />";

	// List required translations
	declare Text[] RequiredTranslations;
	foreach (ButtonId => Label in G_LibPauseMenu_ButtonsLabels) RequiredTranslations.add(Label);

	// ---------------------------------- //
	// Custom settings
	declare CustomSettings = "";
	declare SettingsCategories = "";
	for (I, 0, 11) CustomSettings ^= "<frameinstance modelid='FrameModel_CustomSetting' id='Frame_CustomSetting#"^I^"' pos='0 "^I*-5.5^"' hidden='1' />";
	for (I, 0, 6) SettingsCategories ^= "<frameinstance modelid='FrameModel_SettingCat' id='Frame_SettingCat#"^I^"' pos='0 "^I*-8.5^"' hidden='1' />";

	declare SettingsDeclarations = "";
	declare SettingsGetter = "";
	declare SettingsSetter = "";

	foreach (I => SettingName in G_LibPauseMenu_TitleSettingsNames) {
		declare SettingType = "";
		declare SettingDefault = "";
		declare SettingDescription = "";

		if (G_LibPauseMenu_TitleSettingsType.existskey(I)) SettingType = G_LibPauseMenu_TitleSettingsType[I];
		if (G_LibPauseMenu_TitleSettingsDefault.existskey(I)) SettingDefault = G_LibPauseMenu_TitleSettingsDefault[I];
		if (G_LibPauseMenu_TitleSettingsDesc.existskey(I)) SettingDescription = G_LibPauseMenu_TitleSettingsDesc[I];

		if (SettingType == "Boolean" && (SettingDefault != "False" && SettingDefault != "True")) continue;
		if (SettingDescription != "") RequiredTranslations.add(SettingDescription);

		declare SetterType = "";
		switch (SettingType) {
			case "Boolean" : SetterType = "_SettingValue == \"True\"";
			case "Integer" : SetterType = "TL::ToInteger(_SettingValue)";
			case "Real" : SetterType = "TL::ToReal(_SettingValue)";
			case "Text" : SetterType = "_SettingValue";
			default : continue;
		}

		SettingsDeclarations ^= "\tdeclare persistent "^SettingType^" "^SettingName^" for LocalUser = "^SettingDefault^";\n";
		SettingsGetter ^= "\t\tcase "^I^" : return TL::ToText("^SettingName^");\n";
		SettingsSetter ^= "\t\tcase "^I^" : "^SettingName^" = "^SetterType^";\n";
	}

	foreach (GroupId => GroupName in G_LibPauseMenu_TitleSettingsGroups) RequiredTranslations.add(GroupName);

	declare Dump_SettingsGroups	= dump(G_LibPauseMenu_TitleSettingsGroups);
	declare Dump_SettingsDesc	= dump(G_LibPauseMenu_TitleSettingsDesc);
	declare Dump_SettingsGroup	= dump(G_LibPauseMenu_TitleSettingsGroup);
	declare Dump_SettingsType	= dump(G_LibPauseMenu_TitleSettingsType);
	declare Dump_SettingsInvert	= dump(G_LibPauseMenu_TitleSettingsInvert);
	declare Dump_SettingsDefault = dump(G_LibPauseMenu_TitleSettingsDefault);

	if (Dump_SettingsGroups == "[]") Dump_SettingsGroups = "Text[Text]";
	if (Dump_SettingsDesc == "[]") Dump_SettingsDesc = "Text[Integer]";
	if (Dump_SettingsGroup == "[]") Dump_SettingsGroup = "Text[Integer]";
	if (Dump_SettingsType == "[]") Dump_SettingsType = "Text[Integer]";
	if (Dump_SettingsInvert == "[]") Dump_SettingsInvert = "Boolean[Integer]";
	if (Dump_SettingsDefault == "[]") Dump_SettingsDefault = "Text[Integer]";

	declare Dump_SettingsEnumVal = "Text[][Integer]";
	if (G_LibPauseMenu_TitleSettingsEnumVal.count > 0) {
		declare Text[] SettingsEnumVal;
		foreach (I => Values in G_LibPauseMenu_TitleSettingsEnumVal) {
			declare ValuesText = dump(Values);
			if (ValuesText == "[]") ValuesText = "Text[]";
			SettingsEnumVal.add(I^" => "^ValuesText);
		}
		Dump_SettingsEnumVal = "["^TL::Join(", ", SettingsEnumVal)^"]";
	}

	declare Dump_SettingsEnumName = "Text[][Integer]";
	if (G_LibPauseMenu_TitleSettingsEnumName.count > 0) {
		declare Text[] SettingsEnumName;
		foreach (I => Names in G_LibPauseMenu_TitleSettingsEnumName) {
			declare NamesText = dump(Names);
			if (NamesText == "[]") NamesText = "Text[]";
			SettingsEnumName.add(I^" => "^NamesText);
		}
		Dump_SettingsEnumName = "["^TL::Join(", ", SettingsEnumName)^"]";
	}

	// ---------------------------------- //
	// Custom key bindings
	declare Dump_BindingsNames		= dump(G_LibPauseMenu_KeyBindingsNames);
	declare Dump_BindingsDesc		= dump(G_LibPauseMenu_KeyBindingsDesc);
	declare Dump_BindingsDefault	= dump(G_LibPauseMenu_KeyBindingsDefault);

	if (Dump_BindingsNames == "[]") Dump_BindingsNames = "Text[Integer]";
	if (Dump_BindingsDesc == "[]") Dump_BindingsDesc = "Text[Integer]";
	if (Dump_BindingsDefault == "[]") Dump_BindingsDefault = "Text[Integer]";

	return """
<manialink version="3" name="{{{C_LibPauseMenu_ManialinkLayerId}}}">
<stylesheet>
	<style class="FontM" valign="center2" textemboss="1" textcolor="FFF" textfont="{{{TL::MLEncode(_FontMedium)}}}" />
</stylesheet>
<frame z-index="10">

<frame id="Frame_PauseMainWindow" pos="-57">
	<label pos="2 -2" class="FontM" id="Label_MapSelectionTitle" textsize="4" textprefix="$t" text="Pause" translate="1" />
	
	<frame id="Frame_MapInformation" hidden="1">
		<quad size="114 .5" valign="center" bgcolor="FFF" opacity=".5" />

		<frame pos="2 -2">
			<quad size="36 18" keepratio="Clip" id="Quad_CurMapThumbnail" />
			<quad size="36 18" bgcolor="FFF" opacity=".125" />
		</frame>

		<frame pos="39 -2">
			<label pos="2 -3.625" size="69" class="FontM" maxline="1" textsize="2" id="Label_CurMapName" />
			<label pos="1.625 -7.75" class="FontM" textsize="1" text="👤" />
			<label pos="5 -7.5" size="66" class="FontM" textsize="1" id="Label_CurMapAuthor" />
			<quad size="73 10" bgcolor="FFF" opacity=".125" />

			<frame id="Frame_MapButtonMX" pos="0 -11" hidden="1">
				<quad pos="1.25 -3.5" size="5 5" valign="center2" image="https://mania-exchange.com/Content/images/planet_mx_logo.png" />
				<label pos="7 -3.5" class="FontM" textsize="1.5" textprefix="$t" text="Mania Exchange" />
				<quad size="36 7" bgcolorfocus="FFF" opacity=".125" class="Click" id="Quad_MapButtonMXCard" ScriptEvents="1" />
				<quad size="36 7" bgcolor="FFF" opacity=".125" />
			</frame>

			<frame id="Frame_MapButtonMP" pos="37 -11" hidden="1">
				<label pos="1.75 -3.875" class="FontM" textsize="2" text="" />
				<label pos="7 -3.5" class="FontM" textsize="1.5" textprefix="$t" text="Details" translate="1" />
				<quad size="36 7" bgcolorfocus="FFF" opacity=".125" class="Click" id="Quad_MapButtonMPCard" ScriptEvents="1" />
				<quad size="36 7" bgcolor="FFF" opacity=".125" />
			</frame>
		</frame>
	</frame>

	<frame id="Frame_PauseMenuTiles">
		<quad size="114 .5" valign="center" bgcolor="FFF" opacity=".5" />

		<framemodel id="FrameModel_PauseMenuButton">
			<label pos="18 -14.5" size="35" class="FontM" halign="center" textsize="1.5" textprefix="$t" autonewline="1" linespacing=".875" id="Label_MenuButtonLabel" />
			<label pos="33 -3.125" halign="center" valign="center2" textsize="1.5" textemboss="1" textcolor="FFF" id="Label_IsSpectatorClientMode" hidden="1" />
			<quad pos="18 -7" size="10 10" halign="center" valign="center" autoscale="0" id="Quad_MenuButtonIcon" />

			<frame id="Frame_MenuButtonTeams" pos="18 -7" hidden="1">
				<quad size="8 8" valign="center" halign="right" style="Emblems" substyle="#1" autoscale="0" />
				<quad size="8 8" valign="center" halign="left" style="Emblems" substyle="#2" autoscale="0" />
			</frame>

			<quad size="36 18" bgcolorfocus="FFF" opacity=".125" class="Click" id="Quad_MenuButtonCard" ScriptEvents="1" />
			<quad size="36 18" bgcolor="FFF" opacity=".125" />
		</framemodel>
		<frame pos="2 -2">
			{{{ButtonsFrames}}}
		</frame>
	</frame>

	<frame id="Frame_BottomButtonsRow">
		<quad size="114 .5" valign="center" bgcolor="FFF" opacity=".5" />

		<!-- Resume button -->
		<frame id="Frame_ResumeButton" pos="2 -2">
			<label pos="2 -4" class="FontM" text="►" />
			<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Resume" translate="1" />

			<quad size="54.5 8" bgcolorfocus="FFF" opacity=".125" class="Click" id="Quad_ResumeButtonCard" ScriptEvents="1" />
			<quad size="54.5 8" bgcolor="FFF" opacity=".125" />
		</frame>

		<!-- Quit button -->
		<frame id="Frame_QuitButton" pos="57.5 -2">
			<label pos="2 -4.5" class="FontM" text="" id="Label_QuitButtonIcon" />
			<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Quit" translate="1" id="Label_QuitButtonText" />

			<quad size="54.5 8" bgcolorfocus="FFF" opacity=".125" class="Click" id="Quad_QuitButtonCard" ScriptEvents="1" />
			<quad size="54.5 8" bgcolor="FFF" opacity=".125" id="Quad_QuitButtonBg" />
		</frame>
	</frame>
</frame>

<frame id="Frame_ChangeTeamWindow" pos="0 38" hidden="1">
	<label pos="2 -2" class="FontM" id="Label_MapSelectionTitle" textsize="4" textprefix="$t" text="Change team" translate="1" />
	<quad pos="0 -6" size="0 .5" valign="center" bgcolor="FFF" opacity=".5" id="Quad_TeamWinSeparator1" />

	<frame id="Frame_TeamSelectionCards" pos="2 -8">
		<framemodel id="FrameModel_TeamSelectionCard">
			<frame pos="27.25">
				<quad pos="0 -20" size="16 16" halign="center" valign="center" autoscale="0" id="Quad_TeamCardEmblem" />
				<quad pos="0 -30" size="40 .25" halign="center" valign="center" bgcolor="FFF" opacity=".5" />
				<label pos="0 -34" size="50" class="FontM" halign="center" textsize="3" id="Label_TeamCardName" />
				<label pos="0 -40" size="50" class="FontM" halign="center" textsize="1.5" textprefix="$t" id="Label_TeamCardNbPlayers" />
			</frame>

			<quad size="54.5 56" bgcolorfocus="FFF" opacity=".125" class="Click" id="Quad_TeamCardColorCard" ScriptEvents="1" />
			<quad size="54.5 56" bgcolor="FFF" opacity=".25" id="Quad_TeamCardColorBg" />
		</framemodel>
		{{{TeamsButtons}}}
	</frame>

	<quad pos="0 -66" size="0 .5" valign="center" bgcolor="FFF" opacity=".5" id="Quad_TeamWinSeparator2" />

	<!-- Return button -->
	<frame id="Frame_ReturnButton" pos="2 -68">
		<label pos="2.25 -4.125" class="FontM" text="" />
		<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Return" translate="1" />

		<quad size="54.5 8" bgcolorfocus="FFF2" class="Click" id="Quad_TeamsReturnButton" ScriptEvents="1" />
		<quad size="54.5 8" bgcolor="FFF" opacity=".125" />
	</frame>
</frame>

<frame id="Frame_ManageServerWindow" pos="-37 0" hidden="1">
	<label pos="2 -2" class="FontM" id="Label_MapSelectionTitle" textsize="4" textprefix="$t" text="Manage server" translate="1" />
	<quad pos="0 -6" size="74 .5" valign="center" bgcolor="FFF" opacity=".5" />

	<frame pos="2 -8">
		<framemodel id="FrameModel_ServerMgrButton">
			<label pos="2 -4" class="FontM" textsize="2" textprefix="$t" id="Label_MenuButtonLabel" />

			<quad size="70 8" bgcolorfocus="FFF2" class="Click" id="Quad_MenuButtonCard" ScriptEvents="1" />
			<quad size="70 8" bgcolor="FFF" opacity=".125" />
		</framemodel>
		{{{ServerManagerButtons}}}
	</frame>

	<!-- Sevrer Manager bottom row -->
	<frame id="Frame_ManageServerBottom" pos="0 -8">
		<quad size="74 .5" valign="center" bgcolor="FFF" opacity=".5" />

		<!-- Return button -->
		<frame id="Frame_ReturnButton" pos="2 -2">
			<label pos="2.25 -4.125" class="FontM" text="" />
			<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Return" translate="1" />

			<quad size="70 8" bgcolorfocus="FFF2" class="Click" id="Quad_ManageServerButton" ScriptEvents="1" />
			<quad size="70 8" bgcolor="FFF" opacity=".125" />
		</frame>
	</frame>
</frame>

<frame id="Frame_TitleSettingsWindow" pos="-85 43" hidden="1">
	<label pos="2 -2" class="FontM" id="Label_TitleSettingsTitle" textsize="4" textprefix="$t" text="Title settings" />
	<quad pos="0 -6" size="170 .5" valign="center" bgcolor="FFF" opacity=".5" />

	<frame pos="2 -8">
		<framemodel id="FrameModel_SettingCat">
			<label pos="2 -4" size="50" class="FontM" textsize="2" textprefix="$t" id="Label_GroupName" />
			<quad size="54 8" bgcolor="FFF" opacity=".25" id="Quad_IsSelected" hidden="1" />
			<quad size="54 8" bgcolorfocus="FFF2" class="Click" id="Quad_SettingsGroupCard" ScriptEvents="1" />
			<quad size="54 8" bgcolor="FFF" opacity=".125" />
		</framemodel>
		{{{SettingsCategories}}}
	</frame>

	<frame pos="57 -8">
		<framemodel id="FrameModel_CustomSetting">
			<label pos="109 -2.625" halign="right" valign="center2" textsize="1.5" textemboss="1" textcolor="FFF" id="Label_SettingCheck" hidden="1" />
			<label pos="109 -2.5" size="20" class="FontM" textsize="1.5" halign="right" id="Label_SettingEnumVal" hidden="1" />
			<label pos="2 -2.5" size="100" class="FontM" textsize="1.5" id="Label_SettingDesc" />
			<quad size="111 5" bgcolorfocus="FFF2" class="Click" id="Quad_SettingsOptionCard" ScriptEvents="1" />
			<quad size="111 5" bgcolor="FFF" opacity=".125" />
		</framemodel>
		{{{CustomSettings}}}
	</frame>

	<quad pos="0 -76" size="170 .5" valign="center" bgcolor="FFF" opacity=".5" />

	<!-- Return button -->
	<frame id="Frame_ReturnButton" pos="2 -78">
		<label pos="2.25 -4.125" class="FontM" text="" />
		<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Return" translate="1" />

		<quad size="54 8" bgcolorfocus="FFF2" class="Click" id="Quad_TitleReturnButton" ScriptEvents="1" />
		<quad size="54 8" bgcolor="FFF" opacity=".125" />
	</frame>

	<!-- Default button -->
	<frame id="Frame_DefaultButton" pos="57 -78">
		<label pos="2.25 -4.125" class="FontM" text="🔁" id="Label_DefaultButtonIcon" />
		<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Default" translate="1" id="Label_DefaultButtonText" />

		<quad size="54 8" bgcolorfocus="FFF2" class="Click" id="Quad_DefaultButtonCard" ScriptEvents="1" />
		<quad size="54 8" bgcolor="FFF" opacity=".125" id="Quad_DefaultButtonBg" />
	</frame>
</frame>

<frame id="Frame_KeyBindingWindow" pos="-57 29.5" hidden="1">
	<label pos="2 -2" class="FontM" id="Label_AwaitingInput" textsize="4" textprefix="$t" text="Select new key" translate="1" />
	<quad pos="0 -6" size="114 .5" valign="center" bgcolor="FFF" opacity=".5" />

	<label pos="57 -20" size="106" class="FontM" halign="center" textsize="2" id="Label_CurrentKeyDesc" />
	<label pos="57 -26" class="FontM" halign="center" id="Label_CurrentKeyBind" />
	<quad pos="2 -8" size="110 30" bgcolor="FFF" opacity=".125" />

	<quad pos="0 -40" size="114 .5" valign="center" bgcolor="FFF" opacity=".5" />

	<!-- Default button -->
	<frame id="Frame_ReturnButton" pos="2 -42">
		<label pos="2.25 -4.125" class="FontM" text="🔁" />
		<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Default" translate="1" />

		<quad size="54.5 8" bgcolorfocus="FFF2" class="Click" id="Quad_KeyBindingDefault" ScriptEvents="1" />
		<quad size="54.5 8" bgcolor="FFF" opacity=".125" />
	</frame>

	<!-- Unbind button -->
	<frame id="Frame_ReturnButton" pos="57.5 -42">
		<label pos="2.25 -4.125" class="FontM" text="" />
		<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Unbind" translate="1" />

		<quad size="54.5 8" bgcolorfocus="FFF2" class="Click" id="Quad_KeyBindingUnbind" ScriptEvents="1" />
		<quad size="54.5 8" bgcolor="FFF" opacity=".125" />
	</frame>

	<!-- OK button -->
	<frame id="Frame_ReturnButton" pos="2 -51">
		<label pos="2.25 -4.125" class="FontM" text="" />
		<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="OK" translate="1" />

		<quad size="54.5 8" bgcolorfocus="FFF2" class="Click" id="Quad_KeyBindingAccept" ScriptEvents="1" />
		<quad size="54.5 8" bgcolor="FFF" opacity=".125" />
	</frame>

	<!-- Cancel button -->
	<frame id="Frame_ReturnButton" pos="57.5 -51">
		<label pos="2.25 -4.125" class="FontM" text="" />
		<label pos="8 -4" class="FontM" textsize="2" textprefix="$t" text="Cancel" translate="1" />

		<quad size="54.5 8" bgcolorfocus="FFF2" class="Click" id="Quad_KeyBindingDeny" ScriptEvents="1" />
		<quad size="54.5 8" bgcolor="FFF" opacity=".125" />
	</frame>
</frame>

<quad size="320 180" halign="center" valign="center" image="file://Media/Images/Effects/Vignette.dds" />
<quad size="320 180" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" opacity="0" />
<quad size="320 180" halign="center" valign="center" bgcolor="000" opacity=".5" />

</frame>
<script><!--
/**
 *	Pause menu manialink
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_LibPauseMenu_ContextDefault		0
#Const C_LibPauseMenu_ContextConfirmQuit	1
#Const C_LibPauseMenu_ContextSwitchTeam		2
#Const C_LibPauseMenu_ContextManageServer	3
#Const C_LibPauseMenu_ContextTitleSettings	4
#Const C_LibPauseMenu_ContextAwaitingInput	5

#Const C_ButtonColorEnabled		<1., 1., 1.>
#Const C_ButtonColorDisabled	<0., 0., 0.>
#Const C_ButtonColorTextOff		<.5, .5, .5>

#Const C_ServerManagerButtons ["Restart", "NextMap", "BalanceTeams", "MapsBrowser", "PlayersManager", "ScriptSettings"]
#Const C_ServerManagerButtonsText [
	"Restart" => _("Restart map"),
	"NextMap" => _("Go to next map"),
	"BalanceTeams" => _("Balance teams"),
	"MapsBrowser" => _("Select next map"),
	"PlayersManager" => _("View players"),
	"ScriptSettings" => _("Mode settings")
]

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
declare AvailableButtonsIds	= {{{Dump_AvailableButtonsIds}}};
declare ButtonsLabels		= {{{Dump_ButtonsLabels}}};
declare ButtonsIcons		= {{{Dump_ButtonsIcons}}};
declare SortedSettings		= {{{Dump_SettingsGroup}}};
declare SettingGroupsNames	= {{{Dump_SettingsGroups}}};
declare KeyBindingsNames	= {{{Dump_BindingsNames}}};
declare KeyBindingsDesc		= {{{Dump_BindingsDesc}}};
declare KeyBindingsDefault	= {{{Dump_BindingsDefault}}};

declare SettingGroups = Text[];
foreach (GroupId => Name in SettingGroupsNames) SettingGroups.add(GroupId);
declare KeyBindings = Integer[];
foreach (BindingId => Name in KeyBindingsNames) KeyBindings.add(BindingId);

if (KeyBindings.count > 0) {
	SettingGroups.add("bindings");
	SettingGroupsNames["bindings"] = _("Input settings");
}

// ---------------------------------- //
// Load interface elements
declare Frame_PauseMainWindow <=> (Page.GetFirstChild("Frame_PauseMainWindow") as CMlFrame);
declare Quad_ResumeButtonCard <=> (Page.GetFirstChild("Quad_ResumeButtonCard") as CMlQuad);
declare Frame_PauseMenuTiles <=> (Page.GetFirstChild("Frame_PauseMenuTiles") as CMlFrame);
declare Frame_MapInformation <=> (Page.GetFirstChild("Frame_MapInformation") as CMlFrame);
declare Frame_BottomButtonsRow <=> (Page.GetFirstChild("Frame_BottomButtonsRow") as CMlFrame);
declare Quad_CurMapThumbnail <=> (Page.GetFirstChild("Quad_CurMapThumbnail") as CMlQuad);
declare Label_CurMapName <=> (Page.GetFirstChild("Label_CurMapName") as CMlLabel);
declare Label_CurMapAuthor <=> (Page.GetFirstChild("Label_CurMapAuthor") as CMlLabel);
declare Frame_MapButtonMX <=> (Page.GetFirstChild("Frame_MapButtonMX") as CMlFrame);
declare Frame_MapButtonMP <=> (Page.GetFirstChild("Frame_MapButtonMP") as CMlFrame);

declare Frame_ChangeTeamWindow <=> (Page.GetFirstChild("Frame_ChangeTeamWindow") as CMlFrame);
declare Quad_TeamWinSeparator1 <=> (Page.GetFirstChild("Quad_TeamWinSeparator1") as CMlQuad);
declare Quad_TeamWinSeparator2 <=> (Page.GetFirstChild("Quad_TeamWinSeparator2") as CMlQuad);

declare Label_QuitButtonIcon <=> (Page.GetFirstChild("Label_QuitButtonIcon") as CMlLabel);
declare Label_QuitButtonText <=> (Page.GetFirstChild("Label_QuitButtonText") as CMlLabel);
declare Quad_QuitButtonCard <=> (Page.GetFirstChild("Quad_QuitButtonCard") as CMlQuad);
declare Quad_QuitButtonBg <=> (Page.GetFirstChild("Quad_QuitButtonBg") as CMlQuad);

declare CMlFrame[] Frame_PauseMenuButtons;
for (I, 0, AvailableButtonsIds.count - 1)
	Frame_PauseMenuButtons.add((Page.GetFirstChild("Frame_PauseMenuButton#"^I) as CMlFrame));

declare CMlFrame[] Frame_TeamSelectionCards;
for (I, 0, 5) Frame_TeamSelectionCards.add((Page.GetFirstChild("Frame_TeamSelectionCard#"^I) as CMlFrame));

// ---------------------------------- //
// Server manager
declare Frame_ManageServerWindow <=> (Page.GetFirstChild("Frame_ManageServerWindow") as CMlFrame);
declare Frame_ManageServerBottom <=> (Page.GetFirstChild("Frame_ManageServerBottom") as CMlFrame);

declare CMlFrame[] Frame_ServerMgrButtons;
for (I, 0, 9) Frame_ServerMgrButtons.add((Page.GetFirstChild("Frame_ServerMgrButton#"^I) as CMlFrame));

// ---------------------------------- //
// Custom mode settings
declare Frame_TitleSettingsWindow <=> (Page.GetFirstChild("Frame_TitleSettingsWindow") as CMlFrame);
declare Label_TitleSettingsTitle <=> (Page.GetFirstChild("Label_TitleSettingsTitle") as CMlLabel);
declare Frame_KeyBindingWindow <=> (Page.GetFirstChild("Frame_KeyBindingWindow") as CMlFrame);
declare Label_DefaultButtonIcon	<=> (Page.GetFirstChild("Label_DefaultButtonIcon") as CMlLabel);
declare Label_DefaultButtonText	<=> (Page.GetFirstChild("Label_DefaultButtonText") as CMlLabel);
declare Quad_DefaultButtonCard	<=> (Page.GetFirstChild("Quad_DefaultButtonCard") as CMlQuad);
declare Quad_DefaultButtonBg	<=> (Page.GetFirstChild("Quad_DefaultButtonBg") as CMlQuad);
declare Label_CurrentKeyBind	<=> (Page.GetFirstChild("Label_CurrentKeyBind") as CMlLabel);
declare Label_CurrentKeyDesc	<=> (Page.GetFirstChild("Label_CurrentKeyDesc") as CMlLabel);

declare CMlFrame[] Frame_SettingsGroups;
for (I, 0, 6) Frame_SettingsGroups.add((Page.GetFirstChild("Frame_SettingCat#"^I) as CMlFrame));

declare CMlFrame[] Frame_CustomSettings;
for (I, 0, 11) Frame_CustomSettings.add((Page.GetFirstChild("Frame_CustomSetting#"^I) as CMlFrame));

// Window title text
if (ButtonsLabels.existskey("LibPM_TitleSettings"))
	Label_TitleSettingsTitle.Value = Translate(ButtonsLabels["LibPM_TitleSettings"]);

// ---------------------------------- //
// Persistent settings
declare persistent Boolean Persistent_LibPauseMenu_HideMapInfo for LocalUser;

// ---------------------------------- //
// Netcode
declare netread Boolean Net_LibPauseMenu_DisableQuitButton for Teams[0];
declare netread Text[] Net_LibPauseMenu_DisabledButtons for Teams[0];
declare netread Integer Net_LibPauseMenu_LastButtonsUpdate for Teams[0];
declare netread Boolean Net_LibPauseMenu_HideMapInfo for Teams[0];

declare netread Integer Net_LibPauseMenu_CustomTeamsUpdate for Teams[0];
declare netread Integer Net_LibPauseMenu_NbCustomTeams for Teams[0];
declare netread Vec3[Integer] Net_LibPauseMenu_CustomTeamsColors for Teams[0];
declare netread Text[Integer] Net_LibPauseMenu_CustomTeamsNames for Teams[0];
declare netread Integer[Integer] Net_LibPauseMenu_CustomTeamsNbPlayers for Teams[0];

// ---------------------------------- //
// Variables
declare PauseActiveContext = C_LibPauseMenu_ContextDefault;
declare ActionToTrigger = "";
declare UpdateWindowButtons = True;
declare UpdateTeamSelection = True;
declare UpdateServerMgrButtons = True;

// Current map information
declare ThumbnailURL_MX = "";
declare ThumbnailURL_MP = "";
declare MapInfoURL_MX = "";
declare MapInfoURL_MP = "";
declare CHttpRequest CurMapRequestWS;
declare CHttpRequest CurMapRequestMX;
declare RequestStartTime = -1;

// Settings groups
declare UpdateSettingsGroupsList = True;
declare ActiveSettingsGroup = "";
declare SettingsGroups_CurPage = 1;
declare SettingsGroups_NbPages = (SettingGroups.count - 1) / Frame_SettingsGroups.count + 1;
declare PrevActiveSettingsGroup = "";
declare PrevDefaultIsAvailable = True;
if (SettingGroups.existskey(0)) ActiveSettingsGroup = SettingGroups[0];

// Settings list
declare UpdateSettingsList = True;
declare SettingsInGroup = Integer[];
declare Settings_CurPage = 1;
declare Settings_NbPages = 1;

// Key bindings
declare CurrentBindingId = "";
declare CurBindingKeyCurrent = "";
declare CurBindingKeyNew = "";
declare CurBindingKeyDefault = "";

// Update
declare PrevPageIsVisible = False;
declare PrevActiveContext = -1;
declare PrevQuitDisabled = False;
declare PrevButtonsUpdate = -1;
declare PrevIsSpectatorClient = False;
declare PrevObserverMode = UI.SpectatorObserverMode;
declare PrevNbPlayers = -1;
declare PrevCustomTeamsUpdate = -1;
declare PrevNbCustomTeams = -1;
declare PrevTeamsNames = [0 => "", 1 => ""];
declare PrevTeamsColors = [0 => Vec3, 1 => Vec3];
declare PrevHideMapInfo = False;

// ---------------------------------- //
// Download information about current map
declare MXRequestURL = "{{{C_LibPauseMenu_MXAPIMapInfoRoute}}}";
declare GameCode = "";
switchtype (This) {
	case CSmMlScriptIngame : GameCode = "sm";
	case CTmMlScriptIngame : GameCode = "tm";
}
MXRequestURL = TL::Replace(MXRequestURL, "%1", GameCode);
MXRequestURL = TL::Replace(MXRequestURL, "%2", Map.MapInfo.MapUid);

CurMapRequestMX = Http.CreateGet(MXRequestURL, False);
CurMapRequestWS = Http.CreateGet("{{{C_LibPauseMenu_MPWSMapInfoRoute}}}"^Map.MapInfo.MapUid, False, "Accept: application/xml");
RequestStartTime = Now;

// Init
EnableMenuNavigation(False, False, Null, 0);
ClientUI.AltMenuNoCustomScores = False;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Trigger page action in next tick after pause is hidden
if (!PageIsVisible && ActionToTrigger != "") {
	TriggerPageAction(ActionToTrigger);
	ActionToTrigger = "";
}

// ---------------------------------- //
// Update pause menu visibility
if (PrevPageIsVisible != PageIsVisible) {
	PrevPageIsVisible = PageIsVisible;

	EnableMenuNavigation(PageIsVisible, False, Null, 1);
	ClientUI.AltMenuNoCustomScores = PageIsVisible;
	PrevActiveContext = -1;
}

// ---------------------------------- //
// Handle Mania Exchange response
if (CurMapRequestMX != Null) {
	declare Destroy = False;

	if (CurMapRequestMX.IsCompleted) {
		declare Document = Xml.Create(CurMapRequestMX.Result);
		declare MapId = Private_ParseMXResults(Document);
		Xml.Destroy(Document);

		if (MapId > 0) {
			ThumbnailURL_MX = "{{{C_LibPauseMenu_MXAPIScreenshotRoute}}}";
			ThumbnailURL_MX = TL::Replace(ThumbnailURL_MX, "%1", GameCode);
			ThumbnailURL_MX = TL::Replace(ThumbnailURL_MX, "%2", TL::ToText(MapId));
			
			MapInfoURL_MX = "{{{C_LibPauseMenu_MXMapShowcaseRoute}}}";
			MapInfoURL_MX = TL::Replace(MapInfoURL_MX, "%1", GameCode);
			MapInfoURL_MX = TL::Replace(MapInfoURL_MX, "%2", TL::ToText(MapId));
		}

		UpdateWindowButtons = True;
		Destroy = True;
	}

	if (Now > RequestStartTime + 10000) Destroy = True;

	if (Destroy) {
		Http.Destroy(CurMapRequestMX);
		CurMapRequestMX = Null;
	}
}

// ---------------------------------- //
// Handle ManiaPlanet WS response
if (CurMapRequestWS != Null) {
	declare Destroy = False;

	if (CurMapRequestWS.IsCompleted) {
		declare Document = Xml.Create(CurMapRequestWS.Result);
		ThumbnailURL_MP = Private_ParseMPWSResult(Document);
		if (ThumbnailURL_MP != "") MapInfoURL_MP = "{{{C_LibPauseMenu_MPMapShowcaseRoute}}}"^Map.MapInfo.MapUid;
		Xml.Destroy(Document);

		UpdateWindowButtons = True;
		Destroy = True;
	}

	if (Now > RequestStartTime + 10000) Destroy = True;

	if (Destroy) {
		Http.Destroy(CurMapRequestWS);
		CurMapRequestWS = Null;
	}
}

if (!PageIsVisible) continue;

// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// On mouse click
	if (Event.Type == CMlEvent::Type::MouseClick) {
		// ---------------------------------- //
		// Resume game
		if (Event.ControlId == "Quad_ResumeButtonCard")
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);

		// ---------------------------------- //
		// Quit server
		else if (Event.ControlId == "Quad_QuitButtonCard") {
			// PauseActiveContext = C_LibPauseMenu_ContextConfirmQuit;
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
			// ActionToTrigger = "maniaplanet:quitserver";
		}
		// ---------------------------------- //
		// Change current team
		else if (Event.ControlId == "Quad_TeamCardColorCard") {
			declare SelectedTeam = Frame_TeamSelectionCards.keyof(Event.Control.Parent) + 1;
			if (SelectedTeam <= 0) continue;

			// ---------------------------------- //
			// Classic teams
			if (Net_LibPauseMenu_NbCustomTeams <= 0) {
				switch (SelectedTeam) {
					case 1 : Playground.JoinTeam1();
					case 2 : Playground.JoinTeam2();
				}
			}
			// ---------------------------------- //
			// Custom teams
			else {
				declare netwrite Integer Net_LibPauseMenu_LastTeamChangeTime for UI;
				declare netwrite Integer Net_LibPauseMenu_RequestedCustomClan for UI;
				Net_LibPauseMenu_LastTeamChangeTime = Now;
				Net_LibPauseMenu_RequestedCustomClan = SelectedTeam;
			}

			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
			PauseActiveContext = C_LibPauseMenu_ContextDefault;
		}
		// ---------------------------------- //
		// Return from the team selection
		else if (Event.ControlId == "Quad_TeamsReturnButton")
			PauseActiveContext = C_LibPauseMenu_ContextDefault;
		
		// ---------------------------------- //
		// Return from the server manager
		else if (Event.ControlId == "Quad_ManageServerButton")
			PauseActiveContext = C_LibPauseMenu_ContextDefault;

		// ---------------------------------- //
		// Pause menu tiles buttons
		else if (Event.ControlId == "Quad_MenuButtonCard") {
			declare Text QuadButtonId for Event.Control;
			switch (QuadButtonId) {
{{{MenuButtonsScripts}}}
			}
		}
		// ---------------------------------- //
		// Return from the title settings
		else if (Event.ControlId == "Quad_TitleReturnButton")
			PauseActiveContext = C_LibPauseMenu_ContextDefault;

		// ---------------------------------- //
		// Change active settings group
		else if (Event.ControlId == "Quad_SettingsGroupCard") {
			declare Text SettingsGroupId for Event.Control;
			ActiveSettingsGroup = SettingsGroupId;
		}
		// ---------------------------------- //
		// Toggle setting
		else if (Event.ControlId == "Quad_SettingsOptionCard") {
			// ---------------------------------- //
			// Bindings
			if (ActiveSettingsGroup == "bindings") {
				declare Text QuadBindingName for Event.Control;
				if (QuadBindingName != "") PauseActiveContext = C_LibPauseMenu_ContextAwaitingInput;

				declare BindingId = KeyBindingsNames.keyof(QuadBindingName);
				if (KeyBindingsDefault.existskey(BindingId)) CurBindingKeyDefault = KeyBindingsDefault[BindingId];

				declare CurBindingDescription = "";
				if (KeyBindingsDesc.existskey(BindingId)) CurBindingDescription = KeyBindingsDesc[BindingId];

				CurrentBindingId = QuadBindingName;
				CurBindingKeyCurrent = Bindings_GetKey(CurrentBindingId, CurBindingKeyDefault);
				CurBindingKeyNew = CurBindingKeyCurrent;

				declare NewKeyName = GeyKeyName(CurBindingKeyNew);
				if (CurBindingKeyNew == "") NewKeyName = Translate("<none>");

				Label_CurrentKeyBind.Value = NewKeyName;
				Label_CurrentKeyDesc.Value = Translate(CurBindingDescription);
			}
			// ---------------------------------- //
			// Settings
			else {
				declare Integer QuadSettingId for Event.Control;
				declare SettingType = GetSettingType(QuadSettingId);
				declare SettingValue = GetSettingValue(QuadSettingId);
				declare SettingEnumValues = GetSettingEnumValues(QuadSettingId);
				declare SettingEnumNames = GetSettingEnumNames(QuadSettingId);

				// ---------------------------------- //
				// Toggle Boolean
				if (SettingType == "Boolean") {
					SetSettingValue(QuadSettingId, TL::ToText(SettingValue != "True"));
				}
				// ---------------------------------- //
				// Toggle enumerator
				else if (SettingEnumValues.count > 0) {
					declare OptionId = SettingEnumValues.keyof(SettingValue);
					OptionId += 1;
					if (OptionId >= SettingEnumValues.count) OptionId = 0;
					SetSettingValue(QuadSettingId, SettingEnumValues[OptionId]);
				}

				UpdateSettingsList = True;
			}
		}
		// ---------------------------------- //
		// Reset title settings defaults
		else if (Event.ControlId == "Quad_DefaultButtonCard") {
			// ---------------------------------- //
			// Bindings
			if (ActiveSettingsGroup == "bindings") {
				foreach (BindingId in KeyBindings) {
					declare BindingName = TL::ToText(BindingId);
					declare BindingDefault = "";
					if (KeyBindingsNames.existskey(BindingId)) BindingName = KeyBindingsNames[BindingId];
					if (KeyBindingsDefault.existskey(BindingId)) BindingDefault = KeyBindingsDefault[BindingId];
					Bindings_SetKey(BindingName, BindingDefault, BindingDefault);
				}
			}
			// ---------------------------------- //
			// Settings
			else {
				foreach (SettingId in SettingsInGroup) {
					declare SettingDefault = GetSettingDefault(SettingId);
					SetSettingValue(SettingId, SettingDefault);
				}
			}
			UpdateSettingsList = True;
		}
		// ---------------------------------- //
		// Accept key binding change
		else if (Event.ControlId == "Quad_KeyBindingAccept") {
			Bindings_SetKey(CurrentBindingId, CurBindingKeyNew, CurBindingKeyDefault);
			PauseActiveContext = C_LibPauseMenu_ContextTitleSettings;
			UpdateSettingsList = True;
		}
		// ---------------------------------- //
		// Deny key binding change
		else if (Event.ControlId == "Quad_KeyBindingDeny") {
			PauseActiveContext = C_LibPauseMenu_ContextTitleSettings;
		}
		// ---------------------------------- //
		// Set the default key binding
		else if (Event.ControlId == "Quad_KeyBindingDefault") {
			CurBindingKeyNew = CurBindingKeyDefault;
			declare NewKeyName = GeyKeyName(CurBindingKeyNew);
			if (CurBindingKeyNew == "") NewKeyName = Translate("<none>");
			Label_CurrentKeyBind.Value = NewKeyName;
		}
		// ---------------------------------- //
		// Unbind an option
		else if (Event.ControlId == "Quad_KeyBindingUnbind") {
			CurBindingKeyNew = "";
			Label_CurrentKeyBind.Value = Translate("<none>");
		}
		// ---------------------------------- //
		// Show map on Mania Exchange manialink
		else if (Event.ControlId == "Quad_MapButtonMXCard") {
			OpenLink(MapInfoURL_MX, CMlScript::LinkType::ManialinkBrowser);
		}
		// ---------------------------------- //
		// Show map on ManiaPlanet maps manialink
		else if (Event.ControlId == "Quad_MapButtonMPCard") {
			OpenLink(MapInfoURL_MP, CMlScript::LinkType::ManialinkBrowser);
		}

		// Play sounds
		if (Event.Control.HasClass("Click"))
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 1.);
	}
	// ---------------------------------- //
	// On mouse over
	else if (Event.Type == CMlEvent::Type::MouseOver) {
		if (Event.Control.HasClass("Click"))
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 1, 1.);
	}
	// ---------------------------------- //
	// On menu navigation
	else if (Event.Type == CMlEvent::Type::MenuNavigation) {
		// ---------------------------------- //
		// Back
		if (
			Event.MenuNavAction == CMlEvent::EMenuNavAction::Cancel ||
			Event.MenuNavAction == CMlEvent::EMenuNavAction::AppMenu
		) {
			switch (PauseActiveContext) {
				case C_LibPauseMenu_ContextDefault : CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
				case C_LibPauseMenu_ContextAwaitingInput : PauseActiveContext = C_LibPauseMenu_ContextTitleSettings;
				default : PauseActiveContext = C_LibPauseMenu_ContextDefault;
			}
		}
	}
}

// ---------------------------------- //
// Update buttons on teams number change
if (PrevNbCustomTeams != Net_LibPauseMenu_NbCustomTeams) {
	PrevNbCustomTeams = Net_LibPauseMenu_NbCustomTeams;

	UpdateWindowButtons = True;
	UpdateTeamSelection = True;
}

// ---------------------------------- //
// Pause menu context change
if (PrevActiveContext != PauseActiveContext) {
	PrevActiveContext = PauseActiveContext;
	Audio.PlaySoundEvent(CAudioManager::ELibSound::ShowDialog, 0, 1.);

	Frame_PauseMainWindow.Visible = PauseActiveContext == C_LibPauseMenu_ContextDefault;
	Frame_ChangeTeamWindow.Visible = PauseActiveContext == C_LibPauseMenu_ContextSwitchTeam;
	Frame_ManageServerWindow.Visible = PauseActiveContext == C_LibPauseMenu_ContextManageServer;
	Frame_TitleSettingsWindow.Visible = PauseActiveContext == C_LibPauseMenu_ContextTitleSettings;
	Frame_KeyBindingWindow.Visible = PauseActiveContext == C_LibPauseMenu_ContextAwaitingInput;
}

// ---------------------------------- //
// Loop depending on active context
switch (PauseActiveContext) {
	// ---------------------------------- //
	// Awaiting new input key
	case C_LibPauseMenu_ContextAwaitingInput : {
		// ---------------------------------- //
		// Change active key
		foreach (Event in PendingEvents) {
			if (Event.Type != CMlEvent::Type::KeyPress) continue;

			CurBindingKeyNew = Event.KeyName;
			Label_CurrentKeyBind.Value = GeyKeyName(CurBindingKeyNew);
		}
	}
	// ---------------------------------- //
	// Custom game mode settings
	case C_LibPauseMenu_ContextTitleSettings : {
		// ---------------------------------- //
		// Active settings group change
		if (PrevActiveSettingsGroup != ActiveSettingsGroup) {
			PrevActiveSettingsGroup = ActiveSettingsGroup;
			UpdateSettingsGroupsList = True;

			SettingsInGroup.clear();
			foreach (SettingId => SettingGroup in SortedSettings)
				if (SettingGroup == ActiveSettingsGroup)
					SettingsInGroup.add(SettingId);

			UpdateSettingsList = True;
			Settings_CurPage = 1;
			Settings_NbPages = (SettingsInGroup.count - 1) / Frame_CustomSettings.count + 1;
		}

		// ---------------------------------- //
		// Update settings groups list
		if (UpdateSettingsGroupsList) {
			UpdateSettingsGroupsList = False;

			declare GroupsOffset = (SettingsGroups_CurPage - 1) * Frame_SettingsGroups.count;

			foreach (I => Frame in Frame_SettingsGroups) {
				declare GroupOrder = GroupsOffset + I;
				Frame.Visible = SettingGroups.existskey(GroupOrder);
				if (!Frame.Visible) continue;
				declare GroupId = SettingGroups[GroupOrder];

				// ---------------------------------- //
				// Group name
				declare Label_GroupName <=> (Frame.GetFirstChild("Label_GroupName") as CMlLabel);
				declare GroupName = GroupId;
				if (SettingGroupsNames.existskey(GroupId)) GroupName = SettingGroupsNames[GroupId];
				Label_GroupName.Value = GroupName;

				// Highlight active group
				declare Quad_IsSelected <=> (Frame.GetFirstChild("Quad_IsSelected") as CMlQuad);
				Quad_IsSelected.Visible = GroupId == ActiveSettingsGroup;

				// ---------------------------------- //
				// Save group id in the button
				declare Quad_SettingsGroupCard <=> (Frame.GetFirstChild("Quad_SettingsGroupCard") as CMlQuad);
				declare Text SettingsGroupId for Quad_SettingsGroupCard;
				SettingsGroupId = GroupId;
			}
		}

		// ---------------------------------- //
		// Update settings cards
		if (UpdateSettingsList) {
			UpdateSettingsList = False;

			declare SettingsOffset = (Settings_CurPage - 1) * Frame_CustomSettings.count;

			foreach (I => Frame in Frame_CustomSettings) {
				declare SettingOrder = SettingsOffset + I;
				if (ActiveSettingsGroup == "bindings") Frame.Visible = KeyBindings.existskey(SettingOrder);
				else Frame.Visible = SettingsInGroup.existskey(SettingOrder);
				if (!Frame.Visible) continue;

				// ---------------------------------- //
				// Load frame elements
				declare Label_SettingDesc <=> (Frame.GetFirstChild("Label_SettingDesc") as CMlLabel);
				declare Label_SettingCheck <=> (Frame.GetFirstChild("Label_SettingCheck") as CMlLabel);
				declare Label_SettingEnumVal <=> (Frame.GetFirstChild("Label_SettingEnumVal") as CMlLabel);
				declare Quad_SettingsOptionCard <=> (Frame.GetFirstChild("Quad_SettingsOptionCard") as CMlQuad);

				// ---------------------------------- //
				// Key bindings
				if (ActiveSettingsGroup == "bindings") {
					declare BindingId = KeyBindings[SettingOrder];
					Label_SettingCheck.Hide();
					Label_SettingEnumVal.Show();

					// Binding name
					declare BindingName = TL::ToText(BindingId);
					if (KeyBindingsNames.existskey(BindingId)) BindingName = KeyBindingsNames[BindingId];

					// Binding description
					declare BindingDescription = TL::ToText(BindingId);
					if (KeyBindingsDesc.existskey(BindingId)) BindingDescription = KeyBindingsDesc[BindingId];
					Label_SettingDesc.Value = Translate(BindingDescription);

					// Binding value
					declare BindingDefault = "";
					if (KeyBindingsDefault.existskey(BindingId)) BindingDefault = KeyBindingsDefault[BindingId];
					declare BindingCurKey = Bindings_GetKey(BindingName, BindingDefault);

					declare BindKeyName = GeyKeyName(BindingCurKey);
					if (BindingCurKey == "") BindKeyName = Translate("<none>");
					Label_SettingEnumVal.Value = BindKeyName;

					// Save binding id
					declare Text QuadBindingName for Quad_SettingsOptionCard;
					QuadBindingName = BindingName;
				}
				// ---------------------------------- //
				// Custom settings
				else {
					// ---------------------------------- //
					// Get setting info
					declare SettingId = SettingsInGroup[SettingOrder];
					declare SettingDesc = GetSettingDescription(SettingId);
					declare SettingValue = GetSettingValue(SettingId);
					declare SettingType = GetSettingType(SettingId);
					declare SettingDefault = GetSettingDefault(SettingId);
					declare SettingInverted = IsSettingInverted(SettingId);
					declare SettingEnumValues = GetSettingEnumValues(SettingId);
					declare SettingEnumNames = GetSettingEnumNames(SettingId);

					// Setting description
					Label_SettingDesc.Value = Translate(SettingDesc);

					// ---------------------------------- //
					// Enumerators
					Label_SettingEnumVal.Visible = SettingEnumValues.count > 0;
					if (Label_SettingEnumVal.Visible) {
						declare OptionId = SettingEnumValues.keyof(SettingValue);
						declare OptionName = SettingValue;
						if (SettingEnumNames.existskey(OptionId)) OptionName = SettingEnumNames[OptionId];
						Label_SettingEnumVal.Value = OptionName;
					}

					// ---------------------------------- //
					// Boolean settings check
					Label_SettingCheck.Visible = SettingType == "Boolean" && !Label_SettingEnumVal.Visible;
					if (Label_SettingCheck.Visible) {
						declare IsActive = SettingValue == "True";
						if (SettingInverted) IsActive = !IsActive;
						if (IsActive) Label_SettingCheck.Value = "";
						else Label_SettingCheck.Value = "";
					}

					// Save setting id in the button
					declare Integer QuadSettingId for Quad_SettingsOptionCard;
					QuadSettingId = SettingId;
				}
			}

			// ---------------------------------- //
			// Update the default button availability
			declare DefaultIsAvailable = False;

			if (ActiveSettingsGroup == "bindings") {
				foreach (BindingId in KeyBindings) {
					declare BindingName = TL::ToText(BindingId);
					declare BindingDefault = "";
					if (KeyBindingsNames.existskey(BindingId)) BindingName = KeyBindingsNames[BindingId];
					if (KeyBindingsDefault.existskey(BindingId)) BindingDefault = KeyBindingsDefault[BindingId];

					if (Bindings_GetKey(BindingName, BindingDefault) == BindingDefault) continue;
					DefaultIsAvailable = True;
					break;
				}
			}
			else foreach (SettingId in SettingsInGroup) {
				declare SettingValue = GetSettingValue(SettingId);
				declare SettingDefault = GetSettingDefault(SettingId);
				if (SettingValue == SettingDefault) continue;
				DefaultIsAvailable = True;
				break;
			}

			if (PrevDefaultIsAvailable != DefaultIsAvailable) {
				PrevDefaultIsAvailable = DefaultIsAvailable;

				Quad_DefaultButtonCard.Visible = PrevDefaultIsAvailable;

				declare Color = C_ButtonColorTextOff;
				if (PrevDefaultIsAvailable) Color = C_ButtonColorEnabled;
				Label_DefaultButtonIcon.TextColor = Color;
				Label_DefaultButtonText.TextColor = Color;

				Quad_DefaultButtonBg.BgColor = C_ButtonColorDisabled;
				if (PrevDefaultIsAvailable) Quad_DefaultButtonBg.BgColor = C_ButtonColorEnabled;
			}
		}
	}
	// ---------------------------------- //
	// Server Manager
	case C_LibPauseMenu_ContextManageServer : {
		// ---------------------------------- //
		// Update server manager page buttons
		if (UpdateServerMgrButtons) {
			UpdateServerMgrButtons = False;

			// ---------------------------------- //
			// List the available buttons
			declare Text[] AvailableButtons;
			foreach (ButtonId in C_ServerManagerButtons) {
				switch (ButtonId) {
					case "BalanceTeams" : if (!UseClans || UseForcedClans) continue;
				}
				AvailableButtons.add(ButtonId);
			}

			// ---------------------------------- //
			// Format buttons frames
			foreach (I => Frame in Frame_ServerMgrButtons) {
				Frame.Visible = AvailableButtons.existskey(I);
				if (!Frame.Visible) continue;
				declare ButtonId = AvailableButtons[I];

				// ---------------------------------- //
				// Set the button text
				declare Label_MenuButtonLabel <=> (Frame.GetFirstChild("Label_MenuButtonLabel") as CMlLabel);
				declare ButtonText = ButtonId;
				if (C_ServerManagerButtonsText.existskey(ButtonId)) ButtonText = C_ServerManagerButtonsText[ButtonId];
				Label_MenuButtonLabel.Value = ButtonText;
			}

			// Adjust the window size
			declare TotalHeight = 9. + AvailableButtons.count * 9.;
			Frame_ManageServerBottom.RelativePosition_V3.Y = -TotalHeight;
			TotalHeight += 10.;
			Frame_ManageServerWindow.RelativePosition_V3.Y = TotalHeight / 2;
		}
	}
	// ---------------------------------- //
	// Team selection context
	case C_LibPauseMenu_ContextSwitchTeam : {
		foreach (I => Team in Teams) {
			// ---------------------------------- //
			// Update on team name change
			if (PrevTeamsNames[I] != Team.Name) {
				PrevTeamsNames[I] = Team.Name;
				UpdateTeamSelection = True;
			}

			// ---------------------------------- //
			// Update on team color change
			if (PrevTeamsColors[I] != Team.ColorPrimary) {
				PrevTeamsColors[I] = Team.ColorPrimary;
				UpdateTeamSelection = True;
			}
		}

		// ---------------------------------- //
		// Update selection on player clan change
		if (UseClans) foreach (Player in Players) {
			declare PrevPlayerClan for Player = -1;
			if (PrevPlayerClan == Player.CurrentClan) continue;
			PrevPlayerClan = Player.CurrentClan;
			UpdateTeamSelection = True;
		}

		// ---------------------------------- //
		// Update selection on players amount change
		if (PrevNbPlayers != Players.count) {
			PrevNbPlayers = Players.count;
			UpdateTeamSelection = True;
		}

		// ---------------------------------- //
		// Trigger update on custom teams change
		if (PrevCustomTeamsUpdate != Net_LibPauseMenu_CustomTeamsUpdate) {
			PrevCustomTeamsUpdate = Net_LibPauseMenu_CustomTeamsUpdate;
			UpdateTeamSelection = True;
		}

		// ---------------------------------- //
		// Update team selection buttons
		if (UpdateTeamSelection) {
			UpdateTeamSelection = False;

			// ---------------------------------- //
			// Get teams number
			declare TotalNbTeams = Teams.count;
			declare IsCustomTeams = !UseClans && Net_LibPauseMenu_NbCustomTeams > 0;
			if (IsCustomTeams) TotalNbTeams = Net_LibPauseMenu_NbCustomTeams;
			TotalNbTeams = ML::Min(TotalNbTeams, Frame_TeamSelectionCards.count);

			// ---------------------------------- //
			// Set window position
			declare TotalWidth = TotalNbTeams * 55.5 + 3.;
			Frame_ChangeTeamWindow.RelativePosition_V3.X = TotalWidth / -2.;
			Quad_TeamWinSeparator1.Size.X = TotalWidth; 
			Quad_TeamWinSeparator2.Size.X = TotalWidth;

			// ---------------------------------- //
			// Format team selection cards
			foreach (I => Frame in Frame_TeamSelectionCards) {
				Frame.Visible = I < TotalNbTeams;
				if (!Frame.Visible) continue;
				declare Clan = I + 1;

				// ---------------------------------- //
				// Load frame elements
				declare Label_TeamCardNbPlayers <=> (Frame.GetFirstChild("Label_TeamCardNbPlayers") as CMlLabel);
				declare Quad_TeamCardColorCard <=> (Frame.GetFirstChild("Quad_TeamCardColorCard") as CMlQuad);
				declare Quad_TeamCardColorBg <=> (Frame.GetFirstChild("Quad_TeamCardColorBg") as CMlQuad);
				declare Quad_TeamCardEmblem <=> (Frame.GetFirstChild("Quad_TeamCardEmblem") as CMlQuad);
				declare Label_TeamCardName <=> (Frame.GetFirstChild("Label_TeamCardName") as CMlLabel);

				// ---------------------------------- //
				// Set the team color
				declare TeamColor = <1., 1., 1.>;
				if (IsCustomTeams) {
					if (Net_LibPauseMenu_CustomTeamsColors.existskey(Clan))
						TeamColor = Net_LibPauseMenu_CustomTeamsColors[Clan];
				}
				else TeamColor = Teams[I].ColorPrimary;

				Quad_TeamCardColorCard.BgColorFocus = TeamColor;
				Quad_TeamCardColorBg.BgColor = TeamColor;

				// ---------------------------------- //
				// Set the team name
				declare TeamName = "Team #"^Clan;
				if (IsCustomTeams) {
					if (Net_LibPauseMenu_CustomTeamsNames.existskey(Clan))
						TeamName = Net_LibPauseMenu_CustomTeamsNames[Clan];
				}
				else TeamName = Teams[I].Name;
				Label_TeamCardName.Value = TeamName;

				// ---------------------------------- //
				// Set the team emblem
				declare TeamEmblemStyle = "Emblems|#"^Clan;
				if (IsCustomTeams) TeamEmblemStyle = "Emblems|#0";
				SetQuadStyle(Quad_TeamCardEmblem, TeamEmblemStyle);

				// ---------------------------------- //
				// Set the team players count
				declare TeamNbPlayers = 0;
				if (IsCustomTeams) {
					if (Net_LibPauseMenu_CustomTeamsNbPlayers.existskey(Clan))
					TeamNbPlayers = Net_LibPauseMenu_CustomTeamsNbPlayers[Clan];
				}
				else foreach (Player in Players) {
					if (Player.CurrentClan != Clan) continue;
					TeamNbPlayers += 1;
				}
				Label_TeamCardNbPlayers.Value = TL::Compose("%1: "^TeamNbPlayers, _("Players"));
			}
		}
	}
	// ---------------------------------- //
	// Main context
	default : {
		// ---------------------------------- //
		// Update quit button avaliability
		if (PrevQuitDisabled != Net_LibPauseMenu_DisableQuitButton) {
			PrevQuitDisabled = Net_LibPauseMenu_DisableQuitButton;
			Quad_QuitButtonCard.Visible = !PrevQuitDisabled;

			declare Color = C_ButtonColorTextOff;
			if (!PrevQuitDisabled) Color = C_ButtonColorEnabled;
			Label_QuitButtonIcon.TextColor = Color;
			Label_QuitButtonText.TextColor = Color;

			Quad_QuitButtonBg.BgColor = C_ButtonColorDisabled;
			if (!PrevQuitDisabled) Quad_QuitButtonBg.BgColor = C_ButtonColorEnabled;
		}

		// ---------------------------------- //
		// Available buttons update
		if (PrevButtonsUpdate != Net_LibPauseMenu_LastButtonsUpdate) {
			PrevButtonsUpdate = Net_LibPauseMenu_LastButtonsUpdate;
			UpdateWindowButtons = True;
		}

		// ---------------------------------- //
		// Update on spectator mode change
		if (PrevIsSpectatorClient != IsSpectatorClient) {
			PrevIsSpectatorClient = IsSpectatorClient;
			UpdateWindowButtons = True;
		}
		if (PrevObserverMode != UI.SpectatorObserverMode) {
			PrevObserverMode = UI.SpectatorObserverMode;
			UpdateWindowButtons = True;
		}

		// ---------------------------------- //
		// Map info setting change
		if (PrevHideMapInfo != Persistent_LibPauseMenu_HideMapInfo) {
			PrevHideMapInfo = Persistent_LibPauseMenu_HideMapInfo;
			UpdateWindowButtons = True;
		}

		// ---------------------------------- //
		// Update the tiles
		if (UpdateWindowButtons) {
			UpdateWindowButtons = False;
			declare TotalHeight = 6.;

			// ---------------------------------- //
			// Map information
			Frame_MapInformation.Visible = !Net_LibPauseMenu_HideMapInfo && !Persistent_LibPauseMenu_HideMapInfo;
			Frame_MapInformation.RelativePosition_V3.Y = -TotalHeight;

			if (Frame_MapInformation.Visible) {
				TotalHeight += 22.;

				Frame_MapButtonMX.Visible = MapInfoURL_MX != "";
				Frame_MapButtonMP.Visible = MapInfoURL_MP != "";

				Frame_MapButtonMP.RelativePosition_V3.X = 0.;
				if (Frame_MapButtonMX.Visible) Frame_MapButtonMP.RelativePosition_V3.X = 37.;

				// ---------------------------------- //
				// Thumbnail
				declare ThumbnailURL = "file://Thumbnails/MapUid/"^Map.MapInfo.MapUid;
				if (ThumbnailURL_MP != "") ThumbnailURL = ThumbnailURL_MP;
				if (ThumbnailURL_MX != "") ThumbnailURL = ThumbnailURL_MX;
				Quad_CurMapThumbnail.ImageUrl = ThumbnailURL;

				// ---------------------------------- //
				// Map details
				Label_CurMapName.Value = Map.MapName;
				Label_CurMapAuthor.Value = Map.AuthorLogin;
			}

			// ---------------------------------- //
			// Get buttons to display
			declare Text[] ButtonsIds;
			foreach (ButtonId in AvailableButtonsIds) {
				if (Net_LibPauseMenu_DisabledButtons.exists(ButtonId)) continue;
				switch (ButtonId) {
					case "LibPM_Spectator" : {
						if (UI.SpectatorObserverMode == CUIConfig::EObserverMode::Forced || UI.ForceSpectator) continue;
						if (UI.SpectatorObserverMode == CUIConfig::EObserverMode::Forbidden) continue;
					}
					case "LibPM_ChangeTeam" : if (IsSpectatorClient || (!UseClans && Net_LibPauseMenu_NbCustomTeams <= 0) || UseForcedClans) continue;
					case "LibPM_TitleSettings" : if (SettingGroups.count <= 0) continue;
				}
				ButtonsIds.add(ButtonId);
			}

			// ---------------------------------- //
			// Configure buttons
			foreach (I => Frame in Frame_PauseMenuButtons) {
				Frame.Visible = ButtonsIds.existskey(I);
				if (!Frame.Visible) continue;
				declare ButtonId = ButtonsIds[I];

				// Set frame position
				Frame.RelativePosition_V3.X = (I % 3) * 37.;
				Frame.RelativePosition_V3.Y = (I / 3) * -19.;

				// ---------------------------------- //
				// Load frame elements
				declare Label_MenuButtonLabel <=> (Frame.GetFirstChild("Label_MenuButtonLabel") as CMlLabel);
				declare Quad_MenuButtonIcon <=> (Frame.GetFirstChild("Quad_MenuButtonIcon") as CMlQuad);
				declare Quad_MenuButtonCard <=> (Frame.GetFirstChild("Quad_MenuButtonCard") as CMlQuad);
				declare Frame_MenuButtonTeams <=> (Frame.GetFirstChild("Frame_MenuButtonTeams") as CMlFrame);
				declare Label_IsSpectatorClientMode <=> (Frame.GetFirstChild("Label_IsSpectatorClientMode") as CMlLabel);

				// ---------------------------------- //
				// Set button label text
				declare ButtonLabelText = "";
				if (ButtonsLabels.existskey(ButtonId)) ButtonLabelText = ButtonsLabels[ButtonId];
				Label_MenuButtonLabel.Value = Translate(ButtonLabelText);

				// ---------------------------------- //
				// Set button icon image
				declare ButtonIconURL = "";
				if (ButtonsIcons.existskey(ButtonId)) ButtonIconURL = ButtonsIcons[ButtonId];
				// if (ButtonId == "GT_StoragePlayer" && PrevAlbumCover != "") ButtonIconURL = PrevAlbumCover;
				SetQuadStyle(Quad_MenuButtonIcon, ButtonIconURL);

				// Set teams emblems visibility
				Frame_MenuButtonTeams.Visible = ButtonId == "LibPM_ChangeTeam" && UseClans;

				// Spectator mode button check
				Label_IsSpectatorClientMode.Visible = ButtonId == "LibPM_Spectator";
				if (Label_IsSpectatorClientMode.Visible) {
					if (IsSpectatorClient) Label_IsSpectatorClientMode.Value = "";
					else Label_IsSpectatorClientMode.Value = "";
				}

				// Hide icon for team and character change buttons
				Quad_MenuButtonIcon.Visible = !Frame_MenuButtonTeams.Visible;

				declare Text QuadButtonId for Quad_MenuButtonCard;
				QuadButtonId = ButtonId;
			}

			// ---------------------------------- //
			// Adjust window position
			Frame_PauseMenuTiles.RelativePosition_V3.Y = -TotalHeight;
			TotalHeight += 3 + ((ButtonsIds.count - 1) / 3 + 1) * 19.;

			Frame_BottomButtonsRow.RelativePosition_V3.Y = -TotalHeight;
			TotalHeight += 10.;
			Frame_PauseMainWindow.RelativePosition_V3.Y = TotalHeight / 2.;
		}
	}
}
***

{{{Translations::InjectInManialink(RequiredTranslations)}}}
{{{ManialinkTools::Functions(["SetQuadStyle"])}}}
{{{Bindings::Functions()}}}

// ---------------------------------- //
/** Get an user-friendly name of a key.
 *
 *	@param	_KeyId	Id of the key to get name.
 *
 *	@return		Name of the key.
 */
Text GeyKeyName(Text _KeyId) {
	declare KeysNames = [
		"Capital" => "Caps Lock", "LWin" => "Left Windows", "RWin" => "Right Windows",
		"Numpad1" => "Num. 1", "Numpad2" => "Num. 2", "Numpad3" => "Num. 3", "Numpad4" => "Num. 4",
		"Numpad5" => "Num. 5", "Numpad6" => "Num. 6", "Numpad7" => "Num. 7", "Numpad8" => "Num. 8",
		"Numpad9" => "Num. 9", "Numpad0" => "Num. 0", "NumpadSubstract" => "Num. -",
		"NumpadDivide" => "Num. /", "NumpadMultiply" => "Num. *", "NumpadAdd" => "Num. +",
		"Return" => "Enter", "Prior" => "Page up", "Next" => "Page down", "AppMenu" => "Context",
		"Apostrophe" => "~", "Equals" => "=", "Minus" => "[", "LBracket" => "]",
		"RBracket" => ";", "Grave" => "'", "Backslash" => "\\", "Comma" => "Period", "Period" => "/"
	];
	if (!KeysNames.existskey(_KeyId)) return _KeyId;
	return KeysNames[_KeyId];
}

// ---------------------------------- //
/** Get the current value of a setting.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		Setting current value.
 */
Text GetSettingValue(Integer _SettingId) {
{{{SettingsDeclarations}}}

	switch (_SettingId) {
		case -1 : return ""; ///< Security
{{{SettingsGetter}}}
		default : return "";
	}
	return "";
}

// ---------------------------------- //
/** Set new value of a setting.
 *
 *	@param	_SettingId		Id of the setting.
 *	@param	_SettingValue	New value the setting.
 */
Void SetSettingValue(Integer _SettingId, Text _SettingValue) {
{{{SettingsDeclarations}}}

	switch (_SettingId) {
		case -1 : return; ///< Security
{{{SettingsSetter}}}
		default : return;
	}
}

// ---------------------------------- //
/** Get the description of a setting.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		Setting description.
 */
Text GetSettingDescription(Integer _SettingId) {
	declare G_LibPauseMenu_TitleSettingsDesc = {{{Dump_SettingsDesc}}};
	if (!G_LibPauseMenu_TitleSettingsDesc.existskey(_SettingId)) return "";
	return G_LibPauseMenu_TitleSettingsDesc[_SettingId];
}

// ---------------------------------- //
/** Get the group id of a setting.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		Setting group id.
 */
Text GetSettingGroup(Integer _SettingId) {
	declare G_LibPauseMenu_TitleSettingsGroup = {{{Dump_SettingsGroup}}};
	if (!G_LibPauseMenu_TitleSettingsGroup.existskey(_SettingId)) return "";
	return G_LibPauseMenu_TitleSettingsGroup[_SettingId];
}

// ---------------------------------- //
/** Get the variable type of a setting.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		Setting variable type.
 */
Text GetSettingType(Integer _SettingId) {
	declare G_LibPauseMenu_TitleSettingsType = {{{Dump_SettingsType}}};
	if (!G_LibPauseMenu_TitleSettingsType.existskey(_SettingId)) return "";
	return G_LibPauseMenu_TitleSettingsType[_SettingId];
}

// ---------------------------------- //
/** Check if a Boolean setting should appear inverted.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		True, if the setting is inverted.
 */
Boolean IsSettingInverted(Integer _SettingId) {
	declare G_LibPauseMenu_TitleSettingsInvert = {{{Dump_SettingsInvert}}};
	if (!G_LibPauseMenu_TitleSettingsInvert.existskey(_SettingId)) return False;
	return G_LibPauseMenu_TitleSettingsInvert[_SettingId];
}

// ---------------------------------- //
/** Get the default value of a setting.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		Setting default value.
 */
Text GetSettingDefault(Integer _SettingId) {
	declare G_LibPauseMenu_TitleSettingsDefault = {{{Dump_SettingsDefault}}};
	if (!G_LibPauseMenu_TitleSettingsDefault.existskey(_SettingId)) return "";
	return G_LibPauseMenu_TitleSettingsDefault[_SettingId];
}

// ---------------------------------- //
/** Get the possible values of a setting.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		Setting enumeration values.
 */
Text[] GetSettingEnumValues(Integer _SettingId) {
	declare G_LibPauseMenu_TitleSettingsEnumVal = {{{Dump_SettingsEnumVal}}};
	if (!G_LibPauseMenu_TitleSettingsEnumVal.existskey(_SettingId)) return Text[];
	return G_LibPauseMenu_TitleSettingsEnumVal[_SettingId];
}

// ---------------------------------- //
/** Get the names of possible values of a setting.
 *
 *	@param	_SettingId	Id of the setting.
 *
 *	@return		Setting enumeration names.
 */
Text[] GetSettingEnumNames(Integer _SettingId) {
	declare G_LibPauseMenu_TitleSettingsEnumName = {{{Dump_SettingsEnumName}}};
	if (!G_LibPauseMenu_TitleSettingsEnumName.existskey(_SettingId)) return Text[];
	return G_LibPauseMenu_TitleSettingsEnumName[_SettingId];
}

// ---------------------------------- //
/** Parse the Mania Exchange API response.
 *
 *	@param	_Document	Mania Exchange response XML document.
 *
 *	@return		Thumbnail URL.
 */
Integer Private_ParseMXResults(CXmlDocument _Document) {
	if (_Document == Null || _Document.Root == Null) return 0;

	foreach (MapNode in _Document.Root.Children) {
		foreach (Property in MapNode.Children) {
			if (Property.Name == "TrackID") return TL::ToInteger(Property.TextContents);
			if (Property.Name == "MapID") return TL::ToInteger(Property.TextContents);
		}
	}

	return 0;
}

// ---------------------------------- //
/** Parse the ManiaPlanet WS response.
 *
 *	@param	_Document	ManiaPlanet WS response XML document.
 *
 *	@return		Thumbnail URL.
 */
Text Private_ParseMPWSResult(CXmlDocument _Document) {
	if (_Document == Null || _Document.Root == Null) return "";
	foreach (Node in _Document.Root.Children) {
		if (Node.Name != "thumbnail_url") continue;
		return Node.TextContents;
	}
	return "";
}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>
	""";
}

// ---------------------------------- //
/** Load settings from XML document.
 *
 *	@param	_SettingsXML	The document to load.
 */
Void Private_LoadTitleSettings(CXmlDocument _SettingsXML) {
	if (_SettingsXML == Null || _SettingsXML.Root == Null || _SettingsXML.Root.Name != "titleSettings") return;
	
	foreach (Node in _SettingsXML.Root.Children) switch (Node.Name) {
		// ---------------------------------- //
		// Settings groups
		case "groups" : foreach (Group in Node.Children) {
			declare GroupId 	= Group.GetAttributeText("id", "");
			declare GroupName 	= Group.GetAttributeText("name", "");

			if (GroupId == "" || GroupName == "") continue;
			G_LibPauseMenu_TitleSettingsGroups[GroupId] = GroupName;
		}
		// ---------------------------------- //
		// Available settings
		case "settings" : foreach (I => Setting in Node.Children) {
			G_LibPauseMenu_TitleSettingsNames[I]	= Setting.GetAttributeText("name", "");
			G_LibPauseMenu_TitleSettingsDesc[I]		= Setting.GetAttributeText("description", "");
			G_LibPauseMenu_TitleSettingsGroup[I]	= Setting.GetAttributeText("group", "");
			G_LibPauseMenu_TitleSettingsType[I]		= Setting.GetAttributeText("type", "");
			G_LibPauseMenu_TitleSettingsDefault[I]	= Setting.GetAttributeText("default", "");
			G_LibPauseMenu_TitleSettingsInvert[I]	= Setting.GetAttributeBoolean("inverted", False);

			// ---------------------------------- //
			// Enumerators
			if (Setting.Children.count > 0) {
				G_LibPauseMenu_TitleSettingsEnumVal[I] = Text[];
				G_LibPauseMenu_TitleSettingsEnumName[I] = Text[];

				foreach (Option in Setting.Children) {
					G_LibPauseMenu_TitleSettingsEnumVal[I].add(Option.GetAttributeText("value", ""));
					G_LibPauseMenu_TitleSettingsEnumName[I].add(Option.GetAttributeText("name", ""));
				}
			}
		}
		// ---------------------------------- //
		// Available key bindings
		case "bindings" : foreach (I => Binding in Node.Children) {
			G_LibPauseMenu_KeyBindingsNames[I]		= Binding.GetAttributeText("name", "");
			G_LibPauseMenu_KeyBindingsDesc[I]		= Binding.GetAttributeText("description", "");
			G_LibPauseMenu_KeyBindingsDefault[I]	= Binding.GetAttributeText("default", "");
		}
	}
}

// ---------------------------------- //
/// Trigger custom teams data update on client side.
Void Private_TriggerTeamsUpdate() {
	declare netwrite Integer Net_LibPauseMenu_CustomTeamsUpdate for Teams[0];
	Net_LibPauseMenu_CustomTeamsUpdate = Now;
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script.
 *
 *	@return		The version number of the script.
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script.
 *
 *	@return		The name of the script.
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Set the quit button availability.
 *
 *	@param	_ButtonAvailable	If True, the quit button is available.
 */
Void SetQuitButtonAvailable(Boolean _ButtonAvailable) {
	declare netwrite Boolean Net_LibPauseMenu_DisableQuitButton for Teams[0];
	Net_LibPauseMenu_DisableQuitButton = !_ButtonAvailable;
}

// ---------------------------------- //
/** Set the label of a button.
 *
 *	@param	_ButtonId		Id of the buton to set label.
 *	@param	_ButtonLabel	Text displayed on the button.
 */
Void SetButtonLabel(Text _ButtonId, Text _ButtonLabel) {
	if (!G_LibPauseMenu_CreatedButtons.exists(_ButtonId)) return;
	G_LibPauseMenu_ButtonsLabels[_ButtonId] = _ButtonLabel;
}

// ---------------------------------- //
/** Set the icon of a button.
 *
 *	@param	_ButtonId		Id of the buton to set icon.
 *	@param	_ButtonIcon		Icon displayed on the button.
 */
Void SetButtonIcon(Text _ButtonId, Text _ButtonIcon) {
	if (!G_LibPauseMenu_CreatedButtons.exists(_ButtonId)) return;
	G_LibPauseMenu_ButtonsIcons[_ButtonId] = _ButtonIcon;
}

// ---------------------------------- //
/** Set the offset of a button.
 *
 *	@param	_ButtonId		Id of the buton to set offset.
 *	@param	_ButtonOffset	Sorting order of the button in pause menu.
 */
Void SetButtonOffset(Text _ButtonId, Real _ButtonOffset) {
	if (!G_LibPauseMenu_CreatedButtons.exists(_ButtonId)) return;
	G_LibPauseMenu_ButtonsOffsets[_ButtonId] = _ButtonOffset;
	G_LibPauseMenu_ButtonsOffsets = G_LibPauseMenu_ButtonsOffsets.sort();
}

// ---------------------------------- //
/** Set the script of a button.
 *
 *	@param	_ButtonId		Id of the buton to set script.
 *	@param	_ButtonScript	Script running when button is clicked.
 */
Void SetButtonScript(Text _ButtonId, Text _ButtonScript) {
	if (!G_LibPauseMenu_CreatedButtons.exists(_ButtonId)) return;
	G_LibPauseMenu_ButtonsScripts[_ButtonId] = _ButtonScript;
}

// ---------------------------------- //
/** Set the button visibility.
 *
 *	@param	_ButtonId		Id of the buton to change its visibility.
 *	@param	_ButtonVisible	If True the button will be wisible.
 */
Void SetButtonVisibility(Text _ButtonId, Boolean _ButtonVisible) {
	if (!G_LibPauseMenu_CreatedButtons.exists(_ButtonId)) return;

	declare netwrite Text[] Net_LibPauseMenu_DisabledButtons for Teams[0];
	declare netwrite Integer Net_LibPauseMenu_LastButtonsUpdate for Teams[0];
	Net_LibPauseMenu_LastButtonsUpdate = Now;

	if (_ButtonVisible) {
		declare Removed = Net_LibPauseMenu_DisabledButtons.remove(_ButtonId);
	}
	else if (!Net_LibPauseMenu_DisabledButtons.exists(_ButtonId)) {
		Net_LibPauseMenu_DisabledButtons.add(_ButtonId);
	}
}

// ---------------------------------- //
/** Create a new button in the pause menu.
 *
 *	@param	_ButtonId		Id of the new button.
 *	@param	_ButtonLabel	Text displayed on the button.
 *	@param	_ButtonIcon		Icon displayed on the button.
 *	@param	_ButtonOffset	Sorting offset of the button.
 */
Void CreateButton(Text _ButtonId, Text _ButtonLabel, Text _ButtonIcon, Real _ButtonOffset) {
	if (G_LibPauseMenu_CreatedButtons.exists(_ButtonId)) return;
	G_LibPauseMenu_CreatedButtons.add(_ButtonId);

	SetButtonLabel(_ButtonId, _ButtonLabel);
	SetButtonIcon(_ButtonId, _ButtonIcon);
	SetButtonOffset(_ButtonId, _ButtonOffset);
	SetButtonVisibility(_ButtonId, True);

	declare ButtonScript = "";
	switch (_ButtonId) {
		case "LibPM_ModeHelp" : ButtonScript = "ShowModeHelp();";
		case "LibPM_Spectator" : ButtonScript = "CloseInGameMenu(::EInGameMenuResult::Resume); ActionToTrigger = \"maniaplanet:togglespec\";";
		case "LibPM_SaveReplay" : ButtonScript = "CloseInGameMenu(::EInGameMenuResult::Resume); ActionToTrigger = \"maniaplanet:savereplay\";";
		case "LibPM_ChangeTeam" : ButtonScript = "PauseActiveContext = C_LibPauseMenu_ContextSwitchTeam;";
		case "LibPM_ManageServer" : ButtonScript = "CloseInGameMenu(::EInGameMenuResult::ServerSettings);";
		//case "LibPM_ManageServer" : ButtonScript = "PauseActiveContext = C_LibPauseMenu_ContextManageServer;";
		case "LibPM_TitleSettings" : ButtonScript = "PauseActiveContext = C_LibPauseMenu_ContextTitleSettings;";
		case "LibPM_Advanced" : ButtonScript = "CloseInGameMenu(::EInGameMenuResult::AdvancedMenu);";
	}
	SetButtonScript(_ButtonId, ButtonScript);
}

// ---------------------------------- //
/** Destroy a button.
 *
 *	@param	_ButtonId	Id of the button to destroy.
 */
Void DestroyButton(Text _ButtonId) {
	if (!G_LibPauseMenu_CreatedButtons.exists(_ButtonId)) return;

	declare Boolean Removed;
	G_LibPauseMenu_CreatedButtons	.remove(_ButtonId);
	G_LibPauseMenu_ButtonsLabels	.removekey(_ButtonId);
	G_LibPauseMenu_ButtonsIcons		.removekey(_ButtonId);
	G_LibPauseMenu_ButtonsOffsets	.removekey(_ButtonId);
	G_LibPauseMenu_ButtonsScripts	.removekey(_ButtonId);
}

// ---------------------------------- //
/// Create default pause menu buttons.
Void CreateStandardButtons() {
	CreateButton("LibPM_ModeHelp", _("Help"), "UIConstruction_Buttons|Help", 0.);
	CreateButton("LibPM_Spectator", _("Spectator"), "Icons64x64_1|CameraLocal", 1.);
	CreateButton("LibPM_SaveReplay", _("Save replay"), "Icons64x64_1|MediaVideoDownloading", 2.);
	CreateButton("LibPM_ChangeTeam", _("Change team"), "Icons128x32_1|RT_Team", 3.);
	CreateButton("LibPM_ManageServer", _("Manage server"), "Icons64x64_1|IconServers", 4.);
	CreateButton("LibPM_TitleSettings", _("Title settings"), "Icons128x128_1|ProfileAdvanced", 5.);
	//CreateButton("LibPM_Advanced", _("Advanced options"), "Icons128x128_1|Options", 5.);
}

// ---------------------------------- //
/** Hide buttons unwanted for a solo game.
 *
 *	@param	_IsSolo		If True, unnecessary buttons will be hidden.
 */
Void SetSoloMode(Boolean _IsSolo) {
	SetButtonVisibility("LibPM_Spectator", !_IsSolo);
	SetButtonVisibility("LibPM_ChangeTeam", !_IsSolo);
	SetButtonVisibility("LibPM_ManageServer", !_IsSolo);
	SetButtonVisibility("LibPM_Advanced", !_IsSolo);
}

Void SetSoloMode() {
	SetSoloMode(True);
}

// ---------------------------------- //
/** Set the map information visibility.
 *
 *	@param	_MapInfoVisible		Visibility of the map information.
 */
Void SetMapInfoVisibility(Boolean _MapInfoVisible) {
	declare netwrite Boolean Net_LibPauseMenu_HideMapInfo for Teams[0];
	Net_LibPauseMenu_HideMapInfo = !_MapInfoVisible;
}

// ---------------------------------- //
/** Set the number of custom teams.
 *
 *	@param	_NbCustomTeams		Custom teams number.
 */
Void SetNbCustomTeams(Integer _NbCustomTeams) {
	Private_TriggerTeamsUpdate();

	declare netwrite Integer Net_LibPauseMenu_NbCustomTeams for Teams[0];
	Net_LibPauseMenu_NbCustomTeams = _NbCustomTeams;
}

// ---------------------------------- //
/** Set the color of a custom team.
 *
 *	@param	_TeamId		Id of the custom team.
 *	@param	_TeamColor	New color of the team.
 */
Void SetCustomTeamColor(Integer _TeamId, Vec3 _TeamColor) {
	if (_TeamId <= 0) return;
	Private_TriggerTeamsUpdate();

	declare netwrite Vec3[Integer] Net_LibPauseMenu_CustomTeamsColors for Teams[0];
	Net_LibPauseMenu_CustomTeamsColors[_TeamId] = _TeamColor;
}

// ---------------------------------- //
/** Set the name of a custom team.
 *
 *	@param	_TeamId		Id of the custom team.
 *	@param	_TeamName	New name of the team.
 */
Void SetCustomTeamName(Integer _TeamId, Text _TeamName) {
	if (_TeamId <= 0) return;
	Private_TriggerTeamsUpdate();

	declare netwrite Text[Integer] Net_LibPauseMenu_CustomTeamsNames for Teams[0];
	Net_LibPauseMenu_CustomTeamsNames[_TeamId] = _TeamName;
}

// ---------------------------------- //
/** Set number of players in a custom team.
 *
 *	@param	_TeamId			Id of the custom team.
 *	@param	_TeamNbPlayers	Amount of players in the team.
 */
Void SetCustomTeamNbPlayers(Integer _TeamId, Integer _TeamNbPlayers) {
	if (_TeamId <= 0) return;
	Private_TriggerTeamsUpdate();

	declare netwrite Integer[Integer] Net_LibPauseMenu_CustomTeamsNbPlayers for Teams[0];
	Net_LibPauseMenu_CustomTeamsNbPlayers[_TeamId] = _TeamNbPlayers;
}

// ---------------------------------- //
/** Get the custom teams change requests.
 *
 *	@return		Requests of the players changing custom team.
 */
Integer[Ident] CustomTeamChangeRequests() {
	if (G_LibPauseMenu_CustomTeamChangeRequests.count > 0)
		G_LibPauseMenu_CustomTeamChangeRequests.clear();
	
	// ---------------------------------- //
	// Get the new requests
	foreach (Player in AllPlayers) {
		if (Player.Score == Null || Player.User.IsFakeUser) continue;
		declare UI <=> UIManager.GetUI(Player);
		if (UI == Null) continue;

		declare netread Integer Net_LibPauseMenu_LastTeamChangeTime for UI;
		declare Integer PrevTeamChangeTime for Player;
		if (PrevTeamChangeTime == Net_LibPauseMenu_LastTeamChangeTime) continue;
		PrevTeamChangeTime = Net_LibPauseMenu_LastTeamChangeTime;
		
		declare netread Integer Net_LibPauseMenu_RequestedCustomClan for UI;
		G_LibPauseMenu_CustomTeamChangeRequests[Player.Id] = Net_LibPauseMenu_RequestedCustomClan;
	}
	
	return G_LibPauseMenu_CustomTeamChangeRequests;
}

// ---------------------------------- //
/** Load custom title pack settings list.
 *
 *	@param	_SettingsURL	URL of the settings XML file.
 */
Void LoadTitleSettings(Text _SettingsURL) {
	if (!Http.IsValidUrl(_SettingsURL)) return;

	if (G_LibPauseMenu_TitleSettingsReq != Null) {
		Http.Destroy(G_LibPauseMenu_TitleSettingsReq);
		G_LibPauseMenu_TitleSettingsReq = Null;
	}

	G_LibPauseMenu_TitleSettingsReq <=> Http.CreateGet(_SettingsURL, False);
	G_LibPauseMenu_TitleSettingsReqStart = Now;
}

// ---------------------------------- //
/** Wait for the settings to load.
 *
 *	@return		True, if the document is loading.
 */
Boolean LoadingLoop() {
	if (G_LibPauseMenu_TitleSettingsReq == Null) return False;
	if (Now < G_LibPauseMenu_TitleSettingsReqStart + 5000 && !G_LibPauseMenu_TitleSettingsReq.IsCompleted) return True;

	if (G_LibPauseMenu_TitleSettingsReq.IsCompleted) {
		declare SettingsXML <=> Xml.Create(G_LibPauseMenu_TitleSettingsReq.Result);
		Private_LoadTitleSettings(SettingsXML);
		Xml.Destroy(SettingsXML);
	}
	
	Http.Destroy(G_LibPauseMenu_TitleSettingsReq);
	G_LibPauseMenu_TitleSettingsReq = Null;
	G_LibPauseMenu_TitleSettingsReqStart = -1;
	return False;
}

// ---------------------------------- //
/// Unload the library.
Void Unload() {
	Layers::Detach(C_LibPauseMenu_ManialinkLayerId);
	Layers::Destroy(C_LibPauseMenu_ManialinkLayerId);

	G_LibPauseMenu_CreatedButtons	.clear();
	G_LibPauseMenu_ButtonsOffsets	.clear();
	G_LibPauseMenu_ButtonsLabels	.clear();
	G_LibPauseMenu_ButtonsIcons		.clear();
	G_LibPauseMenu_ButtonsScripts	.clear();
	G_LibPauseMenu_TitleSettingsGroups		.clear();
	G_LibPauseMenu_TitleSettingsNames		.clear();
	G_LibPauseMenu_TitleSettingsDesc		.clear();
	G_LibPauseMenu_TitleSettingsGroup		.clear();
	G_LibPauseMenu_TitleSettingsType		.clear();
	G_LibPauseMenu_TitleSettingsDefault		.clear();
	G_LibPauseMenu_TitleSettingsEnumVal		.clear();
	G_LibPauseMenu_TitleSettingsEnumName	.clear();
	G_LibPauseMenu_TitleSettingsInvert		.clear();
	G_LibPauseMenu_KeyBindingsNames		.clear();
	G_LibPauseMenu_KeyBindingsDesc		.clear();
	G_LibPauseMenu_KeyBindingsDefault	.clear();
	G_LibPauseMenu_CustomTeamChangeRequests.clear();

	declare netwrite Text[] Net_LibPauseMenu_DisabledButtons for Teams[0];
	declare netwrite Integer Net_LibPauseMenu_LastButtonsUpdate for Teams[0];
	Net_LibPauseMenu_DisabledButtons.clear();
	Net_LibPauseMenu_LastButtonsUpdate = -1;

	if (G_LibPauseMenu_TitleSettingsReq != Null) {
		Http.Destroy(G_LibPauseMenu_TitleSettingsReq);
		G_LibPauseMenu_TitleSettingsReq = Null;
		G_LibPauseMenu_TitleSettingsReqStart = -1;
	}
}

// ---------------------------------- //
/// Load the library.
Void Load() {
	Unload();
	CreateStandardButtons();
	SetMapInfoVisibility(True);

	Layers::Create(C_LibPauseMenu_ManialinkLayerId);
	Layers::SetType(C_LibPauseMenu_ManialinkLayerId, CUILayer::EUILayerType::InGameMenu);
}

// ---------------------------------- //
/** Load the library with custom settings.
 *
 *	@param	_SettingsURL	URL of the settings XML file.
 */
Void Load(Text _SettingsURL) {
	Load();
	LoadTitleSettings(_SettingsURL);
}

// ---------------------------------- //
/** Build the pause menu.
 *
 *	@param	_FontMedium		The fon used in the pause menu.
 */
Void Build(Text _FontMedium) {
	Layers::Update(C_LibPauseMenu_ManialinkLayerId, Private_CreateManialinkPauseMenu(_FontMedium));
	Layers::Attach(C_LibPauseMenu_ManialinkLayerId);
}

// ---------------------------------- //
/// Build the pause menu with default font.
Void Build() { Build(""); }