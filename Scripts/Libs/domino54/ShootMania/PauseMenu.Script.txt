// -------------------------------------- //
//  LIBRARY PAUSE MENU by domino54        //
//  script version: 2016-06-23            //
// -------------------------------------- //

/**
 *	Works only in the title pack "GalaxyTitles@domino54".
 *	This library creates customized pause menu, stylized
 *	for the GalaxyTitles title pack. Main window and team
 *	selection are replaced, mode can also display rules
 *	reminder when new player plays the mode for the first
 *	time.
 */

#Const Version		"2016-06-23"
#Const ScriptName	"PauseMenu.Script.txt"

#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Nadeo/Manialink.Script.txt" as Manialink
#Include "Libs/domino54/Translations.Script.txt" as Translations

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ImgBase "file://Media/Manialinks/ShootMania/GalaxyTitles/"

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
/** Create manialink for the pause menu layer
 *
 *	@return		The pause menu layer
 */
Text Private_CreateManialinkPauseMenu() {
	declare netwrite Text Net_LibPauseMenu_HelpModeObjectives for Teams[0];
	return """
<manialink version="2" name="LibPauseMenu:Pause">
<stylesheet>
	<style class="buttonFont" halign="center" valign="center2" textsize="2" textcolor="BBB" textfont="Eurostile" textprefix="$t"/>
</stylesheet>

<!-- Pause menu button model -->
<framemodel id="FrameModel_PauseButton">
	<quad sizen="60 7" class="hoverButton colorizable" opacity="0" ScriptEvents="1"/>
	<label posn="30 -3.5 .2" sizen="52" class="buttonFont" id="Label_ButtonText"/>
	<quad posn="58 -3.5 .2" sizen="3 3" halign="right" valign="center" colorize="AAA" id="Quad_ButtonCheck"/>
</framemodel>

<!-- Background blur -->
<quad posn="0 0 49" sizen="320 180" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur"/>

<!-- Pause menu window -->
<frame id="Frame_PauseWindow" posn="-30 32 50">
	<quad sizen="60 64" bgcolor="000" opacity=".75" ScriptEvents="1"/>
	<quad sizen="60 64" style="Bgs1" substyle="BgDialogBlur"/>
	<quad posn="-2.5 2.5 -.1" sizen="130 138" scale=".5" style="Bgs1InRace" substyle="BgButtonShadow"/>
	
	<!-- Title block -->
	<frame posn="30 -5 1">
		<quad sizen="59 9" halign="center" valign="center" bgcolor="FFF"/>
		<label
			posn="0 0 .1" sizen="50" halign="center" valign="center2"
			textsize="2" textcolor="000" textfont="Eurostile_Bold" textprefix="$t" text="Pause" translate="1"
		/>
	</frame>
	
	<!-- Pause buttons -->
	<frame id="Frame_PauseButtons" posn="0 -11 1">
		<frameinstance modelid="FrameModel_PauseButton" id="Frame_PauseButton#0" hidden="1"/>
		<frameinstance modelid="FrameModel_PauseButton" id="Frame_PauseButton#1" hidden="1"/>
		<frameinstance modelid="FrameModel_PauseButton" id="Frame_PauseButton#2" hidden="1"/>
		<frameinstance modelid="FrameModel_PauseButton" id="Frame_PauseButton#3" hidden="1"/>
		<frameinstance modelid="FrameModel_PauseButton" id="Frame_PauseButton#4" hidden="1"/>
		<frameinstance modelid="FrameModel_PauseButton" id="Frame_PauseButton#5" hidden="1"/>
	</frame>
	
	<!-- Resume and quit buttons -->
	<frame id="Frame_ButtonResume" posn="6 -54 1">
		<quad sizen="24 8" class="hoverButton colorizable" opacity="0" id="Quad_ButtonResume" ScriptEvents="1"/>
		<label posn="12 -4 .2" class="buttonFont" text="Resume" translate="1" id="Label_ButtonText"/>
	</frame>
	<frame id="Frame_ButtonQuit" posn="30 -54 1">
		<quad sizen="24 8" class="hoverButton colorizable" opacity="0" id="Quad_ButtonQuit" ScriptEvents="1"/>
		<label posn="12 -4 .2" class="buttonFont" text="Quit" translate="1" id="Label_ButtonText"/>
	</frame>
</frame>

<!-- Team card frame model -->
<framemodel id="FrameModel_TeamCard">
	<quad halign="center" sizen="49 49" opacity=".125" id="Quad_CardBackground" ScriptEvents="1"/>
	<quad posn="0 -16 .1" sizen="18 18" halign="center" valign="center" style="Emblems" substyle="#0" id="Quad_TeamEmblem"/>
	<label
		posn="0 -28 .1" sizen="44" halign="center" valign="center2" id="Label_TeamName"
		textemboss="1" textcolor="FFF" textfont="Eurostile"
	/>
	<label
		posn="0 -33 .1" halign="center" valign="center2" id="Label_TeamNbPlayers"
		textsize="1" textemboss="1" textcolor="FFF" textfont="Eurostile_Bold"
	/>
	<label
		posn="0 -40 .1" halign="center" valign="center2" id="Label_JoinTeamText" opacity="0"
		textsize="2" textemboss="1" textcolor="FFF" textfont="Eurostile_Bold" textprefix="$t" text="Join" translate="1"
	/>
</framemodel>

<!-- Team selection window -->
<frame id="Frame_TeamSelection" posn="-50 36 50" hidden="1">
	<quad sizen="100 72" bgcolor="000" opacity=".75" ScriptEvents="1"/>
	<quad sizen="100 72" style="Bgs1" substyle="BgDialogBlur"/>
	<quad posn="-2.5 2.5 -.1" sizen="210 154" scale=".5" style="Bgs1InRace" substyle="BgButtonShadow"/>
	
	<!-- Title block -->
	<frame posn="50 -5 1">
		<quad sizen="99 9" halign="center" valign="center" bgcolor="FFF"/>
		<label
			posn="0 0 .1" sizen="90" halign="center" valign="center2"
			textsize="2" textcolor="000" textfont="Eurostile_Bold" textprefix="$t" text="Choose your team" translate="1"
		/>
	</frame>
	
	<!-- Teams cards -->
	<frame posn="50 -11 1">
		<frameinstance modelid="FrameModel_TeamCard" id="Frame_TeamCard#0" posn="-25"/>
		<frameinstance modelid="FrameModel_TeamCard" id="Frame_TeamCard#1" posn="25"/>
	</frame>
	
	<!-- Return button -->
	<frame id="Frame_TeamsButtonReturn" posn="38 -62 1">
		<quad sizen="24 8" class="hoverButton colorizable" opacity="0" id="Quad_TeamsButtonReturn" ScriptEvents="1"/>
		<label posn="12 -4 .2" class="buttonFont" text="Return" translate="1" id="Label_ButtonText"/>
	</frame>
</frame>

<!-- Mode help window -->
<frame id="Frame_HelpWindow" posn="-70 0 50" hidden="1">
	<quad sizen="140" bgcolor="000" opacity=".75" ScriptEvents="1" id="Quad_HelpBgColor"/>
	<quad sizen="140" style="Bgs1" substyle="BgDialogBlur" id="Quad_HelpBgBlur"/>
	<quad posn="-2.5 2.5 -.1" sizen="290" scale=".5" style="Bgs1InRace" substyle="BgButtonShadow" id="Quad_HelpBgShadow"/>
	
	<!-- Title block -->
	<frame posn="70 -5 1">
		<quad sizen="139 9" halign="center" valign="center" bgcolor="FFF"/>
		<label
			posn="0 0 .1" sizen="130" halign="center" valign="center2"
			textsize="2" textcolor="000" textfont="Eurostile_Bold" textprefix="$t" id="Label_HelpModeName"
		/>
	</frame>
	
	<!-- Mode objectives -->
	<label
		posn="70 0 .1" sizen="120" halign="center" id="Label_HelpModeObjectives"
		textsize="2" textcolor="FFF" textfont="Eurostile" autonewline="1"
	/>
	
	<!-- Resume button -->
	<frame id="Frame_ButtonHelpResume" posn="58 0 .1">
		<quad sizen="24 8" class="hoverButton colorizable" opacity="0" id="Quad_ButtonHelpResume" ScriptEvents="1"/>
		<label posn="12 -4 .2" class="buttonFont" text="OK" id="Label_ButtonText"/>
	</frame>
</frame>

<script><!--
/**
 *	LibPauseMenu: Pause
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_DefaultInterfaceColor <1., .875, 0.>
#Const C_LabelsValues [_("Help"), _("Spectator"), _("Change team"), _("Save replay"), _("Manage server"), _("Advanced options")]

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Vec3 G_InterfaceColor;

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_PauseWindow <=> (Page.GetFirstChild("Frame_PauseWindow") as CMlFrame);
declare Frame_TeamSelection <=> (Page.GetFirstChild("Frame_TeamSelection") as CMlFrame);
declare Frame_HelpWindow <=> (Page.GetFirstChild("Frame_HelpWindow") as CMlFrame);

declare CMlFrame[] Frame_PauseButtons;
for (I, 0, 5) Frame_PauseButtons.add((Page.GetFirstChild("Frame_PauseButton#"^I) as CMlFrame));

declare CMlFrame[] Frame_TeamsCards;
for (I, 0, 1) Frame_TeamsCards.add((Page.GetFirstChild("Frame_TeamCard#"^I) as CMlFrame));

// ---------------------------------- //
// Help window
declare Quad_HelpBgColor <=> (Page.GetFirstChild("Quad_HelpBgColor") as CMlQuad);
declare Quad_HelpBgBlur <=> (Page.GetFirstChild("Quad_HelpBgBlur") as CMlQuad);
declare Quad_HelpBgShadow <=> (Page.GetFirstChild("Quad_HelpBgShadow") as CMlQuad);
declare Label_HelpModeName <=> (Page.GetFirstChild("Label_HelpModeName") as CMlLabel);
declare Label_HelpModeObjectives <=> (Page.GetFirstChild("Label_HelpModeObjectives") as CMlLabel);
declare Frame_ButtonHelpResume <=> (Page.GetFirstChild("Frame_ButtonHelpResume") as CMlFrame);

// ---------------------------------- //
// Get all controls that ban be colorized
declare CMlControl[] ColorizableControls;
Page.GetClassChildren("colorizable", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare TargetControl = Control;
	ColorizableControls.add(TargetControl);
}

// ---------------------------------- //
// Get all buttons
declare CMlFrame[] Frame_Buttons;
Frame_Buttons = Frame_PauseButtons;
Frame_Buttons.add((Page.GetFirstChild("Frame_ButtonResume") as CMlFrame));
Frame_Buttons.add((Page.GetFirstChild("Frame_ButtonQuit") as CMlFrame));
Frame_Buttons.add((Page.GetFirstChild("Frame_TeamsButtonReturn") as CMlFrame));
Frame_Buttons.add(Frame_ButtonHelpResume);

// ---------------------------------- //
// 
declare persistent Text[] Persistent_LibPauseMenu_ModesWithRulesRead for LocalUser;

// ---------------------------------- //
// Netcode
declare netread Text Net_LibPauseMenu_HelpModeName for Teams[0];
declare netread Text Net_LibPauseMenu_HelpModeObjectives for Teams[0];
declare netread Text Net_LibPauseMenu_HelpModeImage for Teams[0];

// ---------------------------------- //
// Variables
declare UpdatePauseButtons = True;
declare ActionToTrigger = "";
declare UpdateWindowsVisibility = True;
declare ActiveSubWindow = "";
declare UpdateTeamsCards = True;
declare UpdateHelpWindow = 2;

/// Executable layer
declare Text[] LayerExecutableEvents for This;

/// Update
declare PrevPageIsVisible = False;
declare PrevInterfaceColor = Vec3;
declare PrevUseClans = False;
declare PrevUseForcedClans = False;
declare PrevIsSpectatorMode = False;
declare PrevTeamsColors = [0 => Vec3, 1 => Vec3];
declare PrevTeamsNames = [0 => "", 1 => ""];
declare PrevClansNbPlayers = [0 => 0, 1 => 0, 2 => 0];
declare PrevModeName = "";

// ---------------------------------- //
// Initialize
HideResumePlayingButton = True;
CloseInGameMenu(::EInGameMenuResult::Resume);
EnableMenuNavigation(True, True, Null, 0);
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Trigger page action in next tick after pause is hidden
if (!PageIsVisible && ActionToTrigger != "") {
	TriggerPageAction(ActionToTrigger);
	ActionToTrigger = "";
}

// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// On mouse click
	if (Event.Type == CMlEvent::Type::MouseClick) {
		// ---------------------------------- //
		// Resume game button
		if (Event.ControlId == "Quad_ButtonResume")
			CloseInGameMenu(::EInGameMenuResult::Resume);
		
		// ---------------------------------- //
		// Leave server button
		else if (Event.ControlId == "Quad_ButtonQuit") {
			CloseInGameMenu(::EInGameMenuResult::Resume);
			ActionToTrigger = "maniaplanet:quitserver";
		}
		// ---------------------------------- //
		// Return from team selection window
		else if (Event.ControlId == "Quad_TeamsButtonReturn") {
			UpdateWindowsVisibility = True;
			ActiveSubWindow = "";
			LayerExecutableEvents.add("PlaySound:HideDialog");
			(Event.Control as CMlQuad).Opacity = 0.;
		}
		
		// ---------------------------------- //
		// Resume game via help menu
		if (Event.ControlId == "Quad_ButtonHelpResume")
			CloseInGameMenu(::EInGameMenuResult::Resume);
		
		// ---------------------------------- //
		// Functional buttons
		foreach (I => Frame in Frame_PauseButtons) if (Frame.Controls.exists(Event.Control)) {
			(Event.Control as CMlQuad).Opacity = 0.;
			switch (I) {
				// ---------------------------------- //
				// Show mode help
				case 0 : {
					// ---------------------------------- //
					// Display custom manialink window
					if (Net_LibPauseMenu_HelpModeName != "") {
						UpdateWindowsVisibility = True;
						ActiveSubWindow = "ModeRules";
						LayerExecutableEvents.add("PlaySound:ShowDialog");
					}
					// ---------------------------------- //
					// Display legacy window
					else {
						CloseInGameMenu(::EInGameMenuResult::Resume);
						ShowModeHelp();
					}
				}
				// ---------------------------------- //
				// Toggle spectator mode
				case 1 : {
					CloseInGameMenu(::EInGameMenuResult::Resume);
					ActionToTrigger = "maniaplanet:togglespec";
				}
				// ---------------------------------- //
				// Open team selection screen
				case 2 : {
					UpdateWindowsVisibility = True;
					ActiveSubWindow = "TeamSelection";
					LayerExecutableEvents.add("PlaySound:ShowDialog");
				}
				// ---------------------------------- //
				// Save current round replay
				case 3 : {
					CloseInGameMenu(::EInGameMenuResult::Resume);
					ActionToTrigger = "maniaplanet:savereplay";
				}
				// ---------------------------------- //
				// Show advanced server settings
				case 4 : CloseInGameMenu(::EInGameMenuResult::ServerSettings);
				
				// ---------------------------------- //
				// Show advanced pause menu options
				case 5 : CloseInGameMenu(::EInGameMenuResult::AdvancedMenu);
			}
		}
		
		// ---------------------------------- //
		// Join team button
		if (Event.ControlId == "Quad_CardBackground") {
			declare RequestedClan = 0;
			foreach (I => Frame in Frame_TeamsCards) if (Frame.Controls.exists(Event.Control)) {
				declare Label_JoinTeamText <=> (Frame.GetFirstChild("Label_JoinTeamText") as CMlLabel);
				Label_JoinTeamText.Opacity = 0.;
				RequestedClan = I + 1;
			}
			(Event.Control as CMlQuad).Opacity = .125;
			
			switch (RequestedClan) {
				case 1 : JoinTeam1();
				case 2 : JoinTeam2();
			}
			
			UpdateWindowsVisibility = True;
			ActiveSubWindow = "";
			CloseInGameMenu(::EInGameMenuResult::Resume);
		}
	}
	// ---------------------------------- //
	// On mouse over
	else if (Event.Type == CMlEvent::Type::MouseOver) {
		// ---------------------------------- //
		// Hover button background
		if (Event.Control.HasClass("hoverButton")) {
			LibManialink_AnimStop(Event.Control);
			LibManialink_Anim(Event.Control, "<quad opacity=\".2\"/>", 125, "EaseOutSine");
			
			foreach (I => Frame in Frame_Buttons) if (Frame.Controls.exists(Event.Control)) {
				declare Label_ButtonText <=> (Frame.GetFirstChild("Label_ButtonText") as CMlLabel);
				LibManialink_AnimStop(Label_ButtonText);
				LibManialink_Anim(Label_ButtonText, "<label textcolor=\"FFF\"/>", 125, "EaseOutSine");
			}
		}
		
		// ---------------------------------- //
		// Hover the team join button card
		if (Event.ControlId == "Quad_CardBackground") {
			foreach (I => Frame in Frame_TeamsCards) if (Frame.Controls.exists(Event.Control)) {
				declare Quad = (Event.Control as CMlQuad);
				declare Label_JoinTeamText <=> (Frame.GetFirstChild("Label_JoinTeamText") as CMlLabel);
				
				LibManialink_AnimStop(Quad);
				LibManialink_AnimStop(Label_JoinTeamText);
				LibManialink_Anim(Quad, "<quad opacity=\".25\"/>", 250, "EaseOutSine");
				LibManialink_Anim(Label_JoinTeamText, "<quad opacity=\"1\"/>", 250, "EaseOutSine");
			}
		}
	}
	// ---------------------------------- //
	// On mouse out
	else if (Event.Type == CMlEvent::Type::MouseOut) {
		// ---------------------------------- //
		// Unfocus button background
		if (Event.Control.HasClass("hoverButton")) {
			LibManialink_AnimStop(Event.Control);
			LibManialink_Anim(Event.Control, "<quad opacity=\"0\"/>", 125, "EaseInSine");
			
			foreach (I => Frame in Frame_Buttons) if (Frame.Controls.exists(Event.Control)) {
				declare Label_ButtonText <=> (Frame.GetFirstChild("Label_ButtonText") as CMlLabel);
				LibManialink_AnimStop(Label_ButtonText);
				LibManialink_Anim(Label_ButtonText, "<label textcolor=\"AAA\"/>", 125, "EaseInSine");
			}
		}
		
		// ---------------------------------- //
		// Unfocus the team join button card
		if (Event.ControlId == "Quad_CardBackground") {
			foreach (I => Frame in Frame_TeamsCards) if (Frame.Controls.exists(Event.Control)) {
				declare Quad = (Event.Control as CMlQuad);
				declare Label_JoinTeamText <=> (Frame.GetFirstChild("Label_JoinTeamText") as CMlLabel);
				
				LibManialink_AnimStop(Quad);
				LibManialink_AnimStop(Label_JoinTeamText);
				LibManialink_Anim(Quad, "<quad opacity=\".125\"/>", 250, "EaseInSine");
				LibManialink_Anim(Label_JoinTeamText, "<quad opacity=\"0\"/>", 250, "EaseInSine");
			}
		}
	}
	// ---------------------------------- //
	// On menu navigation
	else if (Event.Type == CMlEvent::Type::MenuNavigation) {
		if (Event.MenuNavAction == CMlEvent::EMenuNavAction::Cancel) {
			// ---------------------------------- //
			// Go up one window
			if (ActiveSubWindow != "") {
				UpdateWindowsVisibility = True;
				ActiveSubWindow = "";
				LayerExecutableEvents.add("PlaySound:HideDialog");
				
				// ---------------------------------- //
				// Unfocus cards in team selection window
				foreach (Frame in Frame_TeamsCards) {
					declare Quad_CardBackground = (Frame.GetFirstChild("Quad_CardBackground") as CMlQuad);
					declare Label_JoinTeamText <=> (Frame.GetFirstChild("Label_JoinTeamText") as CMlLabel);
					Quad_CardBackground.Opacity = .125;
					Label_JoinTeamText.Opacity = 0.;
				}
			}
			// ---------------------------------- //
			// Close pause menu
			else CloseInGameMenu(::EInGameMenuResult::Resume);
			
			// ---------------------------------- //
			// Unfocus all buttons
			foreach (I => Frame in Frame_Buttons) {
				declare Label_ButtonText <=> (Frame.GetFirstChild("Label_ButtonText") as CMlLabel);
				Label_ButtonText.TextColor = TL::ToColor("AAA");
			}
		}
	}
}

// ---------------------------------- //
// Display rules when player plays the mode for the first time
if (
	!PageIsVisible && Net_LibPauseMenu_HelpModeName != "" &&
	InputPlayer != Null && InputPlayer.Position != <0., 0., 0.> &&
	!Persistent_LibPauseMenu_ModesWithRulesRead.exists(Net_LibPauseMenu_HelpModeName)
) {
	Persistent_LibPauseMenu_ModesWithRulesRead.add(Net_LibPauseMenu_HelpModeName);
	ShowInGameMenu();
	UpdateWindowsVisibility = True;
	ActiveSubWindow = "ModeRules";
}

// ---------------------------------- //
// Update pause menu
if (PageIsVisible) {
	// ---------------------------------- //
	// Clans usage change
	if (PrevUseClans != UseClans) {
		PrevUseClans = UseClans;
		UpdatePauseButtons = True;
	}
	if (PrevUseForcedClans != UseForcedClans) {
		PrevUseForcedClans = UseForcedClans;
		UpdatePauseButtons = True;
	}
	
	// ---------------------------------- //
	// Update spectator button check icon
	if (PrevIsSpectatorMode != IsSpectatorMode) {
		PrevIsSpectatorMode = IsSpectatorMode;
		UpdatePauseButtons = True;
	}
	
	// ---------------------------------- //
	// Set up pause menu buttons frames
	if (UpdatePauseButtons) {
		UpdatePauseButtons = False;
		declare TotalHeight = 0.;
		
		foreach (I => Frame in Frame_PauseButtons) {
			// ---------------------------------- //
			// Set the button text
			declare Label_ButtonText <=> (Frame.GetFirstChild("Label_ButtonText") as CMlLabel);
			Label_ButtonText.SetText(C_LabelsValues[I]);
			
			// ---------------------------------- //
			// Set button visibility
			switch (I) {
				// Toggle spectator mode
				case 1 : Frame.Visible =
					UI.SpectatorObserverMode != CUIConfig::EObserverMode::Forced &&
					UI.SpectatorObserverMode != CUIConfig::EObserverMode::Forbidden;
				
				// Change team
				case 2 : Frame.Visible = !IsSpectatorMode && UseClans && !UseForcedClans;
				
				// Other
				default : Frame.Visible = True;
			}
			
			// ---------------------------------- //
			// Set the position of visible buttons
			if (Frame.Visible) {
				Frame.RelativePosition.Y = TotalHeight;
				TotalHeight -= 7.;
			}
			
			// ---------------------------------- //
			// Set the spectator mode check icon
			if (Frame.Visible && I == 1) {
				declare Quad_ButtonCheck <=> (Frame.GetFirstChild("Quad_ButtonCheck") as CMlQuad);
				if (IsSpectatorMode) Quad_ButtonCheck.ImageUrl = "{{{C_ImgBase}}}MenuIconCheck1.png";
				else Quad_ButtonCheck.ImageUrl = "{{{C_ImgBase}}}MenuIconCheck0.png";
			}
		}
	}
	
	// ---------------------------------- //
	// Set interface color
	if (GUIPlayer != Null) {
		if (GUIPlayer.CurrentClan == 0) G_InterfaceColor = GUIPlayer.User.Color;
		else G_InterfaceColor = Teams[GUIPlayer.CurrentClan - 1].ColorPrimary;
	}
	else if (LocalUser != Null) G_InterfaceColor = LocalUser.Color;
	else G_InterfaceColor = C_DefaultInterfaceColor;
	
	// ---------------------------------- //
	// Update interface color
	if (PrevInterfaceColor != G_InterfaceColor) {
		PrevInterfaceColor = G_InterfaceColor;
		ColorizeControls(ColorizableControls, G_InterfaceColor);
	}
	
	// ---------------------------------- //
	// Team selection window
	if (ActiveSubWindow == "TeamSelection") {
		for (I, 0, 1) {
			// ---------------------------------- //
			// Update on color change
			if (PrevTeamsColors[I] != Teams[I].ColorPrimary) {
				PrevTeamsColors[I] = Teams[I].ColorPrimary;
				UpdateTeamsCards = True;
			}
			
			// ---------------------------------- //
			// Update on name change
			if (PrevTeamsNames[I] != Teams[I].Name) {
				PrevTeamsNames[I] = Teams[I].Name;
				UpdateTeamsCards = True;
			}
			
			// ---------------------------------- //
			// Update players amount
			declare ClansNbPlayers = [0 => 0, 1 => 0, 2 => 0];
			foreach (Player in Players)
				if (!Player.RequestsSpectate && !Player.IsBot) ClansNbPlayers[Player.CurrentClan] += 1;
			
			for (I, 0, 2) if (PrevClansNbPlayers[I] != ClansNbPlayers[I]) {
				PrevClansNbPlayers[I] = ClansNbPlayers[I];
				UpdateTeamsCards = True;
			}
			
			// ---------------------------------- //
			// Update cards
			if (UpdateTeamsCards) {
				UpdateTeamsCards = False;
				foreach (I => Frame in Frame_TeamsCards) {
					// ---------------------------------- //
					// Set card background color
					declare Quad_CardBackground <=> (Frame.GetFirstChild("Quad_CardBackground") as CMlQuad);
					Quad_CardBackground.BgColor = Teams[I].ColorPrimary;
					
					// ---------------------------------- //
					// Set team emblem
					declare Quad_TeamEmblem <=> (Frame.GetFirstChild("Quad_TeamEmblem") as CMlQuad);
					Quad_TeamEmblem.Substyle = "#"^I + 1;
					
					// ---------------------------------- //
					// Set team name
					declare Label_TeamName <=> (Frame.GetFirstChild("Label_TeamName") as CMlLabel);
					Label_TeamName.SetText(Teams[I].ColorizedName);
					
					// ---------------------------------- //
					// Set players amount
					declare Label_TeamNbPlayers <=> (Frame.GetFirstChild("Label_TeamNbPlayers") as CMlLabel);
					Label_TeamNbPlayers.SetText(TL::Compose("$t%1: %2", _("Players"), TL::ToText(ClansNbPlayers[I + 1])));
				}
			}
		}
	}
	
	// ---------------------------------- //
	// Mode rules window
	if (ActiveSubWindow == "ModeRules") {
		// ---------------------------------- //
		// Update help on mode name change
		if (PrevModeName != Net_LibPauseMenu_HelpModeName) {
			PrevModeName = Net_LibPauseMenu_HelpModeName;
			UpdateHelpWindow = 2;
		}
		
		// ---------------------------------- //
		// Update help window
		if (UpdateHelpWindow > 0) {
			UpdateHelpWindow -= 1;
			declare TotalHeight = 12.;
			
			// ---------------------------------- //
			// Set the mode name
			Label_HelpModeName.SetText(Net_LibPauseMenu_HelpModeName);
			
			// ---------------------------------- //
			// Set the mode objectives
			Label_HelpModeObjectives.SetText(Translations_Get(Net_LibPauseMenu_HelpModeObjectives));
			Label_HelpModeObjectives.RelativePosition.Y = -TotalHeight;
			TotalHeight += Label_HelpModeObjectives.ValueLineCount * 4.;
			
			// ---------------------------------- //
			// Set the resume button position
			TotalHeight += 1.;
			Frame_ButtonHelpResume.RelativePosition.Y = -TotalHeight;
			TotalHeight += 8.;
			
			// ---------------------------------- //
			// Set the frame final size
			TotalHeight += 1.;
			Quad_HelpBgColor.Size.Y = TotalHeight;
			Quad_HelpBgBlur.Size.Y = TotalHeight;
			Quad_HelpBgShadow.Size.Y = TotalHeight * 2 + 10;
			Frame_HelpWindow.RelativePosition.Y = TotalHeight / 2;
		}
	}
}

// ---------------------------------- //
// Play sound on pause visibility change
if (PrevPageIsVisible != PageIsVisible) {
	PrevPageIsVisible = PageIsVisible;
	
	if (PageIsVisible)
		LayerExecutableEvents.add("PlaySound:ShowDialog");
	else {
		LayerExecutableEvents.add("PlaySound:HideDialog");
		UpdateWindowsVisibility = True;
		ActiveSubWindow = "";
	}
}

// ---------------------------------- //
// Update windows visibility
if (UpdateWindowsVisibility) {
	UpdateWindowsVisibility = False;
	Frame_PauseWindow.Visible = ActiveSubWindow == "";
	Frame_TeamSelection.Visible = ActiveSubWindow == "TeamSelection";
	Frame_HelpWindow.Visible = ActiveSubWindow == "ModeRules";
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Colorize array of manialink controls
 *
 *	@param	_Controls	Elements to colorize
 *	@param	_Color		Color of the elements
 */
Void ColorizeControls(CMlControl[] _Controls, Vec3 _Color) {
	if (_Controls.count <= 0) return;
	foreach (Control in _Controls) {
		switchtype (Control) {
			case CMlQuad : {
				declare Quad = (Control as CMlQuad);
				Quad.BgColor = _Color;
				Quad.Colorize = _Color;
			}
			case CMlGauge : {
				declare Gauge = (Control as CMlGauge);
				Gauge.Color = _Color;
			}
		}
	}
}

{{{Manialink::Animations(["EaseInSine", "EaseOutSine"])}}}
{{{Translations::InsertToManialink([Net_LibPauseMenu_HelpModeObjectives])}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	+++Main+++
	while (True) {
		+++Yield+++
		LibManialink_AnimLoop();
		yield;
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create manialink for the executable layer
 *
 *	@return		The executable layer
 */
Text Private_CreateManialinkExecutable() {
	return """
<manialink version="2" name="LibPauseMenu:Executable">
<script><!--
/**
 *	LibPauseMenu: Executable
 */

#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Variables
declare Text[] LayerExecutableEvents for This;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Manage custom events
while (LayerExecutableEvents.existskey(0)) {
	declare EventData = TL::Split(":", LayerExecutableEvents[0]);
	
	// ---------------------------------- //
	// Switch event type
	switch (EventData[0]) {
		// ---------------------------------- //
		// Play interface sound
		case "PlaySound" : {
			declare CAudioManager::ELibSound Sound;
			if (EventData.existskey(1)) switch (EventData[1]) {
				case "ShowDialog" : Sound = CAudioManager::ELibSound::ShowDialog;
				case "HideDialog" : Sound = CAudioManager::ELibSound::HideDialog;
			}
			Audio.PlaySoundEvent(Sound, 0, 20.);
		}
	}
	
	// Destroy event
	declare Removed = LayerExecutableEvents.removekey(0);
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	+++Main+++
	while (True) {
		+++Yield+++
		yield;
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Set the rules of the game mode
 *
 *	@param	_ModeName			Name of the game mode
 *	@param	_ModeObjectives		Objectives of the game mode
 *	@param	_ModeImage			Image displayed over objectives
 */
Void SetModeRules(Text _ModeName, Text _ModeObjectives, Text _ModeImage) {
	if (_ModeName == "" || _ModeObjectives == "") return;
	declare netwrite Text Net_LibPauseMenu_HelpModeName for Teams[0];
	declare netwrite Text Net_LibPauseMenu_HelpModeObjectives for Teams[0];
	declare netwrite Text Net_LibPauseMenu_HelpModeImage for Teams[0];
	
	Net_LibPauseMenu_HelpModeName = _ModeName;
	Net_LibPauseMenu_HelpModeObjectives = _ModeObjectives;
	if (Http.IsValidUrl(_ModeImage)) Net_LibPauseMenu_HelpModeImage = _ModeImage;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	Layers::Detach("LibPauseMenu:Pause");
	Layers::Detach("LibPauseMenu:Executable");
	Layers::Destroy("LibPauseMenu:Pause");
	Layers::Destroy("LibPauseMenu:Executable");
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	
	// Create the main interface layer
	Layers::Create("LibPauseMenu:Pause", Private_CreateManialinkPauseMenu());
	Layers::SetType("LibPauseMenu:Pause", CUILayer::EUILayerType::InGameMenu);
	Layers::Attach("LibPauseMenu:Pause");
	
	// Create the executable interface layer
	Layers::Create("LibPauseMenu:Executable", Private_CreateManialinkExecutable());
	Layers::Attach("LibPauseMenu:Executable");
}