// -------------------------------------- //
//  LIBRARY STREAKS by domino54           //
//  script version: 2016-07-14            //
// -------------------------------------- //

/**
 *	This library is counting kill streaks for all players
 *	and displaying them as a notice after eliminating
 *	multiple enemies. It also counts eliminations on
 *	individual players and displaying dominations in the
 *	Killfeed library.
 */

#Const Version		"2016-07-14"
#Const ScriptName	"Streaks.Script.txt"

#Include "MathLib" as ML
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Nadeo/Manialink.Script.txt" as Manialink
#Include "Libs/domino54/Statistics.Script.txt" as Statistics
#Include "Libs/domino54/ShootMania/Killfeed.Script.txt" as KillFeed

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ImgBase "file://Media/Manialinks/ShootMania/GalaxyTitles/Streaks/"
#Const C_LibStreaks_StreakTimeBase		2000
#Const C_LibStreaks_StreakTimePerKill	750
#Const C_LibStreaks_KillsForDomination	4
#Const C_LibStreaks_InterfaceLayerName	"LibStreaks:Notices"
#Const C_LibStreaks_NoticeDisplayTime	1250
#Const C_LibStreaks_DisplayTimePerKill	125
#Const C_LibStreaks_NoticePosition		<0., 30., 0.>

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Boolean G_LibStreaks_LibraryIsLoaded;

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
/** Check if the player is valid
 *
 *	@param	_Player		The player to check
 *
 *	@return		True, if the player is valid
 */
Boolean Private_IsValidPlayer(CSmPlayer _Player) { return _Player != Null && !_Player.IsBot; }

// ---------------------------------- //
/** Create manialink for the notice module
 *
 *	@return		The notice module
 */
Text Private_CreateManialinkNotices() {
	return """
<manialink version="2" name="{{{C_LibStreaks_InterfaceLayerName}}}">
<frame posn="{{{C_LibStreaks_NoticePosition.X^" "^C_LibStreaks_NoticePosition.Y^" "^C_LibStreaks_NoticePosition.Z}}}">
	<quad sizen="60 15" halign="center" valign="center" opacity="0" id="Quad_StreakNotice"/>
</frame>

<script><!--
/**
 *	C_LibStreaks_InterfaceLayerName
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Quad_StreakNotice <=> (Page.GetFirstChild("Quad_StreakNotice") as CMlQuad);

// ---------------------------------- //
// Netcode
declare netread Integer[Text] Net_LibStreaks_PlayersKillStreaks for Teams[0];
declare netread Integer[Text] Net_LibStreaks_PlayersStreaksTime for Teams[0];

// ---------------------------------- //
// Variables
declare CurrentPlayerStreak = 0;
declare StreakDisplayEndTime = -1;
declare StreakNotice_IsVisible = False;

/// Update
declare PrevPlayerStreak = -1;
declare PrevStreakIsVisible = False;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Get the data of current player
if (GUIPlayer != Null) {
	if (Net_LibStreaks_PlayersKillStreaks.existskey(GUIPlayer.User.Login))
		CurrentPlayerStreak = Net_LibStreaks_PlayersKillStreaks[GUIPlayer.User.Login];
	
	if (Net_LibStreaks_PlayersStreaksTime.existskey(GUIPlayer.User.Login))
		StreakDisplayEndTime = Net_LibStreaks_PlayersStreaksTime[GUIPlayer.User.Login];
}
// ---------------------------------- //
// Reset notice on no player
else if (CurrentPlayerStreak > 0) {
	CurrentPlayerStreak = 0;
	StreakDisplayEndTime = -1;
}

StreakNotice_IsVisible = GameTime <= StreakDisplayEndTime;

// ---------------------------------- //
// Change the streak notice style
if (PrevPlayerStreak != CurrentPlayerStreak) {
	PrevPlayerStreak = CurrentPlayerStreak;
	
	Quad_StreakNotice.ImageUrl = "{{{C_ImgBase}}}"^GetStreakImage(CurrentPlayerStreak);
	Quad_StreakNotice.Colorize = GetStreakColor(CurrentPlayerStreak);
	
	// Trigger animation
	PrevStreakIsVisible = False;
}

// ---------------------------------- //
// Display streak notice to a player
if (PrevStreakIsVisible != StreakNotice_IsVisible) {
	PrevStreakIsVisible = StreakNotice_IsVisible;
	LibManialink_AnimStop(Quad_StreakNotice);
	
	declare TargetOpacity = 0.;
	declare TargetScale = .75;
	declare Easing = "EaseInSine";
	
	Quad_StreakNotice.RelativeScale = 1.;
	Quad_StreakNotice.Opacity = 1.;
	
	if (StreakNotice_IsVisible) {
		TargetOpacity = 1.;
		TargetScale = 1.;
		Easing = "EaseOutCirc";
		
		Quad_StreakNotice.RelativeScale = 2.;
		Quad_StreakNotice.Opacity = 0.;
	}
	
	LibManialink_Anim(Quad_StreakNotice, "<quad scale="^TargetScale^" opacity="^TargetOpacity^"/>", 250, Easing);
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Get the image of a streak
 *
 *	@param	_Eliminations	Amount of eliminations
 *
 *	@return		Name of the streak image
 */
Text GetStreakImage(Integer _Eliminations) {
	if (_Eliminations < 2) return "";
	switch (_Eliminations) {
		case 2 : return "02_DoubleKill.png";
		case 3 : return "03_TripleKill.png";
		case 4 : return "04_QuadraKill.png";
		case 5 : return "05_PentaKill.png";
		case 6 : return "06_HexaKill.png";
		case 7 : return "07_SeptaKill.png";
		case 8 : return "08_OctaKill.png";
		case 9 : return "09_NonaKill.png";
		case 10 : return "10_DecaKill.png";
	}
	return "11_KillingGod.png";
}

// ---------------------------------- //
/** Get the color of a streak
 *
 *	@param	_Eliminations	Amount of eliminations
 *
 *	@return		Color of the streak
 */
Vec3 GetStreakColor(Integer _Eliminations) {
	if (_Eliminations < 2) return <1., 1., 1.>;
	switch (_Eliminations) {
		case 2 : return <1., 1., 0.>;
		case 3 : return <1., .66, 0.>;
		case 4 : return <1., .33, 0.>;
		case 5 : return <1., 0., 0.>;
		case 6 : return <1., 0., .33>;
		case 7 : return <1., 0., .66>;
		case 8 : return <1., 0., 1.>;
		case 9 : return <.75, .25, 1.>;
		case 10 : return <.0, .5, 1.>;
	}
	return <.25, .75, 1.>;
}

{{{Manialink::Animations(["EaseOutCirc", "EaseInSine"])}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	+++Main+++
	while (True) {
		+++Yield+++
		LibManialink_AnimLoop();
		yield;
	}
}

--></script>
</manialink>""";
}

// ---------------------------------- //
/** Display streak on a players screen
 *
 *	@param	_Player		The player to display notice
 *	@param	_Streak		The player streak
 */
Void Private_DisplayStreak(CSmPlayer _Player, Integer _Streak) {
	if (!Private_IsValidPlayer(_Player) || _Streak < 2) return;
	declare netwrite Integer[Text] Net_LibStreaks_PlayersKillStreaks for Teams[0];
	declare netwrite Integer[Text] Net_LibStreaks_PlayersStreaksTime for Teams[0];
	
	declare DisplayTime = C_LibStreaks_NoticeDisplayTime + ML::Min(_Streak - 2, 9) * C_LibStreaks_DisplayTimePerKill;
	Net_LibStreaks_PlayersKillStreaks[_Player.User.Login] = _Streak;
	Net_LibStreaks_PlayersStreaksTime[_Player.User.Login] = Now + DisplayTime;
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/// Unload the library
Void Unload() {
	Layers::Detach(C_LibStreaks_InterfaceLayerName);
	Layers::Destroy(C_LibStreaks_InterfaceLayerName);
	
	G_LibStreaks_LibraryIsLoaded = False;
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	
	Layers::Create(C_LibStreaks_InterfaceLayerName, Private_CreateManialinkNotices());
	Layers::Attach(C_LibStreaks_InterfaceLayerName);
	
	KillFeed::AddTranslations(["$<%1$> is dominating $<%2$>!", "$<%1$> takes revenge on $<%2$>"]);
	G_LibStreaks_LibraryIsLoaded = True;
}

// ---------------------------------- //
/** Manage on armor empty event
 *
 *	@param	_Event		The event to proceed
 */
Void OnArmorEmpty(CSmModeEvent _Event) {
	if (!G_LibStreaks_LibraryIsLoaded) return;
	if (_Event == Null || _Event.Type != CSmModeEvent::EType::OnArmorEmpty) return;
	if (!Private_IsValidPlayer(_Event.Victim) && !Private_IsValidPlayer(_Event.Shooter)) return;
	
	// ---------------------------------- //
	// Break victim domination over shooter
	declare Integer[Text] LibStreaks_PlayerEliminations as VictimEliminations for _Event.Victim;
	if (VictimEliminations.existskey(_Event.Shooter.User.Login)) {
		if (
			VictimEliminations.existskey(_Event.Shooter.User.Login) &&
			VictimEliminations[_Event.Shooter.User.Login] >= C_LibStreaks_KillsForDomination
		) {
			KillFeed::SendNotice(["$<%1$> takes revenge on $<%2$>", _Event.Shooter.User.Name, _Event.Victim.User.Name]);
			Statistics::TrackEvent(_Event.Shooter, "NemesisRevenged", 1);
			Statistics::TrackEvent(_Event.Victim, "VictimsRevenges", 1);
		}
		
		VictimEliminations[_Event.Shooter.User.Login] = 0;
	}
	
	// ---------------------------------- //
	// Shooter functions
	declare Integer[Text] LibStreaks_PlayerEliminations as ShooterEliminations for _Event.Shooter;
	declare Integer LibStreaks_KillStreak for _Event.Shooter;
	declare Integer LibStreaks_StreakEndTime for _Event.Shooter;
	
	// ---------------------------------- //
	// Increase killstreak
	LibStreaks_KillStreak += 1;
	LibStreaks_StreakEndTime = Now + C_LibStreaks_StreakTimeBase + C_LibStreaks_StreakTimePerKill * (LibStreaks_KillStreak-1);
	
	Private_DisplayStreak(_Event.Shooter, LibStreaks_KillStreak);
	if (LibStreaks_KillStreak == 2) Statistics::TrackEvent(_Event.Shooter, "TotalKillStreaks", 1);
	
	// ---------------------------------- //
	// Count kill for shooter domination over victim
	if (!ShooterEliminations.existskey(_Event.Victim.User.Login)) ShooterEliminations[_Event.Victim.User.Login] = 0;
	ShooterEliminations[_Event.Victim.User.Login] += 1;
	
	// ---------------------------------- //
	// Notify players on new domination
	if (ShooterEliminations[_Event.Victim.User.Login] == C_LibStreaks_KillsForDomination) {
		KillFeed::SendNotice(["$<%1$> is dominating $<%2$>!", _Event.Shooter.User.Name, _Event.Victim.User.Name]);
		Statistics::TrackEvent(_Event.Shooter, "DominatedPlayers", 1);
		Statistics::TrackEvent(_Event.Victim, "TimesDominated", 1);
	}
}

declare CSmPlayer domino54;

// ---------------------------------- //
/// Library loop
Void Loop() {
	if (!G_LibStreaks_LibraryIsLoaded) return;
	
	// ---------------------------------- //
	// Manage players functions
	foreach (Player in AllPlayers) {
		if (!Private_IsValidPlayer(Player)) continue;
		
		// ---------------------------------- //
		// Kill streaks data
		declare Integer LibStreaks_KillStreak for Player;
		declare Integer LibStreaks_StreakEndTime for Player;
		
		// ---------------------------------- //
		// Reset timed out kill streak
		if (
			LibStreaks_KillStreak > 0 && 
			((LibStreaks_StreakEndTime > 0 && Now >= LibStreaks_StreakEndTime) ||
			Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned)
		) {
			LibStreaks_StreakEndTime = -1;
			LibStreaks_KillStreak = 0;
		}
	}
}