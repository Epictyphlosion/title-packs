// -------------------------------------- //
//  INVASION INTERFACE LIB by domino54    //
//  script version: 2017-03-29            //
// -------------------------------------- //

#Const Version		"2017-03-29"
#Const ScriptName	"InvasionUI.Script.txt"

#Include "MathLib" as ML
#Include "TextLib" as TL
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/domino54/ManialinkTools.Script.txt" as ManialinkTools
#Include "Libs/domino54/Translations.Script.txt" as Translations

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ImgBase "file://Media/Manialinks/ShootMania/GalaxyTitles/"

#Const C_LibInvasionUI_ScoreZeroes		6	///< Number of total characters in score label
#Const C_LibInvasionUI_MaxBossesBars	10	///< Maxinum amount of bosses bars displayed under timer

/// List of all available modules
#Const C_AvailableModules [
	"CountdownInfo", "PoleGauge", "ToadsArmor", "Score", "MedalScore", "Evolution",
	"GoldMarker", "CustomWeaponBar", "ToadsCounter", "SoloScore", "BossHealth", "WeaponStats"
]

/// Modules positions
#Const C_LibInvasionUI_CountdownPos		<0., 90.>
#Const C_LibInvasionUI_PoleGaugePos 	<-160., 90.>
#Const C_LibInvasionUI_ToadsArmorPos	<-87.5, 84.25>
#Const C_LibInvasionUI_ScorePos			<-159., 72.5>
#Const C_LibInvasionUI_MedalScorePos	<160., 85.5>
#Const C_LibInvasionUI_EvolutionPos		<-159.5, 55.>
#Const C_LibInvasionUI_WeaponBarPos		<0., -68.>
#Const C_LibInvasionUI_ToadsCounterPos	<-160., -90.>
#Const C_LibInvasionUI_SoloScorePos		<0., 0.>
#Const C_LibInvasionUI_BossHealthPos	<0., 77.75>

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Text[] G_LibInvasionUI_ModulesLoaded;

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

// ---------------------------------- //
/** Check if a module is loaded
 *
 *	@param	_ModuleId		The module to check
 *
 *	@return					True if the given module is loaded, False otherwise
 */
Boolean Private_ModuleIsLoaded(Text _ModuleId) {
	return G_LibInvasionUI_ModulesLoaded.exists(_ModuleId);
}

// ---------------------------------- //
/** Update the settings for a module
 *
 *	@param	_Name		The name of the setting
 *	@param	_Value		The value of the setting
 */
Void Private_SetModuleSetting(Text _Name, Text _Value) {
	declare netwrite Net_LibInvasionUI_SettingsUpdate for Teams[0] = 0;
	declare netwrite Net_LibInvasionUI_Settings for Teams[0] = Text[Text];
	Net_LibInvasionUI_SettingsUpdate = Now;
	Net_LibInvasionUI_Settings[_Name] = _Value;
}

// ---------------------------------- //
/** Create the manialink for the countdown info module
 *
 *	@return		The manialink
 */
Text Private_CreateMLCountdownInfo() {
	return """
<manialink version="3" name="LibInvasionUI:CountdownInfo">
<stylesheet>
	<style id="Label_CountdownInfo" textsize="1" textfont="Eurostile_Bold" textcolor="FFF" />
</stylesheet>

<frame id="Frame_CountdownInfo" pos="{{{C_LibInvasionUI_CountdownPos.X^" "^C_LibInvasionUI_CountdownPos.Y}}}">
	<label pos="0 -8.5" halign="center" valign="center2" textprefix="$t$s" id="Label_CountdownInfo" />
</frame>

<script><!--
/**
 *	LibInvasionUI: CountdownInfo
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_CountdownInfo <=> (Page.GetFirstChild("Frame_CountdownInfo") as CMlFrame);
declare Label_CountdownInfo <=> (Page.GetFirstChild("Label_CountdownInfo") as CMlLabel);

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare StartTime = -1;
declare WavesToInvasion = -1;

declare PrevSettingsUpdate = -1;
declare PrevWavesToInvasion = -2;
declare PrevCountdownColor = Vec3;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
			case "WavesToInvasion" : WavesToInvasion = TL::ToInteger(SettingValue);
			case "StartTime" : StartTime = TL::ToInteger(SettingValue);
		}
	}
}

Frame_CountdownInfo.Visible = DisplayInterface && StartTime > 0;

if (!Frame_CountdownInfo.Visible) continue;

// ---------------------------------- //
// Update information
if (PrevWavesToInvasion != WavesToInvasion) {
	PrevWavesToInvasion = WavesToInvasion;
	
	declare Text CountdownInfo;
	switch (WavesToInvasion) {
		case 1 : CountdownInfo = "1 wave to Invasion";
		case 0 : CountdownInfo = "Invasion mode!";
		case -1 : CountdownInfo = "Preparation time";
		default : CountdownInfo = "%1 waves to Invasion";
	}
	
	Label_CountdownInfo.SetText(ReplaceChars(Translate([CountdownInfo, TL::ToText(WavesToInvasion)])));
}
***

{{{Translations::InsertToManialink(["1 wave to Invasion", "Invasion mode!", "Preparation time", "%1 waves to Invasion"])}}}
{{{ManialinkTools::Functions(["ReplaceChars"])}}}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the pole gauge module
 *
 *	@return		The manialink
 */
Text Private_CreateMLPoleGauge() {
	return """
<manialink version="3" name="LibInvasionUI:PoleGauge">
<stylesheet>
	<style id="Label_GaugeInfo" textsize="1" textfont="Eurostile_Bold" textcolor="888" textprefix="$t" />
	<style id="Label_ToadsReached" textsize="4" textfont="Eurostile_Bold" textemboss="1" textcolor="FFF" />
	<style id="Label_NbPoleLimit" textsize="2" textfont="Eurostile_Bold" textemboss="1" textcolor="888" />
</stylesheet>

<frame id="Frame_PoleGauge" pos="{{{C_LibInvasionUI_PoleGaugePos.X - 70^" "^C_LibInvasionUI_PoleGaugePos.Y}}}">
	<label pos="3 -10.85" size="36 2" valign="center2" id="Label_GaugeInfo" />
	<label pos="4 -5.75" valign="center2" id="Label_ToadsReached" text="0" />
	<label pos="66 -5.75" valign="center2" halign="right" id="Label_NbPoleLimit" text="0" />
	<quad size="70 14" rot="180" halign="right" valign="bottom" image="{{{C_ImgBase}}}UiPoleCaptureFg.png" />
	<quad pos="3 -3" size="0 7" bgcolor="0F0" id="Quad_PoleGaugeBar" />
</frame>

<script><!--
/**
 *	LibInvasionUI: PoleGauge
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_FrameHideaway	-70.
#Const C_GaugeQuadSize	<64., 7.>
#Const C_GaugeColors	[0. => <.5, 1., 0.>, .75 => <1., 1., 0.>, 1. => <1., 0., 0.>]

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_PoleGauge		<=> (Page.GetFirstChild("Frame_PoleGauge")		as CMlFrame);
declare Quad_PoleGaugeBar	<=> (Page.GetFirstChild("Quad_PoleGaugeBar")	as CMlQuad);
declare Label_ToadsReached	<=> (Page.GetFirstChild("Label_ToadsReached")	as CMlLabel);
declare Label_NbPoleLimit	<=> (Page.GetFirstChild("Label_NbPoleLimit")	as CMlLabel);
declare Label_GaugeInfo		<=> (Page.GetFirstChild("Label_GaugeInfo")		as CMlLabel);

Label_GaugeInfo.SetText(ReplaceChars(Translate("Toads reached pole")));

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare ShowGaugeBar = False;
declare PoleLimit = 0;
declare NbToadsReachedPole = 0;
declare AnimateGaugeBar = True;

declare PrevSettingsUpdate = -1;
declare PrevShowGaugeBar = False;
declare PrevPoleLimit = -1;
declare PrevNbToadsReachedPole = -1;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
			case "PoleLimit" : PoleLimit = TL::ToInteger(SettingValue);
			case "NbToadsReachedPole" : NbToadsReachedPole = ML::Clamp(TL::ToInteger(SettingValue), 0, PoleLimit);
		}
	}
}

ShowGaugeBar = DisplayInterface && PoleLimit > 0;

// ---------------------------------- //
// Set gauge visibility
if (PrevShowGaugeBar != ShowGaugeBar) {
	PrevShowGaugeBar = ShowGaugeBar;
	
	declare TargetPosition = Frame_PoleGauge.RelativePosition_V3;
	TargetPosition.X = {{{C_LibInvasionUI_PoleGaugePos.X}}};
	declare TargetEasing = CAnimManager::EAnimManagerEasing::CircOut;
	
	if (!ShowGaugeBar) {
		TargetPosition.X += C_FrameHideaway;
		TargetEasing = CAnimManager::EAnimManagerEasing::CircIn;
		NbToadsReachedPole = 0;
	}
	
	AnimMgr.Add(Frame_PoleGauge, "<frame pos='"^TargetPosition.X^" "^TargetPosition.Y^"' />", 250, TargetEasing);
}

if (!ShowGaugeBar) continue;

// ---------------------------------- //
// Update pole limit
if (PrevPoleLimit != PoleLimit) {
	PrevPoleLimit = PoleLimit;
	
	Label_NbPoleLimit.SetText(TL::ToText(PoleLimit));
	AnimateGaugeBar = True;
}

// ---------------------------------- //
// Update Toads reached pole amount
if (PrevNbToadsReachedPole != NbToadsReachedPole) {
	PrevNbToadsReachedPole = NbToadsReachedPole;
	
	Label_ToadsReached.SetText(TL::ToText(NbToadsReachedPole));
	AnimateGaugeBar = True;
}

// ---------------------------------- //
// Animate gauge bar
if (AnimateGaugeBar) {
	AnimateGaugeBar = False;
	
	declare GaugeRatio = 0.;
	if (PoleLimit > 0) GaugeRatio = ML::Clamp(ML::ToReal(NbToadsReachedPole) / PoleLimit, 0., 1.);
	declare GaugeColor = TL::ColorToText(ColorTransition(GaugeRatio, C_GaugeColors));
	
	AnimMgr.Add(
		Quad_PoleGaugeBar,
		"<quad size='"^C_GaugeQuadSize.X * GaugeRatio^" "^C_GaugeQuadSize.Y^"' bgcolor="^GaugeColor^" />",
		250, CAnimManager::EAnimManagerEasing::SineInOut
	);
}
***

{{{Translations::InsertToManialink(["Toads reached pole"])}}}
{{{ManialinkTools::Functions(["Pulse", "ReplaceChars", "ColorTransition"])}}}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the Toads Armor module
 *
 *	@return		The manialink
 */
Text Private_CreateMLToadsArmor() {
	return """
<manialink version="3" name="LibInvasionUI:ToadsArmor">
<stylesheet>
	<style id="Label_ToadsArmor" textsize="2" textfont="Eurostile_Bold" textcolor="000" />
</stylesheet>

<frame id="Frame_ToadsArmor" pos="{{{C_LibInvasionUI_ToadsArmorPos.X^" "^C_LibInvasionUI_ToadsArmorPos.Y}}}" scale="0">
	<label pos="0 .25" size="5 3" halign="center" valign="center2" id="Label_ToadsArmor" text="0" />
	<quad size="8 8" halign="center" valign="center" image="{{{C_ImgBase}}}IconToadsArmor.png" id="Quad_ToadsArmor" colorize="777" />
</frame>

<script><!--
/**
 *	LibInvasionUI: ToadsArmor
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_ToadsArmor <=> (Page.GetFirstChild("Frame_ToadsArmor") as CMlFrame);
declare Label_ToadsArmor <=> (Page.GetFirstChild("Label_ToadsArmor") as CMlLabel);
declare Quad_ToadsArmor <=> (Page.GetFirstChild("Quad_ToadsArmor") as CMlQuad);

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare ShowToadsArmor = False;
declare ToadsArmor = 0;
declare PoleLimit = 0;

declare PrevSettingsUpdate = -1;
declare PrevShowToadsArmor = False;
declare PrevToadsArmor = -1;
declare PrevPoleLimit = -1;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***	
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
			case "ToadsArmor" : ToadsArmor = TL::ToInteger(SettingValue);
			case "PoleLimit" : PoleLimit = TL::ToInteger(SettingValue);
		}
	}
}

ShowToadsArmor = DisplayInterface && ToadsArmor > 0;

// ---------------------------------- //
// Set Toads Armor icon visibility
if (PrevShowToadsArmor != ShowToadsArmor) {
	PrevShowToadsArmor = ShowToadsArmor;
	
	declare TargetScale = 1.;
	declare TargetEasing = CAnimManager::EAnimManagerEasing::BackOut;
	
	if (!ShowToadsArmor) {
		TargetScale = 0.;
		TargetEasing = CAnimManager::EAnimManagerEasing::BackIn;
	}
	
	AnimMgr.Add(Frame_ToadsArmor, "<frame scale='"^TargetScale^"' />", 500, TargetEasing);
}

if (!ShowToadsArmor) continue;

// ---------------------------------- //
// Update Toads Armor points
if (PrevToadsArmor != ToadsArmor) {
	Label_ToadsArmor.SetText(TL::ToText(ToadsArmor / 100));
	
	if (PrevToadsArmor > 0 && ToadsArmor > 0) {
		declare Color = LocalUser.Color;
		if (GUIPlayer != Null) {
			if (!Teams.existskey(GUIPlayer.CurrentClan - 1)) Color = GUIPlayer.User.Color;
			else Color = Teams[GUIPlayer.CurrentClan - 1].ColorPrimary;
		}
		
		AnimMgr.Add(Frame_ToadsArmor, "<frame scale='3' />", 750, CAnimManager::EAnimManagerEasing::CircInOut);
		AnimMgr.AddChain(Frame_ToadsArmor, "<frame scale='1' />", 750, CAnimManager::EAnimManagerEasing::CircInOut);
		
		AnimMgr.Add(Quad_ToadsArmor, "<frame colorize='"^TL::ColorToText(Color)^"' />", 750, CAnimManager::EAnimManagerEasing::CircInOut);
		AnimMgr.AddChain(Quad_ToadsArmor, "<frame colorize='777' />", 750, CAnimManager::EAnimManagerEasing::CircInOut);
	}
	
	PrevToadsArmor = ToadsArmor;
}

// ---------------------------------- //
// Update position of the icon
if (PrevPoleLimit != PoleLimit) {
	PrevPoleLimit = PoleLimit;
	
	Frame_ToadsArmor.RelativePosition_V3 = {{{C_LibInvasionUI_ToadsArmorPos}}};
	if (PoleLimit <= 0) Frame_ToadsArmor.RelativePosition_V3.X -= 68.;
}
***

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the score module
 *
 *	@return		The manialink
 */
Text Private_CreateMLScore() {
	return """
<manialink version="3" name="LibInvasionUI:Score">
<stylesheet>
	<style class="info" textsize="2" textfont="Eurostile_Bold" textemboss="1" textcolor="999" />
</stylesheet>

<frame id="Frame_Score" pos="{{{C_LibInvasionUI_ScorePos.X - 50^" "^C_LibInvasionUI_ScorePos.Y}}}"><frame id="Frame_ScoreAnim">
	<label valign="center2" class="info" textsize="8" id="Label_Score" text="000000" />
	<label pos="0 -5" valign="center2" class="info" textprefix="$T" text="Score" translate="1" />
</frame></frame>

<script><!--
/**
 *	LibInvasionUI: Score
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_FrameHideaway	-50.

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_Score <=> (Page.GetFirstChild("Frame_Score") as CMlFrame);
declare Label_Score <=> (Page.GetFirstChild("Label_Score") as CMlLabel);
declare Frame_ScoreAnim <=> (Page.GetFirstChild("Frame_ScoreAnim") as CMlFrame);

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare TimeScoreCounting = False;
declare ShowScore = False;
declare StartTime = -1;
declare NbPoints = 0;
declare TimePoints = 0;

declare PrevSettingsUpdate = -1;
declare PrevShowScore = False;
declare PrevPlayerLogin = "";
declare PrevNbPoints = 0;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
			case "TimeScoreCounting" : TimeScoreCounting = SettingValue == "True";
			case "StartTime" : StartTime = TL::ToInteger(SettingValue);
		}
	}
}

ShowScore = (DisplayInterface && ((GUIPlayer != Null && GUIPlayer.Score != Null) || !IsSpectatorMode));

// ---------------------------------- //
// Set score label visibility
if (PrevShowScore != ShowScore) {
	PrevShowScore = ShowScore;
	
	declare TargetPosition = Frame_Score.RelativePosition_V3;
	TargetPosition.X = {{{C_LibInvasionUI_ScorePos.X}}};
	declare TargetEasing = CAnimManager::EAnimManagerEasing::CircOut;
	
	if (!ShowScore) {
		TargetPosition.X += C_FrameHideaway;
		TargetEasing = CAnimManager::EAnimManagerEasing::CircIn;
	}
	
	AnimMgr.Add(Frame_Score, "<frame pos='"^TargetPosition.X^" "^TargetPosition.Y^"' />", 250, TargetEasing);
}

if (!ShowScore) continue;

// ---------------------------------- //
// Update current player score
if (GUIPlayer != Null && GUIPlayer.Score != Null) {
	NbPoints = GUIPlayer.Score.Points;
	
	if (PrevNbPoints != NbPoints) {
		PrevNbPoints = NbPoints;
		
		// Do animation
		if (PrevPlayerLogin == GUIPlayer.User.Login) {
			AnimMgr.Add(Frame_ScoreAnim, "<frame scale='1.1' />", 125, CAnimManager::EAnimManagerEasing::Linear);
			AnimMgr.AddChain(Frame_ScoreAnim, "<frame scale='1' />", 125, CAnimManager::EAnimManagerEasing::Linear);
		}
	}
	
	PrevPlayerLogin = GUIPlayer.User.Login;
}
// ---------------------------------- //
// Reset score
else if (!IsSpectatorMode) {
	PrevPlayerLogin = "";
	PrevNbPoints = 0;
}

// ---------------------------------- //
// Set points
if (TimeScoreCounting) TimePoints = ((GameTime - StartTime) / 1000) * 10;
Label_Score.Value = GetScoreLabel(NbPoints * 10 + TimePoints);
***

// ---------------------------------- //
/** Get the score text with zeroes
 *
 *	@param	_Points		Score points
 *
 *	@return		Score text string
 */
Text GetScoreLabel(Integer _Points) {
	declare Zeroes = {{{C_LibInvasionUI_ScoreZeroes}}};
	
	if (_Points <= 0) {
		declare Text TextScore;
		for (I, 0, Zeroes - 1) TextScore ^= "0";
		return TextScore;
	}
	
	declare TextScore = TL::ToText(_Points);
	declare Length = TL::Length(TextScore);
	
	TextScore = "$FFF"^TextScore;
	if (Length < Zeroes) for (I, Length, Zeroes - 1) TextScore = "0"^TextScore;
	
	return TextScore;
}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the medal score module
 *
 *	@return		The manialink
 */
Text Private_CreateMLMedalScore() {
	return """
<manialink version="3" name="LibInvasionUI:MedalScore">
<stylesheet>
	<style id="Label_TargetPoints" scale=".75" textfont="Eurostile_Bold" textcolor="999" />
	<style class="medal" pos="0 0 1" size="20 10" valign="center" opacity="0" />
</stylesheet>

<frame id="Frame_MedalScore" pos="{{{C_LibInvasionUI_MedalScorePos.X + 80^" "^C_LibInvasionUI_MedalScorePos.Y}}}">
	<frame pos="-80">
		<label pos="73" halign="center" valign="center2" text="???" id="Label_TargetPoints" />
		<quad class="medal" image="{{{C_ImgBase}}}MedalScoreBronze.dds" id="Quad_MedalBronze" />
		<quad class="medal" image="{{{C_ImgBase}}}MedalScoreSilver.dds" id="Quad_MedalSilver" />
		<quad class="medal" image="{{{C_ImgBase}}}MedalScoreGold.dds" id="Quad_MedalGold" />
		<quad class="medal" image="{{{C_ImgBase}}}MedalScoreNadeo.dds" id="Quad_MedalAuthor" />
		<quad size="80 10" valign="center" image="{{{C_ImgBase}}}MedalScoreFg.png" />
		<quad pos="17" size="50 4" valign="center" bgcolor="000" id="Quad_ProgressGauge" />
	</frame>
</frame>

<script><!--
/**
 *	LibInvasionUI: MedalScore
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_FrameHideaway	80.
#Const C_MedalColors	[<1., .6, .2>, <.85, .85, .85>, <1., .9, 0.>, <.8, 1., 0.>, <.8, 1., 0.>]

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***	
// ---------------------------------- //
// Load interface elements
declare Frame_MedalScore	<=> (Page.GetFirstChild("Frame_MedalScore")		as CMlFrame);
declare Quad_ProgressGauge	<=> (Page.GetFirstChild("Quad_ProgressGauge")	as CMlQuad);
declare Label_TargetPoints	<=> (Page.GetFirstChild("Label_TargetPoints")	as CMlLabel);
declare Quad_MedalBronze	<=> (Page.GetFirstChild("Quad_MedalBronze")	as CMlQuad);
declare Quad_MedalSilver	<=> (Page.GetFirstChild("Quad_MedalSilver")	as CMlQuad);
declare Quad_MedalGold		<=> (Page.GetFirstChild("Quad_MedalGold")	as CMlQuad);
declare Quad_MedalAuthor	<=> (Page.GetFirstChild("Quad_MedalAuthor")	as CMlQuad);
declare Quad_Medals = [Quad_MedalBronze, Quad_MedalSilver, Quad_MedalGold, Quad_MedalAuthor];

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare TimeScoreCounting = False;
declare ShowMedalScore = False;
declare StartTime = -1;
declare IsSoloMode = False;
declare CurrentMedal = 0;

declare TargetScore = 0;
declare TotalPoints = 0.;
declare TimePoints = 0.;

declare PrevSettingsUpdate = -1;
declare PrevShowMedalScore = False;
declare PrevMedal = -1;

// ---------------------------------- //
// Check map records
declare ObjectiveBronze	= TL::ToInteger(Map.ObjectiveTextBronze);
declare ObjectiveSilver	= TL::ToInteger(Map.ObjectiveTextSilver);
declare ObjectiveGold	= TL::ToInteger(Map.ObjectiveTextGold);
declare ObjectiveAuthor	= TL::ToInteger(Map.ObjectiveTextAuthor);

declare MapHasValidRecords = (
	ObjectiveBronze > 0 &&
	ObjectiveBronze < ObjectiveSilver &&
	ObjectiveSilver < ObjectiveGold &&
	ObjectiveGold < ObjectiveAuthor
);
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
			case "TimeScoreCounting" : TimeScoreCounting = SettingValue == "True";
			case "StartTime" : StartTime = TL::ToInteger(SettingValue);
			case "IsSoloMode" : IsSoloMode = SettingValue == "True";
		}
	}
}

ShowMedalScore = InputPlayer != Null && MapHasValidRecords && IsSoloMode && DisplayInterface;

// ---------------------------------- //
// Set score label visibility
if (PrevShowMedalScore != ShowMedalScore) {
	PrevShowMedalScore = ShowMedalScore;
	
	declare TargetPosition = Frame_MedalScore.RelativePosition_V3;
	TargetPosition.X = {{{C_LibInvasionUI_MedalScorePos.X}}};
	declare TargetEasing = CAnimManager::EAnimManagerEasing::CircOut;
	
	if (!ShowMedalScore) {
		TargetPosition.X += C_FrameHideaway;
		TargetEasing = CAnimManager::EAnimManagerEasing::CircIn;
	}
	
	AnimMgr.Add(Frame_MedalScore, "<frame pos='"^TargetPosition.X^" "^TargetPosition.Y^"' />", 250, TargetEasing);
}

if (!ShowMedalScore) continue;

// ---------------------------------- //
// Set points
if (TimeScoreCounting) TimePoints = ((GameTime - StartTime) / 1000.) * 10.;
TotalPoints = TimePoints + InputPlayer.Score.Points * 10;
if (TotalPoints < 0) TotalPoints = 0.;

// ---------------------------------- //
// Update current medal
if (TotalPoints >= ObjectiveAuthor) CurrentMedal = 4;
else if (TotalPoints >= ObjectiveGold) CurrentMedal = 3;
else if (TotalPoints >= ObjectiveSilver) CurrentMedal = 2;
else if (TotalPoints >= ObjectiveBronze) CurrentMedal = 1;
else CurrentMedal = 0;

// ---------------------------------- //
// Gauge bar
switch (CurrentMedal) {
	case 4 : TargetScore = ObjectiveAuthor;
	case 3 : TargetScore = ObjectiveAuthor;
	case 2 : TargetScore = ObjectiveGold;
	case 1 : TargetScore = ObjectiveSilver;
	case 0 : TargetScore = ObjectiveBronze;
}

Quad_ProgressGauge.Size.X = 50. * ML::Clamp(TotalPoints / TargetScore, 0., 1.);

// ---------------------------------- //
// Animate icons and update requirements
while (PrevMedal < CurrentMedal) {
	PrevMedal += 1;
	
	// ---------------------------------- //
	// Update score requirements
	Label_TargetPoints.SetText(TL::ToText(TargetScore));
	
	// ---------------------------------- //
	// Update currently fought for medal color
	if (C_MedalColors.existskey(CurrentMedal))
		Quad_ProgressGauge.BgColor = C_MedalColors[CurrentMedal];
	
	// ---------------------------------- //
	// Start blink animation
	declare CMlQuad Quad;
	switch (PrevMedal) {
		case 1 : Quad = Quad_MedalBronze;
		case 2 : Quad = Quad_MedalSilver;
		case 3 : Quad = Quad_MedalGold;
		case 4 : Quad = Quad_MedalAuthor;
	}

	if (Quad != Null) {
		PlayUiSound(CMlScriptIngame::EUISound::Record, CurrentMedal - 1, 2.5);
		declare Integer BlinkEndTime for Quad;
		BlinkEndTime = Now + 3000;
	}
}

// ---------------------------------- //
// Do a blink animation
foreach (Quad in Quad_Medals) {
	declare Integer BlinkEndTime for Quad;
	if (BlinkEndTime <= 0) Quad.Opacity = 0.;
	else if (Now >= BlinkEndTime) Quad.Opacity = 1.;
	else Quad.Opacity = Pulse(BlinkEndTime - Now, 4.);
}
***

{{{ManialinkTools::Function("Pulse")}}}

main() {
	wait(Map != Null && InputPlayer != Null);
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the Evolution progress module
 *
 *	@return		The manialink
 */
Text Private_CreateMLEvolution() {
	return """
<manialink version="3" name="LibInvasionUI:Evolution">
<stylesheet>
	<style class="font" textsize="2" textfont="Eurostile_Bold" textemboss="1" textcolor="FFF" textprefix="$T" />
</stylesheet>

<frame id="Frame_Evolution" pos="{{{C_LibInvasionUI_EvolutionPos.X - 30^" "^C_LibInvasionUI_EvolutionPos.Y}}}">
	<label pos="4.625 6.5" size="20 3" valign="center2" class="font" id="Label_EvoFrameTitleText" text="Evolution" />
	<label pos="4.5 1.75" valign="center2" class="font" textsize="6" id="Label_EvoCurrentLevel" text="1" />
	<label pos="4.5 -3.5" valign="center2" class="font" textcolor="888" id="Label_EvoCurrentPoints" text="0" />
	<label pos="4.5 -6.5" valign="center2" class="font" textcolor="888" id="Label_EvoTargetPoints" text="/4" />
	<quad size="20 20" valign="center" image="{{{C_ImgBase}}}UiEvolutionBg.png" />
	<quad pos="3.5 -9" size="2.25 0" rot="180" bgcolor="FFF" id="Quad_EvoProgressGauge" />
</frame>

<script><!--
/**
 *	LibInvasionUI: Evolution
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_FrameHideaway	-40.

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_Evolution <=> (Page.GetFirstChild("Frame_Evolution") as CMlFrame);
declare Label_EvoCurrentLevel <=> (Page.GetFirstChild("Label_EvoCurrentLevel") as CMlLabel);
declare Label_EvoCurrentPoints <=> (Page.GetFirstChild("Label_EvoCurrentPoints") as CMlLabel);
declare Label_EvoTargetPoints <=> (Page.GetFirstChild("Label_EvoTargetPoints") as CMlLabel);
declare Quad_EvoProgressGauge <=> (Page.GetFirstChild("Quad_EvoProgressGauge") as CMlQuad);

// Translations
Translate("Label_EvoFrameTitleText", "Evolution");

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare ShowEvolution = False;
declare UseEvolution = False;
declare InterfaceColorText = "FFF";
declare GaugeColorText = "FFF";
declare TriggerEvolutionGaugeAnim = True;

// Update
declare PrevSettingsUpdate = -1;
declare PrevShowEvolution = False;
declare PrevPlayerEvoLevel = 1;
declare PrevPlayerEvoPointsCur = 0;
declare PrevPlayerEvoPointsNext = 4;
declare PrevInterfaceColor = -1.;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***		
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
			case "UseEvolution" : UseEvolution = SettingValue == "True";
		}
	}
}

ShowEvolution = DisplayInterface && UseEvolution && (GUIPlayer != Null || !IsSpectatorClient);

// ---------------------------------- //
// Set Evolution widget visibility
if (PrevShowEvolution != ShowEvolution) {
	PrevShowEvolution = ShowEvolution;
	
	declare Position = Frame_Evolution.RelativePosition_V3;
	Position.X = {{{C_LibInvasionUI_EvolutionPos.X}}};
	declare TargetEasing = CAnimManager::EAnimManagerEasing::CircOut;
	
	if (!ShowEvolution) {
		Position.X += C_FrameHideaway;
		TargetEasing = CAnimManager::EAnimManagerEasing::CircIn;
	}
	
	AnimMgr.Add(Frame_Evolution, "<frame pos='"^Position.X^" "^Position.Y^"' />", 250, TargetEasing);
}

if (!ShowEvolution || GUIPlayer == Null) continue;

// ---------------------------------- //
// Get the current player's Evolution data
declare netread Integer Net_LibInvasionUI_PlayerEvolutionLevel for GUIPlayer;
declare netread Integer Net_LibInvasionUI_PlayerEvolutionCurPoints for GUIPlayer;
declare netread Integer Net_LibInvasionUI_PlayerEvolutionToNext for GUIPlayer;

// ---------------------------------- //
// Update displayed Evolution level
if (PrevPlayerEvoLevel != Net_LibInvasionUI_PlayerEvolutionLevel) {
	PrevPlayerEvoLevel = Net_LibInvasionUI_PlayerEvolutionLevel;
	
	Label_EvoCurrentLevel.Value = TL::ToText(PrevPlayerEvoLevel);
	Label_EvoCurrentLevel.RelativeScale = 0.;
	AnimMgr.Add(Label_EvoCurrentLevel, "<label scale='1' />", 375, CAnimManager::EAnimManagerEasing::CircOut);
}

// ---------------------------------- //
// Update player current points
if (PrevPlayerEvoPointsCur != Net_LibInvasionUI_PlayerEvolutionCurPoints) {
	PrevPlayerEvoPointsCur = Net_LibInvasionUI_PlayerEvolutionCurPoints;
	
	Label_EvoCurrentPoints.Value = TL::ToText(PrevPlayerEvoPointsCur);
	TriggerEvolutionGaugeAnim = True;
}

// ---------------------------------- //
// Update player points to next
if (PrevPlayerEvoPointsNext != Net_LibInvasionUI_PlayerEvolutionToNext) {
	PrevPlayerEvoPointsNext = Net_LibInvasionUI_PlayerEvolutionToNext;
	
	Label_EvoTargetPoints.Value = "/"^Net_LibInvasionUI_PlayerEvolutionToNext;
	TriggerEvolutionGaugeAnim = True;
}

// ---------------------------------- //
// Update the interface color
if (PrevInterfaceColor != GUIPlayer.GetLinearHue) {
	PrevInterfaceColor = GUIPlayer.GetLinearHue;

	// Convert the interface color to text
	declare Color = HsvToRgb(<GUIPlayer.GetLinearHue, 1., 1.>);
	InterfaceColorText = TL::ColorToText(Brightness(Color, 2.));
	GaugeColorText = TL::ColorToText(Color);
	
	// Animate the color change
	AnimMgr.Add(Label_EvoCurrentPoints, "<label textcolor='"^InterfaceColorText^"' />", 250, CAnimManager::EAnimManagerEasing::SineInOut);
	AnimMgr.Add(Label_EvoTargetPoints, "<label textcolor='"^InterfaceColorText^"' />", 250, CAnimManager::EAnimManagerEasing::SineInOut);
	TriggerEvolutionGaugeAnim = True;
}

// ---------------------------------- //
// Animate gauge
if (TriggerEvolutionGaugeAnim) {
	TriggerEvolutionGaugeAnim = False;
	
	declare Size = <Quad_EvoProgressGauge.Size.X, 0.>;
	if (Net_LibInvasionUI_PlayerEvolutionToNext > 0)
		Size.Y = 18. * Net_LibInvasionUI_PlayerEvolutionCurPoints / Net_LibInvasionUI_PlayerEvolutionToNext;
	
	AnimMgr.Add(Quad_EvoProgressGauge, "<quad size='"^Size.X^" "^Size.Y^"' bgcolor='"^GaugeColorText^"' />", 250, CAnimManager::EAnimManagerEasing::SineInOut);
}
***

{{{Translations::InsertToManialink(["Evolution"])}}}
{{{ManialinkTools::Functions(["Brightness", "HsvToRgb"])}}}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the Gold item marker module
 *
 *	@return		The manialink
 */
Text Private_CreateMLGoldMarker() {
	declare Ratio = 9/16.;
	declare StepsML = "";
	for (I, 0, 7) StepsML ^= "<quad size='"^14 * Ratio^" 14' halign='center' valign='center' image='"^C_ImgBase^"SimpleSteps/Step"^I^".png' id='Quad_MarkerStep"^I^"' />";
	
	return """
<manialink version="3" name="LibInvasionUI:GoldMarker">
<frame id="Frame_GoldMarker" scale="0">
	<frame id="Frame_GaugeSteps">{{{StepsML}}}</frame>
	<quad size="{{{6 * Ratio}}} 10" halign="center" valign="center" image="{{{C_ImgBase}}}IconCrystalGold.png" />
	<quad size="{{{6 * Ratio}}} 10" halign="center" valign="center" image="{{{C_ImgBase}}}IconCrystalGoldEmpty.png" />
	<quad size="{{{14 * Ratio}}} 14" halign="center" valign="center" image="{{{C_ImgBase}}}SimpleBG.png" />
</frame>

<script><!--
/**
 *	LibInvasionUI: GoldMarker
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_GaugeColors [0. => <1., 0., 0.>, 1. => <1., 1., 0.>]

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_GoldMarker <=> (Page.GetFirstChild("Frame_GoldMarker") as CMlFrame);

declare CMlQuad[] Quad_MarkerSteps;
for (I, 0, 7) Quad_MarkerSteps.add((Page.GetFirstChild("Quad_MarkerStep"^I) as CMlQuad));

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare ShowGoldMarker = False;
declare GoldSpawnTime = -1;
declare GoldSpawnDuration = -1;
declare CurGoldSpawnId = -1;
declare GaugeRatio = 0.;

declare PrevSettingsUpdate = -1;
declare PrevShowGoldMarker = False;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***	
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
			case "GoldSpawnDuration" : GoldSpawnDuration = TL::ToInteger(SettingValue);
			case "GoldSpawnTime" : GoldSpawnTime = TL::ToInteger(SettingValue);
			case "CurGoldSpawnId" : CurGoldSpawnId = TL::ToInteger(SettingValue);
		}
	}
}

ShowGoldMarker = DisplayInterface && GoldSpawnDuration > 0 && GameTime <= GoldSpawnTime + GoldSpawnDuration;

// ---------------------------------- //
// Hide the Gold marker if player has already picked it
if (ShowGoldMarker && GUIPlayer != Null) {
	declare netread Integer Net_LibInvasionUI_PlayerGoldSpawnId for GUIPlayer;
	if (Net_LibInvasionUI_PlayerGoldSpawnId == CurGoldSpawnId) ShowGoldMarker = False;
}

// ---------------------------------- //
// Set Gold marker visibility
if (PrevShowGoldMarker != ShowGoldMarker) {
	PrevShowGoldMarker = ShowGoldMarker;
	
	declare TargetScale = 1.;
	declare TargetEasing = CAnimManager::EAnimManagerEasing::BackOut;
	
	if (!ShowGoldMarker) {
		TargetScale = 0.;
		TargetEasing = CAnimManager::EAnimManagerEasing::BackIn;
	}
	
	AnimMgr.Add(Frame_GoldMarker, "<frame scale='"^TargetScale^"' />", 500, TargetEasing);
}

if (!ShowGoldMarker) continue;

// ---------------------------------- //
// Set gauge ratio
GaugeRatio = 1. - ML::Clamp(ML::ToReal(GameTime - GoldSpawnTime) / GoldSpawnDuration, 0., 1.);

// ---------------------------------- //
// Display gauge steps
for (I, 0, 7) {
	declare StepStart = 1/8. * I;
	declare StepEnd = StepStart + 1/8.;
	
	declare Opacity = 0.;
	if (GaugeRatio >= StepStart) Opacity = (GaugeRatio - StepStart) * 8;
	if (GaugeRatio >= StepEnd) Opacity = 1.;
	
	Quad_MarkerSteps[I].Opacity = Opacity;
	Quad_MarkerSteps[I].Colorize = ColorTransition(GaugeRatio, C_GaugeColors);
}
***

{{{ManialinkTools::Functions(["ColorTransition"])}}}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the custom weapon bar module
 *
 *	@return		The manialink
 */
Text Private_CreateMLCustomWeaponBar() {
	return """
<manialink version="3" name="LibInvasionUI:CustomWeaponBar">
<stylesheet>
	<style id="Label_CustomWeaponName" textsize="2" textfont="Eurostile_Bold" textcolor="888" textprefix="$T" />
	<style id="Label_EvoBonusAmount" textemboss="1" textfont="Eurostile_Bold" textcolor="FFF" />
	<style id="Label_EvolutionSubtitle" textemboss="1" textsize="1" textfont="Eurostile_Bold" textcolor="FFF" />
</stylesheet>

<frame id="Frame_CustomWeaponBar" pos="{{{C_LibInvasionUI_WeaponBarPos.X^" "^C_LibInvasionUI_WeaponBarPos.Y}}}" scale="0">
	<label pos="0 -2.25" size="31 3" halign="center" valign="center2" id="Label_CustomWeaponName" text="Unassigned" />
	<frame id="Frame_EvolutionBonus" pos="52.5 1.5" hidden="1">
		<label pos="0 1.5" halign="center" valign="center2" id="Label_EvoBonusAmount" text="+0s" />
		<label pos="0 -1.5" halign="center" valign="center2" id="Label_EvolutionSubtitle" text="EVO" />
	</frame>
	<quad size="96 12" halign="center" valign="center" image="{{{C_ImgBase}}}UiWeaponGaugeFg.png" />
	<quad pos="-45 1.75" size="90 4" valign="center" id="Quad_WeaponDurationBar" bgcolor="000" />
</frame>

<quad z-index="-20" size="320 180" halign="center" valign="center" image="{{{C_ImgBase}}}BonusEffect.dds" opacity="0" id="Quad_ScreenEdgeGlow" />

<script><!--
/**
 *	LibInvasionUI: CustomWeaponBar
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_SpectatorOffset	12.

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_CustomWeaponBar	<=> (Page.GetFirstChild("Frame_CustomWeaponBar")	as CMlFrame);
declare Quad_WeaponDurationBar	<=> (Page.GetFirstChild("Quad_WeaponDurationBar")	as CMlQuad);
declare Label_CustomWeaponName	<=> (Page.GetFirstChild("Label_CustomWeaponName")	as CMlLabel);
declare Frame_EvolutionBonus	<=> (Page.GetFirstChild("Frame_EvolutionBonus")		as CMlFrame);
declare Label_EvoBonusAmount	<=> (Page.GetFirstChild("Label_EvoBonusAmount")		as CMlLabel);
declare Quad_ScreenEdgeGlow		<=> (Page.GetFirstChild("Quad_ScreenEdgeGlow")		as CMlQuad);

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare DisplayInterface = False;
declare ShowCustomWeaponBar = False;
declare GUIColor = <1., 1., 1.>;
declare CurWeaponName = "Unassigned";

declare PlayerHasCustomWeapon = False;
declare PlayerWeaponBuffStartTime = 0;
declare PlayerWeaponBuffDuration = 0;
declare PlayerWeaponEvolutionBonus = 0;

declare PrevSettingsUpdate = -1;
declare PrevShowCustomWeaponBar = False;
declare PrevInterfaceColor = -1.;
declare PrevWeaponName = "";
declare PrevEvolutionBonus = -1;

declare PrevIsSpectatorClient = False;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : DisplayInterface = SettingValue == "True";
		}
	}
}

// ---------------------------------- //
// Read current player weapon data
if (GUIPlayer != Null && GUIPlayer.Position != <0., 0., 0.>) {
	declare netread Integer Net_LibInvasionUI_PlayerWeaponStartTime for GUIPlayer;
	declare netread Integer Net_LibInvasionUI_PlayerWeaponDuration for GUIPlayer;
	declare netread Integer Net_LibInvasionUI_PlayerWeaponEvoBonus for GUIPlayer;

	PlayerWeaponBuffStartTime	= Net_LibInvasionUI_PlayerWeaponStartTime;
	PlayerWeaponBuffDuration	= Net_LibInvasionUI_PlayerWeaponDuration;
	PlayerWeaponEvolutionBonus	= Net_LibInvasionUI_PlayerWeaponEvoBonus;

	PlayerHasCustomWeapon = GameTime < PlayerWeaponBuffStartTime + PlayerWeaponBuffDuration + PlayerWeaponEvolutionBonus;
}

ShowCustomWeaponBar = DisplayInterface && GUIPlayer != Null && PlayerHasCustomWeapon;

// ---------------------------------- //
// Set weapon gauge visibility
if (PrevShowCustomWeaponBar != ShowCustomWeaponBar) {
	PrevShowCustomWeaponBar = ShowCustomWeaponBar;
	
	declare TargetScale = 1.;
	declare TargetEasing = CAnimManager::EAnimManagerEasing::BackOut;
	
	if (!ShowCustomWeaponBar) {
		TargetScale = 0.;
		TargetEasing = CAnimManager::EAnimManagerEasing::BackIn;
	}
	
	AnimMgr.Add(Frame_CustomWeaponBar, "<frame scale='"^TargetScale^"' />", 500, TargetEasing);
	AnimMgr.Add(Quad_ScreenEdgeGlow, "<frame opacity='"^TargetScale * .75^"' />", 500, TargetEasing);
}

if (!ShowCustomWeaponBar) continue;

// ---------------------------------- //
// Set the frame offset in spectator mode
if (PrevIsSpectatorClient != IsSpectatorClient) {
	PrevIsSpectatorClient = IsSpectatorClient;

	Frame_CustomWeaponBar.RelativePosition_V3 = {{{C_LibInvasionUI_WeaponBarPos}}};
	if (IsSpectatorClient) Frame_CustomWeaponBar.RelativePosition_V3.Y += C_SpectatorOffset;
}

// Magic!
Quad_ScreenEdgeGlow.RelativeScale = 1.1 + .1 * Pulse(Now, 1.);
Quad_ScreenEdgeGlow.RelativeRotation = (Pulse(Now + 250, 1.) - .5) * 2.5;

// ---------------------------------- //
// Update the interface color
if (PrevInterfaceColor != GUIPlayer.GetLinearHue) {
	PrevInterfaceColor = GUIPlayer.GetLinearHue;

	declare Color = HsvToRgb(<GUIPlayer.GetLinearHue, 1., 1.>);
	AnimMgr.Add(Quad_WeaponDurationBar, "<quad bgcolor='"^TL::ColorToText(Color)^"' />", 250, CAnimManager::EAnimManagerEasing::SineInOut);
	Quad_ScreenEdgeGlow.Colorize = Color;
}

// ---------------------------------- //
// Set the name of the weapon
declare netread Text Net_LibInvasionUI_PlayerWeaponName for GUIPlayer;
if (PrevWeaponName != Net_LibInvasionUI_PlayerWeaponName) {
	PrevWeaponName = Net_LibInvasionUI_PlayerWeaponName;
	Label_CustomWeaponName.Value = ReplaceChars(Translate(PrevWeaponName));
}

// ---------------------------------- //
// Display Evolution level time bonus
if (PrevEvolutionBonus != PlayerWeaponEvolutionBonus) {
	PrevEvolutionBonus = PlayerWeaponEvolutionBonus;
	
	Frame_EvolutionBonus.Visible = PlayerWeaponEvolutionBonus > 0;
	if (Frame_EvolutionBonus.Visible) Label_EvoBonusAmount.Value = "+"^PlayerWeaponEvolutionBonus / 1000^"s";
}

// ---------------------------------- //
// Set gauge ratio
declare GaugeRatio = 0.;
declare Duration = PlayerWeaponBuffDuration + PlayerWeaponEvolutionBonus;

if (Duration > 0) GaugeRatio = 1 - ML::ToReal(GameTime - PlayerWeaponBuffStartTime) / Duration;
Quad_WeaponDurationBar.Size.X = 90. * ML::Clamp(GaugeRatio, 0., 1.);
***

{{{Translations::InsertToManialink(["Handheld Charge", "Frozen Arrow", "Plasma Grenade", "Torpede", "Wide Rail"])}}}
{{{ManialinkTools::Functions(["Pulse", "ReplaceChars", "HsvToRgb"])}}}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the Toads counter module
 *
 *	@return		The manialink
 */
Text Private_CreateMLToadsCounter() {
	return """
<manialink version="3" name="LibInvasionUI:ToadsCounter">
<stylesheet>
	<style id="Label_ToadsAmount" scale=".5" textemboss="1" textfont="Eurostile_Bold" textcolor="FFF" />
</stylesheet>

<frame id="Frame_ToadsCounter" pos="{{{C_LibInvasionUI_ToadsCounterPos.X^" "^C_LibInvasionUI_ToadsCounterPos.Y}}}">
	<label pos="0" valign="bottom" id="Label_ToadsAmount" />
</frame>

<script><!--
/**
 *	LibInvasionUI: ToadsCounter
 */

#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	// ---------------------------------- //
	// Load interface elements
	declare Label_ToadsAmount <=> (Page.GetFirstChild("Label_ToadsAmount") as CMlLabel);

	declare netread Integer Net_LibInvasionUI_NbToadsSpawnedTotal for Teams[0];
	
	declare ToadsCount = 0;
	declare PrevToadsCount = -1;
	declare PrevTotalNbSpawned = -1;
	
	// ---------------------------------- //
	// Yield
	// ---------------------------------- //
	while (True) {
		yield;
		if (!PageIsVisible) continue;
		
		// ---------------------------------- //
		// Update the amount of Toads
		ToadsCount = 0;
		foreach (Player in Players) if (Player.IsBot) ToadsCount += 1;
		
		if (PrevToadsCount != ToadsCount || PrevTotalNbSpawned != Net_LibInvasionUI_NbToadsSpawnedTotal) {
			PrevToadsCount = ToadsCount;
			PrevTotalNbSpawned = Net_LibInvasionUI_NbToadsSpawnedTotal;
			Label_ToadsAmount.SetText(TL::Compose("Toads: %1 (%2)", TL::ToText(ToadsCount), TL::ToText(PrevTotalNbSpawned)));
		}
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the solo score module
 *
 *	@return		The manialink
 */
Text Private_CreateMLSoloScore() {
	return """
<manialink version="3" name="LibInvasionUI:SoloScore">
<stylesheet>
	<style class="fontB" halign="center" valign="center2" textemboss="1" textfont="Eurostile_Bold" textcolor="FFF" />
	<style class="medal" size="10 10" halign="center" />
</stylesheet>

<frame id="Frame_SoloScore" pos="{{{C_LibInvasionUI_SoloScorePos.X^" "^C_LibInvasionUI_SoloScorePos.Y}}}" scale="0">
	<frame pos="-40 43">
		<quad
			id="Quad_SoloScoreBgImage" pos="0 0 -1" size="80 86"
			image="file://Media/Manialinks/ShootMania/Common/ColoredScreen.dds"
		 />
		
		<label pos="40 -7" class="fontB" textsize="5" id="Label_CurrentMapName" />
		<label pos="40 -12" halign="center" class="fontB" textsize="2" id="Label_CurrentMapAuthor" />
		<quad pos="40 -16" size="26 26" halign="center" style="MedalsBig" substyle="MedalSlot" id="Quad_SoloScoreMedal" />
		
		<label pos="40 -48" halign="center" class="fontB" textsize="8" id="Label_ScorePointsTotal" />
		<label pos="40 -54" halign="center" class="fontB" textsize="2" id="Label_ScorePointsBest" />
		
		<frame pos="40 -58">
			<quad pos="-21" size="10 10" halign="center" style="MedalsBig" substyle="MedalBronze" />
			<label pos="-21 -12" halign="center" class="fontB" textsize="2" id="Label_ScoreBronze" />
			<quad pos="-7" size="10 10" halign="center" style="MedalsBig" substyle="MedalSilver" />
			<label pos="-7 -12" halign="center" class="fontB" textsize="2" id="Label_ScoreSilver" />
			<quad pos="7" size="10 10" halign="center" style="MedalsBig" substyle="MedalGold" />
			<label pos="7 -12" halign="center" class="fontB" textsize="2" id="Label_ScoreGold" />
			<quad pos="21" size="10 10" halign="center" style="MedalsBig" substyle="MedalNadeo" />
			<label pos="21 -12" halign="center" class="fontB" textsize="2" id="Label_ScoreAuthor" />
		</frame>
		
		<label pos="40 -76" size="76 3" class="fontB" textsize="1" textprefix="$t" id="Label_Tip1" />
		<label pos="40 -79" size="76 3" class="fontB" textsize="1" textprefix="$t" id="Label_Tip2" />
	</frame>
</frame>

<script><!--
/**
 *	LibInvasionUI: SoloScore
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_MedalColors [<.2, .2, .2>, <1., .6, 0.>, <.7, .7, .7>, <1., .8, 0.>, <.7, 1., 0.>]
#Const C_MedalStyles ["MedalSlot", "MedalBronze", "MedalSilver", "MedalGold", "MedalNadeo"]

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_SoloScore			<=> (Page.GetFirstChild("Frame_SoloScore")			as CMlFrame);
declare Quad_SoloScoreBgImage	<=> (Page.GetFirstChild("Quad_SoloScoreBgImage")	as CMlQuad);
declare Quad_SoloScoreMedal		<=> (Page.GetFirstChild("Quad_SoloScoreMedal")		as CMlQuad);
declare Label_CurrentMapName	<=> (Page.GetFirstChild("Label_CurrentMapName")		as CMlLabel);
declare Label_CurrentMapAuthor	<=> (Page.GetFirstChild("Label_CurrentMapAuthor")	as CMlLabel);
declare Label_ScorePointsTotal	<=> (Page.GetFirstChild("Label_ScorePointsTotal")	as CMlLabel);
declare Label_ScorePointsBest	<=> (Page.GetFirstChild("Label_ScorePointsBest")	as CMlLabel);

declare Label_ScoreBronze	<=> (Page.GetFirstChild("Label_ScoreBronze")	as CMlLabel);
declare Label_ScoreSilver	<=> (Page.GetFirstChild("Label_ScoreSilver")	as CMlLabel);
declare Label_ScoreGold		<=> (Page.GetFirstChild("Label_ScoreGold")		as CMlLabel);
declare Label_ScoreAuthor	<=> (Page.GetFirstChild("Label_ScoreAuthor")	as CMlLabel);

// Translations
Translate("Label_Tip1", ["Press '%1' to try again", "Delete"]);
Translate("Label_Tip2", ["Press '%1' to go back to menu", "Esc"]);

// ---------------------------------- //
// Display current map information
Label_CurrentMapName.SetText(Map.MapName);
Label_CurrentMapAuthor.SetText(Map.AuthorLogin);
Label_ScoreBronze.SetText(Map.ObjectiveTextBronze);
Label_ScoreSilver.SetText(Map.ObjectiveTextSilver);
Label_ScoreGold.SetText(Map.ObjectiveTextGold);
Label_ScoreAuthor.SetText(Map.ObjectiveTextAuthor);

// ---------------------------------- //
// Persistent settings
declare persistent Integer[Text] Persistent_Invasion_MapBestScores for LocalUser;

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];

// ---------------------------------- //
// Variables
declare ShowSoloScore = False;

declare PrevSettingsUpdate = -1;
declare PrevShowSoloScore = False;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "ShowSoloScore" : ShowSoloScore = SettingValue == "True";
			
			// ---------------------------------- //
			// Display medal
			case "SoloScoreMedal" : {
				declare Medal = ML::Clamp(TL::ToInteger(SettingValue), 0, 4);
				Quad_SoloScoreBgImage.Colorize = C_MedalColors[Medal];
				Quad_SoloScoreMedal.Substyle = C_MedalStyles[Medal];
			}
			// ---------------------------------- //
			// Display map scores
			case "SoloScorePoints" : {
				declare SoloScore = ML::Max(TL::ToInteger(SettingValue), 0);
				declare MapID = Map.MapInfo.MapUid^"";
				
				// ---------------------------------- //
				// Save map best score
				if (
					!Persistent_Invasion_MapBestScores.existskey(MapID) ||
					Persistent_Invasion_MapBestScores[MapID] < SoloScore
				) 
					Persistent_Invasion_MapBestScores[MapID] = SoloScore;
				
				// ---------------------------------- //
				// Display scores
				Label_ScorePointsTotal.SetText(TL::ToText(SoloScore));
				Label_ScorePointsBest.SetText(TL::Compose(_("Best: %1"), ""^Persistent_Invasion_MapBestScores[MapID]));
			}
		}
	}
}

// ---------------------------------- //
// Set solo score visibility
if (PrevShowSoloScore != ShowSoloScore) {
	PrevShowSoloScore = ShowSoloScore;
	
	declare TargetScale = 1.;
	declare TargetEasing = CAnimManager::EAnimManagerEasing::BackOut;
	
	if (!ShowSoloScore) {
		TargetScale = 0.;
		TargetEasing = CAnimManager::EAnimManagerEasing::BackIn;
	}
	
	AnimMgr.Add(Frame_SoloScore, "<frame scale='"^TargetScale^"' />", 500, TargetEasing);
}
***

{{{Translations::InsertToManialink(["Press '%1' to try again", "Press '%1' to go back to menu"])}}}

main() {
	wait(Map != Null);
	---Main---
	sleep(1000);
	
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the boss health module
 *
 *	@return		The manialink
 */
Text Private_CreateMLBossHealth() {
	declare HealthFramesML = "";
	for (I, 0, C_LibInvasionUI_MaxBossesBars - 1)
		HealthFramesML ^= "<frameinstance pos='0 "^-3.5 * I^"' modelid='FrameModel_BossHealth' id='Frame_BossHealth"^I^"' hidden='1' />";
	
	return """
<manialink version="3" name="LibInvasionUI:BossHealth">
<framemodel id="FrameModel_BossHealth">
	<label pos="35 -1.75" size="6" halign="center" valign="center2" textsize="1" textfont="Eurostile_Bold" textemboss="1" textcolor="AAA" id="Label_BossArmor" />
	<quad size="80 3.5" halign="center" image="{{{C_ImgBase}}}UiBossHealthRow.png" />
	<quad pos="-37.5 0" size="69 3.5" bgcolor="AF0" id="Quad_BossHealthGauge" />
</framemodel>

<frame id="Frame_BossHealthWindow" pos="{{{C_LibInvasionUI_BossHealthPos.X^" "^C_LibInvasionUI_BossHealthPos.Y}}}" hidden="1">
	<quad size="80 3.5" halign="center" valign="bottom" image="{{{C_ImgBase}}}UiBossHealthTop.png" />
	<quad size="80 3.5" halign="center" image="{{{C_ImgBase}}}UiBossHealthBottom.png" id="Quad_FrameBottomImage" />
	{{{HealthFramesML}}}
</frame>

<script><!--
/**
 *	LibInvasionUI: BossHealth
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_GaugeColors [0. => <1., 0., 0.>, .25 => <1., 1., 0.>, .5 => <1., 1., 0.>, 1. => <.5, 1., 0.>]

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_BossHealthWindow <=> (Page.GetFirstChild("Frame_BossHealthWindow") as CMlFrame);
declare Quad_FrameBottomImage <=> (Page.GetFirstChild("Quad_FrameBottomImage") as CMlQuad);

declare CMlFrame[] Frame_BossHealthBars;
for (I, 0, {{{C_LibInvasionUI_MaxBossesBars - 1}}})
	Frame_BossHealthBars.add((Page.GetFirstChild("Frame_BossHealth"^I) as CMlFrame));

// ---------------------------------- //
// Netcode
declare netread Integer Net_LibInvasionUI_SettingsUpdate for Teams[0];
declare netread Text[Text] Net_LibInvasionUI_Settings for Teams[0];
declare netread Integer[][] Net_LibInvasionUI_BossesHealthInfo for Teams[0];
declare netread Integer Net_LibInvasionUI_BosesHealthUpdate for Teams[0];

declare DisplayBossHealth = False;

declare PrevSettingsUpdate = -1;
declare PrevNbHealthFrames = 0;
declare PrevUpdateTime = -1;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***	
// ---------------------------------- //
// Update settings
if (PrevSettingsUpdate != Net_LibInvasionUI_SettingsUpdate) {
	PrevSettingsUpdate = Net_LibInvasionUI_SettingsUpdate;
	
	foreach (SettingName => SettingValue in Net_LibInvasionUI_Settings) {
		switch (SettingName) {
			case "DisplayInterface" : {
				DisplayBossHealth = SettingValue == "True";
				PrevUpdateTime = -1;
			}
		}
	}
}

// ---------------------------------- //
// On bosses health gauges update
if (PrevUpdateTime == Net_LibInvasionUI_BosesHealthUpdate) continue;
PrevUpdateTime = Net_LibInvasionUI_BosesHealthUpdate;

// ---------------------------------- //
// Set the frame visibility
Frame_BossHealthWindow.Visible = DisplayBossHealth && Net_LibInvasionUI_BossesHealthInfo.count > 0;
if (!Frame_BossHealthWindow.Visible) continue;	

// Background image positioning
Quad_FrameBottomImage.RelativePosition_V3.Y = -3.5 * Net_LibInvasionUI_BossesHealthInfo.count;

// ---------------------------------- //
// Update gauges ratios
foreach (I => Frame in Frame_BossHealthBars) {
	Frame.Visible = Net_LibInvasionUI_BossesHealthInfo.existskey(I);
	if (!Frame.Visible) continue;
	
	// ---------------------------------- //
	// Get the health of the boss
	declare BossHealthInfo = Net_LibInvasionUI_BossesHealthInfo[I];
	if (BossHealthInfo.count < 2) continue;
	
	declare BossArmor = BossHealthInfo[0];
	declare BossArmorMax = BossHealthInfo[1];
	
	// ---------------------------------- //
	// Update only on health amount change
	declare PrevBossArmor for Frame = -1;
	if (PrevBossArmor == BossArmor) continue;
	PrevBossArmor = BossArmor;
	
	// ---------------------------------- //
	// Update the gauge
	declare Quad_BossHealthGauge <=> (Frame.GetFirstChild("Quad_BossHealthGauge") as CMlQuad);
	declare Label_BossArmor <=> (Frame.GetFirstChild("Label_BossArmor") as CMlLabel);
	
	// Set gauge ratio
	declare GaugeRatio = 1.;
	if (BossArmorMax > 0) GaugeRatio = ML::Clamp(ML::ToReal(BossArmor) / BossArmorMax, 0., 1.);
	
	Quad_BossHealthGauge.Size.X = 69. * GaugeRatio;
	Quad_BossHealthGauge.BgColor = ColorTransition(GaugeRatio, C_GaugeColors);
	
	// Set gauge text
	Label_BossArmor.Value = TL::ToText(BossArmor / 100);
}
***

{{{ManialinkTools::Functions(["ColorTransition"])}}}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create the manialink for the weapons statistics module
 *
 *	@return		The weapons statistics manialink 
 */
Text Private_CreateMLWeaponStats() {
	return """
<manialink version="3" name="LibInvasionUI:WeaponStats">
<frame id="Frame_Overheating" pos="148 -75" rot="2" hidden="1">
	<gauge pos="-1" size="48 8" halign="right" valign="center" drawbg="0" drawblockbg="0" id="Gauge_Overheating" />
	<quad size="6 6" halign="center" valign="center" image="{{{C_ImgBase}}}Icons/Heating.png" id="Quad_Overheating" />
</frame>

<script><!--
/**
 *	InvasionUI - Overheating
 */

#Include "MathLib" as ML

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_Overheating <=> (Page.GetFirstChild("Frame_Overheating") as CMlFrame);
declare Gauge_Overheating <=> (Page.GetFirstChild("Gauge_Overheating") as CMlGauge);
declare Quad_Overheating <=> (Page.GetFirstChild("Quad_Overheating") as CMlQuad);

// ---------------------------------- //
// Variables
declare OverheatingMaxDuration = 20000.;
declare InterfaceColor = LocalUser.Color;

/// Update
declare PrevGUIPlayerLogin = "";
declare PrevInterfaceColor = -1.;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Set overheating bar visibility
Frame_Overheating.Visible = GUIPlayer != Null && GUIPlayer.Position != <0., 0., 0.>;
if (!Frame_Overheating.Visible) continue;

// ---------------------------------- //
// Hide the gauge if current weapon is not overheating
declare netread Integer[Integer] Net_LibInvasionUI_PlayerOverheating for GUIPlayer;
if (!Net_LibInvasionUI_PlayerOverheating.existskey(GUIPlayer.CurWeapon) || GameTime >= Net_LibInvasionUI_PlayerOverheating[GUIPlayer.CurWeapon]) {
	Frame_Overheating.Visible = False;
	continue;
}

// ---------------------------------- //
// Update the interface color
if (PrevInterfaceColor != GUIPlayer.GetLinearHue) {
	PrevInterfaceColor = GUIPlayer.GetLinearHue;
	Gauge_Overheating.Color = HsvToRgb(<PrevInterfaceColor, 1., 1.>);
}

// ---------------------------------- //
// Set overheating bar ratio
declare CurPlayerHeatRatio = ML::Clamp((Net_LibInvasionUI_PlayerOverheating[GUIPlayer.CurWeapon] - GameTime) / OverheatingMaxDuration, 0., 1.);
SetGaugeRatio(Gauge_Overheating, CurPlayerHeatRatio);
***

{{{ManialinkTools::Functions(["SetGaugeRatio", "HsvToRgb"])}}}

main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Load a module
 *
 *	@param	_ModuleId	The name of the module to load
 */
Void LoadModule(Text _ModuleId) {
	if (Private_ModuleIsLoaded(_ModuleId)) return;
	G_LibInvasionUI_ModulesLoaded.add(_ModuleId);
	
	Layers::Create(_ModuleId);
	declare ManialinkText = "";
	
	switch (_ModuleId) {
		case "CountdownInfo"	: ManialinkText = Private_CreateMLCountdownInfo();
		case "PoleGauge"		: ManialinkText = Private_CreateMLPoleGauge();
		case "ToadsArmor"		: ManialinkText = Private_CreateMLToadsArmor();
		case "Score"			: ManialinkText = Private_CreateMLScore();
		case "MedalScore"		: ManialinkText = Private_CreateMLMedalScore();
		case "Evolution"		: ManialinkText = Private_CreateMLEvolution();
		case "CustomWeaponBar"	: ManialinkText = Private_CreateMLCustomWeaponBar();
		case "SoloScore"		: ManialinkText = Private_CreateMLSoloScore();
		case "BossHealth"		: ManialinkText = Private_CreateMLBossHealth();
		case "WeaponStats"		: ManialinkText = Private_CreateMLWeaponStats();
		case "GoldMarker" : {
			ManialinkText = Private_CreateMLGoldMarker();
			Layers::SetType(_ModuleId, CUILayer::EUILayerType::Markers);
		}
		case "ToadsCounter"	: {
			ManialinkText = Private_CreateMLToadsCounter();
			Layers::SetType(_ModuleId, CUILayer::EUILayerType::ScoresTable);
		}
	}
	
	Layers::Update(_ModuleId, ManialinkText);
	Layers::Attach(_ModuleId);
}

// ---------------------------------- //
/** Load several modules
 *
 *	@param	_ModulesIds		A list of modules to load with the library
 */
Void LoadModules(Text[] _ModulesIds) {
	foreach (ModuleId in _ModulesIds) LoadModule(ModuleId);
}

// ---------------------------------- //
/// Load all available modules
Void LoadAllModules() {
	LoadModules(C_AvailableModules);
}

// ---------------------------------- //
/** Unload a module
 *
 *	@param	_ModuleId		The name of the module to unload
 */
Void UnloadModule(Text _ModuleId) {
	declare Removed = G_LibInvasionUI_ModulesLoaded.remove(_ModuleId);
	if (!Removed) return;
	
	Layers::Detach(_ModuleId);
	Layers::Destroy(_ModuleId);
}

// ---------------------------------- //
/** Unload several modules
 *
 *	@param	_ModulesIds		A list of modules to unload
 */
Void UnloadModules(Text[] _ModulesIds) {
	foreach (ModuleId in _ModulesIds) UnloadModule(ModuleId);
}

// ---------------------------------- //
/// Unoad all loaded modules
Void UnloadAllModules() {
	UnloadModules(G_LibInvasionUI_ModulesLoaded);
}

// ---------------------------------- //
/** Set the interface visibility
 *
 *	@param	_DisplayInterface	Interface visibility
 */
Void SetDisplayInterface(Boolean _DisplayInterface) {
	Private_SetModuleSetting("DisplayInterface", ""^_DisplayInterface);
}

// ---------------------------------- //
/** Set the game start time
 *
 *	@param	_StartTime	Start time
 */
Void SetStartTime(Integer _StartTime) {
	Private_SetModuleSetting("StartTime", TL::ToText(_StartTime));
}

// ---------------------------------- //
/** Set the amount of waves remaining to the Invasion phase
 *
 *	@param	_WavesToInvasion	Amount of waves to Invasion phase
 */
Void SetNbWavesToInvasion(Integer _WavesToInvasion) {
	Private_SetModuleSetting("WavesToInvasion", TL::ToText(_WavesToInvasion));
}

// ---------------------------------- //
/** Set the pole limit
 *
 *	@param	_PoleLimit	Pole limit
 */
Void SetPoleLimit(Integer _PoleLimit) {
	Private_SetModuleSetting("PoleLimit", TL::ToText(_PoleLimit));
}

// ---------------------------------- //
/** Set the amount of Toads that reached pole
 *
 *	@param	_NbToadsReachedPole		Amount of Toads that reached pole
 */
Void SetNbToadsReachedPole(Integer _NbToadsReachedPole) {
	Private_SetModuleSetting("NbToadsReachedPole", TL::ToText(_NbToadsReachedPole));
}

// ---------------------------------- //
/** Set the current amount of Toads Armor points
 *
 *	@param	_ToadsArmor		Amount of Toads Armor points
 */
Void SetToadsArmor(Integer _ToadsArmor) {
	Private_SetModuleSetting("ToadsArmor", TL::ToText(_ToadsArmor));
}

// ---------------------------------- //
/** Define if the game is in campaign mode
 *
 *	@param	_IsSoloMode		True, if mode is played in solo campaign
 */
Void SetSoloMode(Boolean _IsSoloMode) {
	Private_SetModuleSetting("IsSoloMode", TL::ToText(_IsSoloMode));
}

// ---------------------------------- //
/** Define if the game is giving points for survived time in solo mode
 *
 *	@param	_TimeScoreCounting		Time score usage
 */
Void SetTimeScoreCounting(Boolean _TimeScoreCounting) {
	Private_SetModuleSetting("TimeScoreCounting", TL::ToText(_TimeScoreCounting));
}

// ---------------------------------- //
/** Set the Evolution system usage
 *
 *	@param	_UseEvolution	True, if the Evolution system is in use
 */
Void SetUseEvolution(Boolean _UseEvolution) {
	Private_SetModuleSetting("UseEvolution", TL::ToText(_UseEvolution));
}

// ---------------------------------- //
/** Display solo score summary window
 *
 *	@param	_DisplayWindow	Solo score visibility
 *	@param	_WonMedalType	Player solo medal score
 *	@param	_TotalPoints	Player solo points
 */
Void DisplaySoloScore(Boolean _DisplayWindow, ::EMedal _WonMedalType, Integer _TotalPoints) {
	declare Medal = 0;
	switch (_WonMedalType) {
		case ::EMedal::Bronze : Medal = 1;
		case ::EMedal::Silver : Medal = 2;
		case ::EMedal::Gold : Medal = 3;
		case ::EMedal::Author : Medal = 4;
	}
	
	Private_SetModuleSetting("ShowSoloScore", TL::ToText(_DisplayWindow));
	Private_SetModuleSetting("SoloScoreMedal", TL::ToText(Medal));
	Private_SetModuleSetting("SoloScorePoints", TL::ToText(_TotalPoints));
}

// ---------------------------------- //
/** Update the player Evolution information.
 *
 *	@param	_Player		Player to update Evolution info.
 *	@param	_Level		Evolution level of the player.
 *	@param	_CurPoints	Current amount of points to next Evolution level.
 *	@param	_ToNext		Evolution points required for next level.
 */
Void SetPlayerEvolutionData(CSmPlayer _Player, Integer _Level, Integer _CurPoints, Integer _ToNext) {
	if (_Player == Null) return;

	declare netwrite Integer Net_LibInvasionUI_PlayerEvolutionLevel for _Player;
	declare netwrite Integer Net_LibInvasionUI_PlayerEvolutionCurPoints for _Player;
	declare netwrite Integer Net_LibInvasionUI_PlayerEvolutionToNext for _Player;

	Net_LibInvasionUI_PlayerEvolutionLevel = _Level;
	Net_LibInvasionUI_PlayerEvolutionCurPoints = _CurPoints;
	Net_LibInvasionUI_PlayerEvolutionToNext = _ToNext;
}

// ---------------------------------- //
/** Set the spawn id of the latest Gold item pickd by the player.
 *
 *	@param	_Player			Player to set spawn id.
 *	@param	_GoldSpawnId	Id of the latest Gold item picked by the player.
 */
Void SetPlayerGoldSpawnId(CSmPlayer _Player, Integer _GoldSpawnId) {
	if (_Player == Null) return;
	declare netwrite Integer Net_LibInvasionUI_PlayerGoldSpawnId for _Player;
	Net_LibInvasionUI_PlayerGoldSpawnId = _GoldSpawnId;
}

// ---------------------------------- //
/** Set the information about custom weapon used by the player.
 *
 *	@param	_Player		Player to update weapon information.
 *	@param	_StartTime	Time when the weapon has been equipped.
 *	@param	_Duration	Duration of the custom weapon effect (including Evolution bonus).
 *	@param	_EvoBonus	Additional time obtained from the Evolution levels (cosmetic only).
 */
Void SetPlayerWeaponData(CSmPlayer _Player, Integer _StartTime, Integer _Duration, Integer _EvoBonus) {
	if (_Player == Null) return;

	declare netwrite Integer Net_LibInvasionUI_PlayerWeaponStartTime for _Player;
	declare netwrite Integer Net_LibInvasionUI_PlayerWeaponDuration for _Player;
	declare netwrite Integer Net_LibInvasionUI_PlayerWeaponEvoBonus for _Player;

	Net_LibInvasionUI_PlayerWeaponStartTime = _StartTime;
	Net_LibInvasionUI_PlayerWeaponDuration = _Duration;
	Net_LibInvasionUI_PlayerWeaponEvoBonus = _EvoBonus;
}

// ---------------------------------- //
/** Set the name of a custom weapon used by the player.
 *
 *	@param	_Player			Player to set the weapon name.
 *	@param	_WeaponName		Name of the custom weapon used by the player.
 */
Void SetPlayerWeaponName(CSmPlayer _Player, Text _WeaponName) {
	if (_Player == Null) return;
	declare netwrite Text Net_LibInvasionUI_PlayerWeaponName for _Player;
	Net_LibInvasionUI_PlayerWeaponName = _WeaponName;
}

Void SetTotalNbToadSpawned(Integer _NbToadsSpawned) {
	declare netwrite Integer Net_LibInvasionUI_NbToadsSpawnedTotal for Teams[0];
	Net_LibInvasionUI_NbToadsSpawnedTotal = ML::Max(_NbToadsSpawned, 0);
}

// ---------------------------------- //
/** Set Gold item marker data
 *
 *	@param	_GoldPosition		Position of the Gold item
 *	@param	_GoldSpawnTime		Gold item spawn time
 *	@param	_GoldSpawnDuration	Gold item life duration
 *	@param	_GoldSpawnId		Gold item life id
 */
Void UpdateGoldMarker(Vec3 _GoldPosition, Integer _GoldSpawnTime, Integer _GoldSpawnDuration, Integer _GoldSpawnId) {
	Private_SetModuleSetting("GoldSpawnTime", TL::ToText(_GoldSpawnTime));
	Private_SetModuleSetting("GoldSpawnDuration", TL::ToText(_GoldSpawnDuration));
	Private_SetModuleSetting("CurGoldSpawnId", TL::ToText(_GoldSpawnId));
	
	// ---------------------------------- //
	// Create or destroy marker
	if (_GoldPosition == <0., 0., 0.>) UIManager.UIAll.MarkersXML = "";
	else UIManager.UIAll.MarkersXML = "<marker manialinkframeid='Frame_GoldMarker' box='.5 1.25 .5' visibility='WhenInFrustum' pos='"^_GoldPosition.X^" "^_GoldPosition.Y^" "^_GoldPosition.Z^"' />";
		
}

// ---------------------------------- //
/** Set the information about spawned bosses health.
 *
 *	@param	_HealthHealthInfo	Bosses health.
 */
Void SetBossesHealth(Integer[][] _HealthHealthInfo) {
	declare netwrite Integer[][] Net_LibInvasionUI_BossesHealthInfo for Teams[0];
	declare netwrite Integer Net_LibInvasionUI_BosesHealthUpdate for Teams[0];
	Net_LibInvasionUI_BossesHealthInfo = _HealthHealthInfo;
	Net_LibInvasionUI_BosesHealthUpdate = Now;
}

// ---------------------------------- //
/** Set the information about player weapons overheating
 *
 *	@param	_HealthHealthInfo	Bosses health
 */
Void SetPlayerOverheating(CSmPlayer _Player, Integer _WeaponNum, Integer _OverheatEndTime) {
	if (_Player == Null || _Player.IsBot) return;
	declare netwrite Integer[Integer] Net_LibInvasionUI_PlayerOverheating for _Player;
	Net_LibInvasionUI_PlayerOverheating[_WeaponNum] = _OverheatEndTime;
}

// ---------------------------------- //
/// Completely reset UI settings before a match start
Void InitializeMatch() {
	SetDisplayInterface(False);
	SetUseEvolution(False);
	SetTimeScoreCounting(False);
	SetNbToadsReachedPole(0);
	SetPoleLimit(0);
	SetToadsArmor(0);
	SetBossesHealth(Integer[][]);
	
	DisplaySoloScore(False, ::EMedal::None, 0);
	UpdateGoldMarker(Vec3, 0, 0, 0);
}