// -------------------------------------- //
//  LIBRARY TRANSLATIONS by domino54      //
//  script version: 2016-09-25            //
// -------------------------------------- //

/**
 *	This library allows to display translated messages,
 *	if they're featured in dedicated SentenceBank library.
 *	Instead TextLib compose function, use arrays: Text[].
 *	Chat messages MUST be prefixed.
 */

#Const Version		"2016-09-25"
#Const ScriptName	"Translations.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/domino54/SentenceBank.Script.txt" as SB

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_LibTranslations_DefaultChatPrefix "$FD0Â» $FFF"	///< Default chat message prefix

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Text G_LibTranslations_ChatPrefix;	///< Custom chat message prefix

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Return translation depending on selected language
 *
 *	@param	_Language		The language sentence will be translated to
 *	@param	_Sentence		The sentence to translate
 *
 *	@return		Translated sentence
 */
Text Translate(Text _Language, Text _Sentence) {
	if (_Sentence == "" || _Language == "" || _Language == "en" || _Language == "en_GB") return _Sentence;
	
	// Get sentence index
	declare SentenceIndex = SB::GetIndex(_Sentence);
	if (SentenceIndex == SB::UnknownIndex()) return _Sentence;
	
	// Translate sentence to target language
	declare Text TranslatedSentence;
	switch (_Language) {
		case "cz" : TranslatedSentence = SB::GetCzech(SentenceIndex);
		case "de" : TranslatedSentence = SB::GetGerman(SentenceIndex);
		case "es" : TranslatedSentence = SB::GetSpanish(SentenceIndex);
		case "fr" : TranslatedSentence = SB::GetFrench(SentenceIndex);
		case "hr" : TranslatedSentence = SB::GetCroatian(SentenceIndex);
		case "nl" : TranslatedSentence = SB::GetDutch(SentenceIndex);
		case "pl" : TranslatedSentence = SB::GetPolish(SentenceIndex);
		case "pt" : TranslatedSentence = SB::GetPortuguese(SentenceIndex);
		case "pt_BR" : TranslatedSentence = SB::GetPortuguese(SentenceIndex);
		case "ru" : TranslatedSentence = SB::GetRussian(SentenceIndex);
		case "sk" : TranslatedSentence = SB::GetSlovak(SentenceIndex);
		default : return _Sentence;
	}
	
	if (TranslatedSentence == SB::NotFoundString()) return _Sentence;
	return TranslatedSentence;
}

// ---------------------------------- //
/** Return translation using custom Compose function
 *
 *	@param	_Language		The language sentences will be translated to
 *	@param	_Arguments		The arguments for the compose function
 *
 *	@return		Translated sentence
 */
Text Translate(Text _Language, Text[] _Arguments) {
	if (_Arguments.count <= 0) return "";
	if (_Arguments[0] == "") return "";
	
	declare Base = Translate(_Language, _Arguments[0]);
	foreach (I => Argument in _Arguments) {
		if (I == 0) continue;
		Base = TL::Replace(Base, "%"^I, Translate(_Language, Argument));
	}
	return Base;
}

// ---------------------------------- //
/** Return translation using Compose function
 *
 *	@deprecated		Use Translate() function instead
 *
 *	@param	_Language		The language sentences will be translated to
 *	@param	_Prefix			Text to attach before basic argument
 *	@param	_Arguments		The arguments for the compose function
 *	@param	_Suffix			Text to attach after basic argument
 *
 *	@return		Translated sentence
 */
Text Compose(Text _Language, Text _Prefix, Text[] _Arguments, Text _Suffix) {
	if (_Arguments.count <= 0) return _Prefix^_Suffix;
	if (_Arguments.count == 1) return _Prefix^Translate(_Language, _Arguments[0])^_Suffix;
	return _Prefix^Translate(_Language, _Arguments)^_Suffix;
}

// ---------------------------------- //
/** Set interface message for specified player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Message	The message to set
 *	@param	_Level		Type of the message
 */
Void Private_SetMessage(CPlayer _Player, Text _Message, Text _Type) {
	if (_Type == "" || _Player == Null || _Player.User == Null || _Player.User.IsFakeUser) return;
	declare UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare TranslatedMessage = Translate(_Player.User.Language, _Message);
	
	switch (_Type) {
		case "big" : UI.BigMessage = TranslatedMessage;
		case "status" : UI.StatusMessage = TranslatedMessage;
		case "gauge" : UI.GaugeMessage = TranslatedMessage;
	}
}

// ---------------------------------- //
/** Set interface message for specified player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Arguments	The message and arguments to compose
 *	@param	_Level		Type of the message
 */
Void Private_SetComposedMessage(CPlayer _Player, Text[] _Arguments, Text _Type) {
	if (_Type == "" || _Arguments.count <= 0 || _Player == Null || _Player.User == Null || _Player.User.IsFakeUser) return;
	declare UI <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	declare TranslatedMessage = Translate(_Player.User.Language, _Arguments);
	
	switch (_Type) {
		case "big" : UI.BigMessage = TranslatedMessage;
		case "status" : UI.StatusMessage = TranslatedMessage;
		case "gauge" : UI.GaugeMessage = TranslatedMessage;
	}
}

// ---------------------------------- //
/** Set custom chat prefix
 *
 *	@param	_Prefix		Text to attach before translations
 */
Void SetChatPrefix(Text _Prefix) { G_LibTranslations_ChatPrefix = _Prefix; }

// ---------------------------------- //
/** Send chat message to specified player
 *
 *	@param	_Player			Player to receive a message
 *	@param	_Message		Message to send
 */
Void SendChat(CPlayer _Player, Text _Message) {
	if (_Message == "" || _Player == Null || _Player.User == Null || _Player.User.IsFakeUser) return;
	
	// Load default chat prefix
	if (G_LibTranslations_ChatPrefix == "") G_LibTranslations_ChatPrefix = C_LibTranslations_DefaultChatPrefix;
	
	declare UI <=> UIManager.GetUI(_Player);
	if (UI != Null) UI.SendChat(G_LibTranslations_ChatPrefix^Translate(_Player.User.Language, _Message));
}

// ---------------------------------- //
/** Send chat message to all players
 *
 *	@param	_Message		Message be send
 */
Void SendChat(Text _Message) {
	foreach (Player in AllPlayers) SendChat(Player, _Message);
}

// ---------------------------------- //
/** Send composed chat message to specified player
 *
 *	@param	_Player			Player to receive a message
 *	@param	_Arguments		Arguments of the message to send
 */
Void SendChat(CPlayer _Player, Text[] _Arguments) {
	if (_Arguments.count <= 0 || _Player == Null || _Player.User == Null || _Player.User.IsFakeUser) return;
	
	// Load default chat prefix
	if (G_LibTranslations_ChatPrefix == "") G_LibTranslations_ChatPrefix = C_LibTranslations_DefaultChatPrefix;
	
	declare UI <=> UIManager.GetUI(_Player);
	if (UI != Null) UI.SendChat(G_LibTranslations_ChatPrefix^Translate(_Player.User.Language, _Arguments));
}

// ---------------------------------- //
/** Send composed chat message to all players
 *
 *	@param	_Arguments		Arguments of the message to send
 */
Void SendChat(Text[] _Arguments) {
	foreach (Player in AllPlayers) SendChat(Player, _Arguments);
}

// ---------------------------------- //
/** Set big message for a player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Message	The message to set
 */
Void SetBigMessage(CPlayer Player, Text _Message) {
	Private_SetMessage(Player, _Message, "big");
}

// ---------------------------------- //
/** Set big message for a player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Arguments	The message and arguments to compose
 */
Void SetBigMessage(CPlayer Player, Text[] _Arguments) {
	Private_SetComposedMessage(Player, _Arguments, "big");
}

// ---------------------------------- //
/** Set big message for all players
 *
 *	@param	_Player		Player to set a message
 *	@param	_Message	The message to set
 */
Void SetBigMessage(Text _Message) {
	foreach (Player in AllPlayers) Private_SetMessage(Player, _Message, "big");
}

// ---------------------------------- //
/** Set big message for all players
 *
 *	@param	_Player		Player to set a message
 *	@param	_Arguments	The message and arguments to compose
 */
Void SetBigMessage(Text[] _Arguments) {
	foreach (Player in AllPlayers) Private_SetComposedMessage(Player, _Arguments, "big");
}

// ---------------------------------- //
/** Set status message for a player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Message	The message to set
 */
Void SetStatusMessage(CPlayer Player, Text _Message) {
	Private_SetMessage(Player, _Message, "status");
}

// ---------------------------------- //
/** Set status message for a player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Arguments	The message and arguments to compose
 */
Void SetStatusMessage(CPlayer Player, Text[] _Arguments) {
	Private_SetComposedMessage(Player, _Arguments, "status");
}

// ---------------------------------- //
/** Set status message for all players
 *
 *	@param	_Player		Player to set a message
 *	@param	_Message	The message to set
 */
Void SetStatusMessage(Text _Message) {
	foreach (Player in AllPlayers) Private_SetMessage(Player, _Message, "status");
}

// ---------------------------------- //
/** Set status message for all players
 *
 *	@param	_Player		Player to set a message
 *	@param	_Arguments	The message and arguments to compose
 */
Void SetStatusMessage(Text[] _Arguments) {
	foreach (Player in AllPlayers) Private_SetComposedMessage(Player, _Arguments, "status");
}

// ---------------------------------- //
/** Set gauge message for a player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Message	The message to set
 */
Void SetGaugeMessage(CPlayer Player, Text _Message) {
	Private_SetMessage(Player, _Message, "gauge");
}

// ---------------------------------- //
/** Set gauge message for a player
 *
 *	@param	_Player		Player to set a message
 *	@param	_Arguments	The message and arguments to compose
 */
Void SetGaugeMessage(CPlayer Player, Text[] _Arguments) {
	Private_SetComposedMessage(Player, _Arguments, "gauge");
}

// ---------------------------------- //
/** Set gauge message for all players
 *
 *	@param	_Player		Player to set a message
 *	@param	_Message	The message to set
 */
Void SetGaugeMessage(Text _Message) {
	foreach (Player in AllPlayers) Private_SetMessage(Player, _Message, "gauge");
}

// ---------------------------------- //
/** Set gauge message for all players
 *
 *	@param	_Player		Player to set a message
 *	@param	_Arguments	The message and arguments to compose
 */
Void SetGaugeMessage(Text[] _Arguments) {
	foreach (Player in AllPlayers) Private_SetComposedMessage(Player, _Arguments, "gauge");
}

// ---------------------------------- //
/** Send notice to specified player (SM)
 *
 *	@param	_Player				Player to receive a notice
 *	@param	_Notice				Notice to send
 *	@param	_Level				Level of the notice
 *	@param	_Avatar				User to use avatar as icon
 *	@param	_AvatarVariant		Variant of the user's avatar
 *	@param	_Sound				Notice sound
 *	@param	_SoundVariant		Variant of the notice sound
 */
Void SendNotice(CPlayer _Player, Text _Notice, CUIConfig::ENoticeLevel _Level, CUser _Avatar, CUIConfig::EAvatarVariant _AvatarVariant, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	if (_Notice == "" || _Player == Null || _Player.User == Null || _Player.User.IsFakeUser) return;
	
	declare UI <=> UIManager.GetUI(_Player);
	if (UI != Null) UI.SendNotice(Translate(_Player.User.Language, _Notice), _Level, _Avatar, _AvatarVariant, _Sound, _SoundVariant);
}

// ---------------------------------- //
/** Send notice to all players (SM)
 *
 *	@param	_Notice				Notice to send
 *	@param	_Level				Level of the notice
 *	@param	_Avatar				User to use avatar as icon
 *	@param	_AvatarVariant		Variant of the user's avatar
 *	@param	_Sound				Notice sound
 *	@param	_SoundVariant		Variant of the notice sound
 */
Void SendNotice(Text _Notice, CUIConfig::ENoticeLevel _Level, CUser _Avatar, CUIConfig::EAvatarVariant _AvatarVariant, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) SendNotice(Player, _Notice, _Level, _Avatar, _AvatarVariant, _Sound, _SoundVariant);
}

// ---------------------------------- //
/** Send composed notice to specified player (SM)
 *
 *	@param	_Player				Player to receive a notice
 *	@param	_Arguments			Arguments of the notice to send
 *	@param	_Level				Level of the notice
 *	@param	_Avatar				User to use avatar as icon
 *	@param	_AvatarVariant		Variant of the user's avatar
 *	@param	_Sound				Notice sound
 *	@param	_SoundVariant		Variant of the notice sound
 */
Void SendNotice(CPlayer _Player, Text[] _Arguments, CUIConfig::ENoticeLevel _Level, CUser _Avatar, CUIConfig::EAvatarVariant _AvatarVariant, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	if (_Arguments.count <= 0 || _Player == Null || _Player.User == Null || _Player.User.IsFakeUser) return;
	
	declare UI <=> UIManager.GetUI(_Player);
	if (UI != Null) UI.SendNotice(Translate(_Player.User.Language, _Arguments), _Level, _Avatar, _AvatarVariant, _Sound, _SoundVariant);
}

// ---------------------------------- //
/** Send composed notice to all players (SM)
 *
 *	@param	_Arguments			Arguments of the notice to send
 *	@param	_Level				Level of the notice
 *	@param	_Avatar				User to use avatar as icon
 *	@param	_AvatarVariant		Variant of the user's avatar
 *	@param	_Sound				Notice sound
 *	@param	_SoundVariant		Variant of the notice sound
 */
Void SendNotice(Text[] _Arguments, CUIConfig::ENoticeLevel _Level, CUser _Avatar, CUIConfig::EAvatarVariant _AvatarVariant, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) SendNotice(Player, _Arguments, _Level, _Avatar, _AvatarVariant, _Sound, _SoundVariant);
}

// ---------------------------------- //
/** Insert library functions inside a manialink
 *
 *	@param	_Sentences		List of sentences to include in manialink
 *
 *	@return		Text containing generated functions
 */
Text InsertToManialink(Text[] _Sentences) {
	// Create languages sentence banks
	declare Text[Text] SentenceBanks;
	declare Languages = ["en", "cz", "de", "es", "fr", "hr", "nl", "pl", "pt", "ru", "sk"];
	foreach (Language in Languages) SentenceBanks[Language] = "-1 => \"\"";
	
	// Fill banks with available translations
	foreach (Sentence in _Sentences) {
		declare Index = SB::GetIndex(Sentence);
		if (Index != SB::UnknownIndex()) {
			SentenceBanks["en"] ^= ", "^Index^" => \""^TL::MLEncode(Sentence)^"\"";
			SentenceBanks["cz"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetCzech(Index))^"\"";
			SentenceBanks["de"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetGerman(Index))^"\"";
			SentenceBanks["es"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetSpanish(Index))^"\"";
			SentenceBanks["fr"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetFrench(Index))^"\"";
			SentenceBanks["hr"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetCroatian(Index))^"\"";
			SentenceBanks["nl"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetDutch(Index))^"\"";
			SentenceBanks["pl"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetPolish(Index))^"\"";
			SentenceBanks["pt"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetPortuguese(Index))^"\"";
			SentenceBanks["ru"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetRussian(Index))^"\"";
			SentenceBanks["sk"] ^= ", "^Index^" => \""^TL::MLEncode(SB::GetSlovak(Index))^"\"";
		}
	}
	
	return """
// ---------------------------------- //
// Translations Start
// ---------------------------------- //

Integer Private_LibTranslations_GetIndex(Text _Sentence) {
	declare C_LibSB_Index = [{{{SentenceBanks["en"]}}}];
	if (C_LibSB_Index.exists(_Sentence)) return C_LibSB_Index.keyof(_Sentence);
	return {{{SB::UnknownIndex()}}};
}

Text Private_LibTranslations_GetCzech(Integer _Index) {
	declare C_LibSB_Czech = [{{{SentenceBanks["cz"]}}}];
	if (C_LibSB_Czech.existskey(_Index)) return C_LibSB_Czech[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetGerman(Integer _Index) {
	declare C_LibSB_German = [{{{SentenceBanks["de"]}}}];
	if (C_LibSB_German.existskey(_Index)) return C_LibSB_German[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetSpanish(Integer _Index) {
	declare C_LibSB_Spanish = [{{{SentenceBanks["es"]}}}];
	if (C_LibSB_Spanish.existskey(_Index)) return C_LibSB_Spanish[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetFrench(Integer _Index) {
	declare C_LibSB_French = [{{{SentenceBanks["fr"]}}}];
	if (C_LibSB_French.existskey(_Index)) return C_LibSB_French[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetCroatian(Integer _Index) {
	declare C_LibSB_Croatian = [{{{SentenceBanks["hr"]}}}];
	if (C_LibSB_Croatian.existskey(_Index)) return C_LibSB_Croatian[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetDutch(Integer _Index) {
	declare C_LibSB_Dutch = [{{{SentenceBanks["nl"]}}}];
	if (C_LibSB_Dutch.existskey(_Index)) return C_LibSB_Dutch[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetPolish(Integer _Index) {
	declare C_LibSB_Polish = [{{{SentenceBanks["pl"]}}}];
	if (C_LibSB_Polish.existskey(_Index)) return C_LibSB_Polish[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetPortuguese(Integer _Index) {
	declare C_LibSB_Portuguese = [{{{SentenceBanks["pt"]}}}];
	if (C_LibSB_Portuguese.existskey(_Index)) return C_LibSB_Portuguese[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetRussian(Integer _Index) {
	declare C_LibSB_Russian = [{{{SentenceBanks["ru"]}}}];
	if (C_LibSB_Russian.existskey(_Index)) return C_LibSB_Russian[_Index];
	return "{{{SB::NotFoundString()}}}";
}

Text Private_LibTranslations_GetSlovak(Integer _Index) {
	declare C_LibSB_Slovak = [{{{SentenceBanks["sk"]}}}];
	if (C_LibSB_Slovak.existskey(_Index)) return C_LibSB_Slovak[_Index];
	return "{{{SB::NotFoundString()}}}";
}

CMlLabel Private_LibTranslations_GetLabel(Text _LabelId) {
	if (_LabelId == "") return Null;
	declare LibTranslations_Control <=> Page.GetFirstChild(_LabelId);
	
	if (LibTranslations_Control is CMlLabel) return (LibTranslations_Control as CMlLabel);
	return Null;
}

Text Translations_Get(Text _Sentence) {
	if (_Sentence == "" || LocalUser.Language == "en" || LocalUser.Language == "en_GB") return _Sentence;
	
	declare SentenceIndex = Private_LibTranslations_GetIndex(_Sentence);
	if (SentenceIndex == {{{SB::UnknownIndex()}}}) return _Sentence;
	
	declare Text TranslatedSentence;
	switch (LocalUser.Language) {
		case "cz" : TranslatedSentence = Private_LibTranslations_GetCzech(SentenceIndex);
		case "de" : TranslatedSentence = Private_LibTranslations_GetGerman(SentenceIndex);
		case "es" : TranslatedSentence = Private_LibTranslations_GetSpanish(SentenceIndex);
		case "fr" : TranslatedSentence = Private_LibTranslations_GetFrench(SentenceIndex);
		case "hr" : TranslatedSentence = Private_LibTranslations_GetCroatian(SentenceIndex);
		case "nl" : TranslatedSentence = Private_LibTranslations_GetDutch(SentenceIndex);
		case "pl" : TranslatedSentence = Private_LibTranslations_GetPolish(SentenceIndex);
		case "pt" : TranslatedSentence = Private_LibTranslations_GetPortuguese(SentenceIndex);
		case "pt_BR" : TranslatedSentence = Private_LibTranslations_GetPortuguese(SentenceIndex);
		case "ru" : TranslatedSentence = Private_LibTranslations_GetRussian(SentenceIndex);
		case "sk" : TranslatedSentence = Private_LibTranslations_GetSlovak(SentenceIndex);
		default : return _Sentence;
	}
	
	if (TranslatedSentence == "{{{SB::NotFoundString()}}}") return _Sentence;
	return TL::GetTranslatedText(TranslatedSentence);
}

Text Translations_GetComposed(Text[] _Arguments) {
	if (_Arguments.count == 1) return Translations_Get(_Arguments[0]);
	declare Base = TL::GetTranslatedText(Translations_Get(_Arguments[0]));
	if (Base == "") return "";
	
	foreach (I => Argument in _Arguments) {
		if (I == 0) continue;
		Base = TL::Replace(Base, "%"^I, TL::GetTranslatedText(Translations_Get(Argument)));
	}
	
	return Base;
}

// ---------------------------------- //
/** Get string translated into local user language
 *
 *	@param	_String		The string to translate
 *
 *	@return		Translated string, when translation is available
 */
Text Translate(Text _String) {
	return Translations_Get(_String);
}

// ---------------------------------- //
/** Get string translated into local user language
 *
 *	@param	_Arguments		The arguments of a string to translate
 *
 *	@return		Translated string, when translation is available
 */
Text Translate(Text[] _Arguments) {
	return Translations_GetComposed(_Arguments);
}

// ---------------------------------- //
/** Put translated string into a label value
 *
 *	@param	_LabelId	The ID of the label to translate
 *	@param	_String		The string to translate
 */
Void Translate(Text _LabelId, Text _String) {
	declare LibTranslations_Label = Private_LibTranslations_GetLabel(_LabelId);
	if (LibTranslations_Label != Null) LibTranslations_Label.Value = Translate(_String);
}

// ---------------------------------- //
/** Put translated string into a label value
 *
 *	@param	_LabelId		The ID of the label to translate
 *	@param	_Arguments		The arguments of a string to translate
 */
Void Translate(Text _LabelId, Text[] _Arguments) {
	declare LibTranslations_Label = Private_LibTranslations_GetLabel(_LabelId);
	if (LibTranslations_Label != Null) LibTranslations_Label.Value = Translate(_Arguments);
}

// ---------------------------------- //
// Translations Stop
// ---------------------------------- //
	""";
}

// ---------------------------------- //
// Message library extension
// ---------------------------------- //

Void SendBigMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendBigMessage(_Player, Translate(_Player.User.Language, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendBigMessage(Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) SendBigMessage(Player, _Message, _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendBigMessage(CPlayer _Player, Text[] _Arguments, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendBigMessage(_Player, Translate(_Player.User.Language, _Arguments), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendBigMessage(Text[] _Arguments, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) SendBigMessage(Player, _Arguments, _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendStatusMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendStatusMessage(_Player, Translate(_Player.User.Language, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendStatusMessage(Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) SendStatusMessage(Player, _Message, _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendStatusMessage(CPlayer _Player, Text[] _Arguments, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendStatusMessage(_Player, Translate(_Player.User.Language, _Arguments), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendStatusMessage(Text[] _Arguments, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) SendStatusMessage(Player, _Arguments, _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendBigMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendBigMessage(_Player, Translate(_Player.User.Language, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendBigMessage(Text _Message, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) SendBigMessage(Player, _Message, _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendBigMessage(CPlayer _Player, Text[] _Arguments, Integer _Duration, Integer _Priority) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendBigMessage(_Player, Translate(_Player.User.Language, _Arguments), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendBigMessage(Text[] _Arguments, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) SendBigMessage(Player, _Arguments, _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendStatusMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendStatusMessage(_Player, Translate(_Player.User.Language, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendStatusMessage(Text _Message, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) SendStatusMessage(Player, _Message, _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendStatusMessage(CPlayer _Player, Text[] _Arguments, Integer _Duration, Integer _Priority) {
	if (_Player == Null || _Player.User == Null) return;
	Message::SendStatusMessage(_Player, Translate(_Player.User.Language, _Arguments), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendStatusMessage(Text[] _Arguments, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) SendStatusMessage(Player, _Arguments, _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}