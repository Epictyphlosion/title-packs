// -------------------------------------- //
//  TRANSLATIONS LIB by domino54          //
//  script version: 2015-03-08            //
// -------------------------------------- //

/**
 *	This library can be used to display translated
 *	messages, if they exists in SentenceBank lib.
 */

#Const Version			"2015-03-08"
#Const ScriptName		"Translations.Script.txt"

#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/domino54/SentenceBank.Script.txt" as SentenceBank

#Const C_ErrorMessage		"$F00Translation error!"	///< Something went wrong while translating
#Const C_DefaultChatPrefix	"$777Â» $FFF"				///< Default chat message prefix

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/** Translate text or return input
 *
 *	@param	_Player		Player to check language
 *	@param	_Message	Text to be translated
 *
 *	@return		Translated text
 */
Text GetTranslation(CPlayer _Player, Text _Message) {
	if (_Player == Null || _Player.User == Null) return _Message;
	declare MessageId = SentenceBank::GetIndex(_Message);
	
	// Message is not available
	if (MessageId == 0) return _Message;
	
	declare Text ReturnedText;
	
	// Browse available languages
	switch (_Player.User.Language) {
		case "de" : ReturnedText = SentenceBank::GetGerman(MessageId);
		case "fr" : ReturnedText = SentenceBank::GetFrench(MessageId);
		case "nl" : ReturnedText = SentenceBank::GetDutch(MessageId);
		case "pl" : ReturnedText = SentenceBank::GetPolish(MessageId);
		case "ru" : ReturnedText = SentenceBank::GetRussian(MessageId);
		case "sk" : ReturnedText = SentenceBank::GetSlovak(MessageId);
		default : ReturnedText = "";
	}
	
	// Translation not found
	if (ReturnedText == "") return _Message;
	
	// Translation found
	return ReturnedText;
}

// ---------------------------------- //
/** Translate message and attach composes
 *
 *	@param	_Player		Player to check language
 *	@param	_Com		Text and its composes to be translated
 *	@param	_Prefix		Text to be attached before message (eg. team color, arrow)
 *
 *	@return		Translated message
 */
Text GetComposedTranslation(CPlayer _Player, Text[] _Com, Text _Prefix) {
	if (_Com.count < 1 || _Com.count > 6) return C_ErrorMessage;
	if (_Player == Null || _Player.User == Null) return _Com[0];
	
	declare Text ReturnedText;
	
	// Get translation of primary message
	declare BaseMsg = _Prefix^GetTranslation(_Player, _Com[0]);
	
	// Compose
	switch (_Com.count) {
		case 2 : ReturnedText = TextLib::Compose(BaseMsg, _Com[1]);
		case 3 : ReturnedText = TextLib::Compose(BaseMsg, _Com[1], _Com[2]);
		case 4 : ReturnedText = TextLib::Compose(BaseMsg, _Com[1], _Com[2], _Com[3]);
		case 5 : ReturnedText = TextLib::Compose(BaseMsg, _Com[1], _Com[2], _Com[3], _Com[4]);
		case 6 : ReturnedText = TextLib::Compose(BaseMsg, _Com[1], _Com[2], _Com[3], _Com[4], _Com[5]);
		default : ReturnedText = BaseMsg;
	}
	
	return ReturnedText;
}

// ---------------------------------- //
/** Translate message and attach composes
 *
 *	@param	_Player		Player to check language
 *	@param	_Com		Text and its composes to be translated
 *
 *	@return		Translated message
 */
Text GetComposedTranslation(CPlayer _Player, Text[] _Com) {
	return GetComposedTranslation(_Player, _Com, "");
}

// ---------------------------------- //
/** Send chat message
 *
 *	@param	_Player			Player that gets translated message
 *	@param	_Message		A message that has to be translated
 */
Void SendChat(CPlayer _Player, Text _Message) {
	if (_Player == Null) return;
	
	// SM: Bots can't receive messages
	if (This is CSmMode) {
		declare SmPlayer <=> (_Player as CSmPlayer);
		if (SmPlayer == Null || SmPlayer.IsBot || SmPlayer.IsFakePlayer) return;
	}
	
	declare UI for _Player <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	UI.SendChat(GetTranslation(_Player, _Message));
}

// ---------------------------------- //
/** Send chat message (with composes)
 *
 *	@param	_Player			Player that gets translated message
 *	@param	_Message		A message that has to be translated
 */
Void SendChat(CPlayer _Player, Text[] _Message) {
	if (_Player == Null) return;
	if (_Message.count < 1 || _Message.count > 6) return;
	
	// SM: Bots can't receive messages
	if (This is CSmMode) {
		declare SmPlayer <=> (_Player as CSmPlayer);
		if (SmPlayer == Null || SmPlayer.IsBot || SmPlayer.IsFakePlayer) return;
	}
	
	declare UI for _Player <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	UI.SendChat(GetComposedTranslation(_Player, _Message, C_DefaultChatPrefix));
}

// ---------------------------------- //
/** Send chat message
 *
 *	@param	_Message		A message that has to be translated
 */
Void SendChat(Text _Message) {
	foreach (Player in AllPlayers) SendChat(Player, _Message);
}

// ---------------------------------- //
/** Send chat message (with composes)
 *
 *	@param	_Message		A message that has to be translated
 */
Void SendChat(Text[] _Message) {
	foreach (Player in AllPlayers) SendChat(Player, _Message);
}

// ---------------------------------- //
/** Send UI notice (SM only)
 *
 *	@param	_Player			Player that gets translated notice
 *	@param	_Message		A message that has to be translated
 *	@param	_NoticeSound	Play pop sound
 */
Void SendNotice(CPlayer _Player, Text _Message, Boolean _NoticeSound) {
	if (!(This is CSmMode)) return;
	if (_Player == Null) return;
	
	// SM: Bots can't receive messages
	if (This is CSmMode) {
		declare SmPlayer <=> (_Player as CSmPlayer);
		if (SmPlayer == Null || SmPlayer.IsBot || SmPlayer.IsFakePlayer) return;
	}
	
	declare UI for _Player <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	// Play sound of keep notice silent
	declare CUIConfig::EUISound Sound;
	if (_NoticeSound) Sound = CUIConfig::EUISound::Notice;
	else Sound = CUIConfig::EUISound::Silence;
	
	UI.SendNotice(
		GetTranslation(_Player, _Message), 
		CUIConfig::ENoticeLevel::Default, Null, 
		CUIConfig::EAvatarVariant::Default, Sound, 0
	);
}

// ---------------------------------- //
/** Send UI notice (SM only, with composes)
 *
 *	@param	_Player			Player that gets translated notice
 *	@param	_Message		A message that has to be translated
 *	@param	_NoticeSound	Play pop sound
 */
Void SendNotice(CPlayer _Player, Text[] _Message, Boolean _NoticeSound) {
	if (!(This is CSmMode)) return;
	if (_Player == Null) return;
	if (_Message.count < 1 || _Message.count > 6) return;
	
	// SM: Bots can't receive messages
	if (This is CSmMode) {
		declare SmPlayer <=> (_Player as CSmPlayer);
		if (SmPlayer == Null || SmPlayer.IsBot || SmPlayer.IsFakePlayer) return;
	}
	
	declare UI for _Player <=> UIManager.GetUI(_Player);
	if (UI == Null) return;
	
	// Play sound of keep notice silent
	declare CUIConfig::EUISound Sound;
	if (_NoticeSound) Sound = CUIConfig::EUISound::Notice;
	else Sound = CUIConfig::EUISound::Silence;
	
	UI.SendNotice(
		GetComposedTranslation(_Player, _Message), 
		CUIConfig::ENoticeLevel::Default, Null, 
		CUIConfig::EAvatarVariant::Default, Sound, 0
	);
}

// ---------------------------------- //
/** Send UI notice (SM only)
 *
 *	@param	_Message		A message that has to be translated
 *	@param	_NoticeSound	Play pop sound
 */
Void SendNotice(Text _Message, Boolean _NoticeSound) {
	if (!(This is CSmMode)) return;
	foreach (Player in AllPlayers) SendNotice(Player, _Message, _NoticeSound);
}

// ---------------------------------- //
/** Send UI notice (SM only, with composes)
 *
 *	@param	_Message		A message that has to be translated
 *	@param	_NoticeSound	Play pop sound
 */
Void SendNotice(Text[] _Message, Boolean _NoticeSound) {
	if (!(This is CSmMode)) return;
	foreach (Player in AllPlayers) SendNotice(Player, _Message, _NoticeSound);
}

// ---------------------------------- //
/** Insert library functions into manialink
 *
 *	@param	_Messages	Messages to be inserted
 *
 *	@return		Translations module
 */
Text InsertToManialink(Text[] _Messages) {
	declare Text[Text] WordBanks;
	declare Langs = ["de", "fr", "nl", "pl", "ru", "sk"];
	foreach (Lang in Langs) WordBanks[Lang] = """0 => "" """;
	WordBanks["en"] = """ "" => 0 """;
	
	for (I, 0, _Messages.count - 1) {
		declare Index = SentenceBank::GetIndex(_Messages[I]);
		if (Index != 0) {
			// Add messages to banks
			WordBanks["en"] ^= """, "{{{_Messages[I]}}}" => {{{Index}}}""";
			WordBanks["de"] ^= """, {{{Index}}} => "{{{SentenceBank::GetGerman(Index)}}}" """;
			WordBanks["fr"] ^= """, {{{Index}}} => "{{{SentenceBank::GetFrench(Index)}}}" """;
			WordBanks["nl"] ^= """, {{{Index}}} => "{{{SentenceBank::GetDutch(Index)}}}" """;
			WordBanks["pl"] ^= """, {{{Index}}} => "{{{SentenceBank::GetPolish(Index)}}}" """;
			WordBanks["ru"] ^= """, {{{Index}}} => "{{{SentenceBank::GetRussian(Index)}}}" """;
			WordBanks["sk"] ^= """, {{{Index}}} => "{{{SentenceBank::GetSlovak(Index)}}}" """;
		}
	}
	
	return """
// ---------------------------------- //
// Lib Transations Start >
// ---------------------------------- //

// ---------------------------------- //
// Private
// ---------------------------------- //

Integer GetIndex(Text _Message) {
	declare IndexBank = [{{{WordBanks["en"]}}}];
	// Return index
	if (IndexBank.existskey(_Message)) return IndexBank[_Message];
	return 0;
}

Text GetGerman(Integer _Index) {
	declare GermanBank = [{{{WordBanks["de"]}}}];
	// Return translation
	if (GermanBank.existskey(_Index)) return GermanBank[_Index];
	return "";
}

Text GetFrench(Integer _Index) {
	declare FrenchBank = [{{{WordBanks["fr"]}}}];
	// Return translation
	if (FrenchBank.existskey(_Index)) return FrenchBank[_Index];
	return "";
}

Text GetDutch(Integer _Index) {
	declare DutchBank = [{{{WordBanks["nl"]}}}];
	// Return translation
	if (DutchBank.existskey(_Index)) return DutchBank[_Index];
	return "";
}

Text GetPolish(Integer _Index) {
	declare PolishBank = [{{{WordBanks["pl"]}}}];
	// Return translation
	if (PolishBank.existskey(_Index)) return PolishBank[_Index];
	return "";
}

Text GetRussian(Integer _Index) {
	declare RussianBank = [{{{WordBanks["ru"]}}}];
	// Return translation
	if (RussianBank.existskey(_Index)) return RussianBank[_Index];
	return "";
}

Text GetSlovak(Integer _Index) {
	declare SlovakBank = [{{{WordBanks["sk"]}}}];
	// Return translation
	if (SlovakBank.existskey(_Index)) return SlovakBank[_Index];
	return "";
}

// ---------------------------------- //
// Public
// ---------------------------------- //

Text Translations_Get(Text _Message) {
	if (LocalUser == Null) return _Message;
	declare MessageId = GetIndex(_Message);
	if (MessageId == 0) return _Message;
	declare Text OutputMessage;
	OutputMessage = _Message;
	switch (LocalUser.Language) {
		case "de" : OutputMessage = GetGerman(MessageId);
		case "fr" : OutputMessage = GetFrench(MessageId);
		case "nl" : OutputMessage = GetDutch(MessageId);
		case "pl" : OutputMessage = GetPolish(MessageId);
		case "ru" : OutputMessage = GetRussian(MessageId);
		case "sk" : OutputMessage = GetSlovak(MessageId);
	}
	if (OutputMessage == "") return _Message;
	return OutputMessage;
}

Text Translations_GetComposed(Text[] _Composes) {
	if (LocalUser == Null) return "{{{C_ErrorMessage}}}";
	if (_Composes.count < 1 || _Composes.count > 6) return "{{{C_ErrorMessage}}}";
	declare BaseMessage = Translations_Get(_Composes[0]);
	declare Text OutputMessage;
	switch (_Composes.count) {
		case 2 : OutputMessage = TL::Compose(BaseMessage, _Composes[1]);
		case 3 : OutputMessage = TL::Compose(BaseMessage, _Composes[1], _Composes[2]);
		case 4 : OutputMessage = TL::Compose(BaseMessage, _Composes[1], _Composes[2], _Composes[3]);
		case 5 : OutputMessage = TL::Compose(BaseMessage, _Composes[1], _Composes[2], _Composes[3], _Composes[4]);
		case 6 : OutputMessage = TL::Compose(BaseMessage, _Composes[1], _Composes[2], _Composes[3], _Composes[4], _Composes[5]);
		default : OutputMessage = BaseMessage;
	}
	return OutputMessage;
}

// ---------------------------------- //
// Lib Transations End < >
// ---------------------------------- //
	""";
}

// ---------------------------------- //
// Extend Message Library
// ---------------------------------- //

// ---------------------------------- //
// Big message
// ---------------------------------- //

// ---------------------------------- //
/// Send a big message with sound to player
Void SendBigMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	Message::SendBigMessage(_Player, GetTranslation(_Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendBigMessage(CPlayer _Player, Text[] _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	Message::SendBigMessage(_Player, GetComposedTranslation(_Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

// ---------------------------------- //
/// Send a big message without sound to player
Void SendBigMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority) {
	Message::SendBigMessage(_Player, GetTranslation(_Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendBigMessage(CPlayer _Player, Text[] _Message, Integer _Duration, Integer _Priority) {
	Message::SendBigMessage(_Player, GetComposedTranslation(_Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

// ---------------------------------- //
/// Send a big message with sound to all players
Void SendBigMessage(Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) Message::SendBigMessage(Player, GetTranslation(Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendBigMessage(Text[] _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) Message::SendBigMessage(Player, GetComposedTranslation(Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

// ---------------------------------- //
/// Send a big message without sound to all players
Void SendBigMessage(Text _Message, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) Message::SendBigMessage(Player, GetTranslation(Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendBigMessage(Text[] _Message, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) Message::SendBigMessage(Player, GetComposedTranslation(Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

// ---------------------------------- //
// Status message
// ---------------------------------- //

// ---------------------------------- //
/// Send a status message with sound to player
Void SendStatusMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	Message::SendStatusMessage(_Player, GetTranslation(_Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendStatusMessage(CPlayer _Player, Text[] _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	Message::SendStatusMessage(_Player, GetComposedTranslation(_Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

// ---------------------------------- //
/// Send a status message without sound to player
Void SendStatusMessage(CPlayer _Player, Text _Message, Integer _Duration, Integer _Priority) {
	Message::SendStatusMessage(_Player, GetTranslation(_Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendStatusMessage(CPlayer _Player, Text[] _Message, Integer _Duration, Integer _Priority) {
	Message::SendStatusMessage(_Player, GetComposedTranslation(_Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

// ---------------------------------- //
/// Send a status message with sound to all players
Void SendStatusMessage(Text _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) Message::SendStatusMessage(Player, GetTranslation(Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

Void SendStatusMessage(Text[] _Message, Integer _Duration, Integer _Priority, CUIConfig::EUISound _Sound, Integer _SoundVariant) {
	foreach (Player in AllPlayers) Message::SendStatusMessage(Player, GetComposedTranslation(Player, _Message), _Duration, _Priority, _Sound, _SoundVariant);
}

// ---------------------------------- //
/// Send a big message without sound to all players
Void SendStatusMessage(Text _Message, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) Message::SendStatusMessage(Player, GetTranslation(Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}

Void SendStatusMessage(Text[] _Message, Integer _Duration, Integer _Priority) {
	foreach (Player in AllPlayers) Message::SendStatusMessage(Player, GetComposedTranslation(Player, _Message), _Duration, _Priority, CUIConfig::EUISound::Silence, 0);
}
