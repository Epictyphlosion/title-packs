// -------------------------------------- //
//  LIBRARY CHECKPOINTS EDIT by domino54  //
//  script version: 2018-04-06            //
// -------------------------------------- //

#Const Version		"2018-04-06"
#Const ScriptName	"Libs/domino54/TrackMania/CheckpointsEdit.Script.txt"

// ---------------------------------- //
// Constants
// ---------------------------------- //

/// SUpported blocks list.
#Const C_LibCheckpointsEdit_AcceptedBlocks [
	// Canyon
	"RoadRaceCheckpointMirror",
	"RoadRaceCheckpoint",
	"RoadRaceSlopeCheckpointUp",
	"RoadRaceSlopeCheckpointUpMirror",
	"RoadRaceSlopeCheckpointDown",
	"RoadRaceSlopeCheckpointDownMirror",
	"RoadRaceTiltCheckpoint",
	"RoadRaceTiltCheckpointMirror",
	"ArenaCheckpointBase",
	"ArenaCheckpointSlopeStraightUp",
	"ArenaCheckpointSlopeStraightDown",
	"ArenaCheckpointSlopeStraightLeftAir",
	"ArenaCheckpointSlopeStraightRightAir",
	"OffRoadCheckpoint",
	"ArenaTunnelCheckpoint",
	"ArenaTunnelStraightOpen2SidesCheckpoint",
	"TubeCheckpoint",
	"TubeCheckpointVAir",
	"TubeCheckpointUnderground",
	"TubeCheckpointVUnderground",
	"RoadMainCheckpoint",
	"RoadMainCheckpointUp",
	"RoadMainCheckpointDown",
	"RoadHill2CheckpointLeft",
	"RoadHill2CheckpointRight",
	"Cliff12RoadHighCheckpointLeft",
	"Cliff12RoadHighCheckpointRight",
	"Cliff12RoadMedCheckpointLeft",
	"Cliff12RoadMedCheckpointRight",
	"RoadCaveCheckpoint",
	"RoadCaveCheckpointSlope2Up",
	"RoadCaveCheckpointSlope2Down",
	"RoadCaveDoubleCheckpoint",
	"RoadCaveDoubleCheckpointCenter",

	// Stadium
	"StadiumRoadMainCheckpoint",
	"StadiumGrassCheckpoint",
	"StadiumRoadMainCheckpointUp",
	"StadiumRoadMainCheckpointDown",
	"StadiumRoadMainCheckpointLeft",
	"StadiumRoadMainCheckpointRight",
	"StadiumCheckpointRingHRoad",
	"StadiumCheckpointRingV",
	"StadiumCheckpointRing2x1V",
	"StadiumCheckpointRing2x1H",
	"StadiumPlatformCheckpoint",
	"StadiumPlatformCheckpointDown",
	"StadiumPlatformCheckpointLeft",
	"StadiumPlatformCheckpointRight",
	"StadiumPlatformCheckpointUp",
	"StadiumPlatformGridCheckpoint",
	"StadiumRoadDirtCheckpoint",
	"StadiumRoadDirtHighCheckpoint",
	"StadiumTrenchCheckpoint",

	// Valley
	"Road2WayCheckpoint",
	"Road2WayForestCheckpoint",
	"Road2WayCheckpointSlopeUp",
	"Road2WayCheckpointSlopeDown",
	"Road4WayCheckpoint",
	"Road4WayCheckpointUp",
	"Road4WayCheckpointDown",
	"TunnelRoad4wayCheckpoint",
	"TunnelRoad4WayCheckpointUp",
	"TunnelRoad4WayCheckpointDown",
	"ArenaCheckpointParkRoofBaseAir",
	"ArenaCheckpointParkRoofSlopeStraightUpAir",
	"ArenaCheckpointParkRoofSlopeStraightDownAir",
	"ArenaCheckpointParkRoofSlopeLeft",
	"ArenaCheckpointParkRoofSlopeRight",
	"RoadForestLargeCheckpoint",
	"RoadDirtCheckpoint",
	"ViaducCheckpoint",
	"ViaducCheckpointSlopeUp",
	"ViaducCheckpointSlopeDown",
	"OffRoadCheckpoint",

	// Lagoon
	"RoadMainCheckpoint",
	"RoadMainCheckpointUp",
	"RoadMainCheckpointDown",
	"HighWaySlope2CheckpointUp",
	"HighWaySlope2CheckpointDown",
	"HighWaySlope2CheckpointLeft",
	"HighWaySlope2CheckpointRight",
	"FreeWayCheckpoint",
	"RoadThemeParkCheckpoint",
	"RoadThemeParkFlip-Checkpoint",
	"ArenaCheckpoint",
	"ArenaCheckpointUp",
	"ArenaCheckpointDown",
	"ArenaCheckpointLeft",
	"ArenaCheckpointRight",
	"RoadTunnelCheckpoint",
	"RoadTunnelCheckpointUp",
	"RoadTunnelCheckpointDown",
	"BeachCheckPointLeft",
	"BeachCheckPointRight",
	"LandCheckpoint",
	"LandHillCheckpointUp",
	"LandHillCheckpointDown",
	"LandHillCheckpointLeft",
	"LandHillCheckpointRight",
	"DecoCityCheckpoint"
]

/// Block triggers offset.
#Const C_LibCheckpointsEdit_TriggerOffsetY [
	// Canyon
	"RoadRaceSlopeCheckpointUp" => .5,
	"RoadRaceSlopeCheckpointUpMirror" => .5,
	"RoadRaceSlopeCheckpointDown" => .5,
	"RoadRaceSlopeCheckpointDownMirror" => .5,
	"ArenaCheckpointBase" => 1.,
	"ArenaCheckpointSlopeStraightUp" => 2.,
	"ArenaCheckpointSlopeStraightDown" => 2.,
	"ArenaCheckpointSlopeStraightLeftAir" => 1.,
	"ArenaCheckpointSlopeStraightRightAir" => 1.,
	"RoadMainCheckpointUp" => .5,
	"RoadMainCheckpointDown" => .5,
	"RoadHill2CheckpointLeft" => 1.,
	"RoadHill2CheckpointRight" => 1.,
	"RoadCaveCheckpoint" => 2.,
	"RoadCaveCheckpointSlope2Up" => 3.,
	"RoadCaveCheckpointSlope2Down" => 3.,
	"RoadCaveDoubleCheckpoint" => 2.,
	"RoadCaveDoubleCheckpointCenter" => .5,
	"Cliff12RoadMedCheckpointLeft" => 6.,
	"Cliff12RoadMedCheckpointRight" => 6.,
	"Cliff12RoadHighCheckpointLeft" => 10.,
	"Cliff12RoadHighCheckpointRight" => 10.,

	// Stadium
	"StadiumRoadMainCheckpointUp" => .5,
	"StadiumRoadMainCheckpointDown" => .5,
	"StadiumRoadDirtHighCheckpoint" => 1.,
	"StadiumPlatformCheckpoint" => 1.,
	"StadiumPlatformCheckpointDown" => 2.,
	"StadiumPlatformCheckpointUp" => 2.,
	"StadiumPlatformCheckpointLeft" => 1.,
	"StadiumPlatformCheckpointRight" => 1.,

	// Valley
	"Road2WayCheckpointSlopeUp" => .5,
	"Road2WayCheckpointSlopeDown" => .5,
	"Road4WayCheckpointUp" => .5,
	"Road4WayCheckpointDown" => .5,
	"TunnelRoad4WayCheckpointUp" => .5,
	"TunnelRoad4WayCheckpointDown" => .5,
	"ArenaCheckpointParkRoofSlopeStraightUpAir" => 1.,
	"ArenaCheckpointParkRoofSlopeStraightDownAir" => 1.,
	"ViaducCheckpoint" => 1.,
	"ViaducCheckpointSlopeUp" => 2.,
	"ViaducCheckpointSlopeDown" => 2.,

	// Lagoon
	"RoadMainCheckpointUp" => .5,
	"RoadMainCheckpointDown" => .5,
	"HighWaySlope2CheckpointUp" => 1.,
	"HighWaySlope2CheckpointDown" => 1.,
	"HighWaySlope2CheckpointLeft" => .5,
	"HighWaySlope2CheckpointRight" => .5,
	"ArenaCheckpoint" => 1.,
	"ArenaCheckpointUp" => 1.,
	"ArenaCheckpointDown" => 1.,
	"RoadTunnelCheckpointUp" => 1.5,
	"RoadTunnelCheckpointDown" => 1.5,
	"LandHillCheckpointUp" => .5,
	"LandHillCheckpointDown" => .5
]

/// Width of the block triggers.
#Const C_LibCheckpointsEdit_TriggerSizeX [
	// Canyon
	"RoadRaceCheckpointMirror" => 1.,
	"RoadRaceCheckpoint" => 1.,
	"RoadRaceSlopeCheckpointUp" => 1.,
	"RoadRaceSlopeCheckpointUpMirror" => 1.,
	"RoadRaceSlopeCheckpointDown" => 1.,
	"RoadRaceSlopeCheckpointDownMirror" => 1.,
	"RoadRaceTiltCheckpoint" => 1.,
	"RoadRaceTiltCheckpointMirror" => 1.,
	"ArenaCheckpointBase" => 1.,
	"ArenaCheckpointSlopeStraightUp" => 1.,
	"ArenaCheckpointSlopeStraightDown" => 1.,
	"ArenaCheckpointSlopeStraightLeftAir" => 1.,
	"ArenaCheckpointSlopeStraightRightAir" => 1.,
	"OffRoadCheckpoint" => 1.,
	"RoadCaveDoubleCheckpoint" => 1.,

	// Valley
	"Road2WayCheckpoint" => .333,
	"Road2WayForestCheckpoint" => .333,
	"Road4WayCheckpoint" => .75,
	"Road4WayCheckpointUp" => .75,
	"Road4WayCheckpointDown" => .75,
	"RoadForestLargeCheckpoint" => .666,
	"RoadDirtCheckpoint" => .666,
	"OffRoadCheckpoint" => .875,
	"ViaducCheckpoint" => .5,

	// Lagoon
	"ArenaCheckpoint" => 1.
]

/// Height of the block triggers.
#Const C_LibCheckpointsEdit_TriggerSizeY [
	// Canyon
	"RoadRaceCheckpointMirror" => 1.,
	"RoadRaceCheckpoint" => 1.,
	"RoadRaceSlopeCheckpointUp" => 1.,
	"RoadRaceSlopeCheckpointUpMirror" => 1.,
	"RoadRaceSlopeCheckpointDown" => 1.,
	"RoadRaceSlopeCheckpointDownMirror" => 1.,
	"RoadRaceTiltCheckpoint" => 1.,
	"RoadRaceTiltCheckpointMirror" => 1.,
	"ArenaCheckpointBase" => 1.,
	"ArenaCheckpointSlopeStraightUp" => 1.,
	"ArenaCheckpointSlopeStraightDown" => 1.,
	"ArenaCheckpointSlopeStraightLeftAir" => 2.,
	"ArenaCheckpointSlopeStraightRightAir" => 2.,
	"OffRoadCheckpoint" => 1.,
	"RoadCaveDoubleCheckpoint" => 1.,
	"RoadCaveDoubleCheckpoint" => 1.,
	"RoadCaveDoubleCheckpointCenter" => 1.,
	"Cliff12RoadMedCheckpointLeft" => 1.,
	"Cliff12RoadMedCheckpointRight" => 1.,
	"Cliff12RoadHighCheckpointLeft" => 1.,
	"Cliff12RoadHighCheckpointRight" => 1.,
	"TubeCheckpoint" => 2.,
	"TubeCheckpointUnderground" => 2.,
	"TubeCheckpointVAir" => 4.,
	"TubeCheckpointVUnderground" => 4.,

	// Stadium
	"StadiumPlatformCheckpointLeft" => 2.5,
	"StadiumPlatformCheckpointRight" => 2.5,
	"StadiumRoadMainCheckpointLeft" => 1.5,
	"StadiumRoadMainCheckpointRight" => 1.5,
	"StadiumCheckpointRingV" => 4.,
	"StadiumCheckpointRing2x1V" => 4.,
	
	// Valley
	"TunnelRoad4wayCheckpoint" => 2.,
	"TunnelRoad4WayCheckpointUp" => 2.,
	"TunnelRoad4WayCheckpointDown" => 2.,
	"ArenaCheckpointParkRoofBaseAir" => 2.,
	"ArenaCheckpointParkRoofSlopeStraightUpAir" => 2.,
	"ArenaCheckpointParkRoofSlopeStraightDownAir" => 2.,
	"ArenaCheckpointParkRoofSlopeLeft" => 4.,
	"ArenaCheckpointParkRoofSlopeRight" => 4.,

	// Lagoon
	"HighWaySlope2CheckpointLeft" => 2.,
	"HighWaySlope2CheckpointRight" => 2.,
	"BeachCheckPointLeft" => 2.,
	"BeachCheckPointRight" => 2.,
	"LandHillCheckpointLeft" => 2.,
	"LandHillCheckpointRight" => 2.,
	"ArenaCheckpointLeft" => 2.5,
	"ArenaCheckpointRight" => 2.5,
	"DecoCityCheckpoint" => 2.,
	"RoadThemeParkFlip-Checkpoint" => 2.
]

/// Types of the block triggers.
#Const C_LibCheckpointsEdit_TriggerType [
	// Canyon
	"TubeCheckpoint" => 2,
	"TubeCheckpointUnderground" => 2,
	"TubeCheckpointVAir" => 1,
	"TubeCheckpointVUnderground" => 1,

	// Stadium
	"StadiumCheckpointRingHRoad" => 1,
	"StadiumCheckpointRingV" => 2,
	"StadiumCheckpointRing2x1H" => 1,
	"StadiumCheckpointRing2x1V" => 2,
	"StadiumPlatformCheckpointLeft" => 3,
	"StadiumPlatformCheckpointRight" => 4,
	"StadiumRoadMainCheckpointLeft" => 3,
	"StadiumRoadMainCheckpointRight" => 4
]

/// Radius of a ring checkpoint
#Const C_LibCheckpointsEdit_TriggerRadius [
	// Canyon
	"TubeCheckpoint" => 15.5,
	"TubeCheckpointUnderground" => 15.5,
	"TubeCheckpointVAir" => 15.5,
	"TubeCheckpointVUnderground" => 15.5,

	// Stadium
	"StadiumCheckpointRingHRoad" => 14.,
	"StadiumCheckpointRingV" => 14.,
	"StadiumCheckpointRing2x1H" => 14.,
	"StadiumCheckpointRing2x1V" => 14.
]

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
// Public
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script.
 *
 *	@return		The version number of the script.
 */
Text GetScriptVersion() { return Version; }

// ---------------------------------- //
/** Return the name of the script.
 *
 *	@return		The name of the script.
 */
Text GetScriptName() { return ScriptName; }

// ---------------------------------- //
/** Check if a block is supported.
 *
 *	@param	_BlockModel		The block model to check.
 *
 *	@return		True, if the block is supported.
 */
Boolean IsSupported(CBlockModel _BlockModel) {
	if (_BlockModel == Null) return False;
	return C_LibCheckpointsEdit_AcceptedBlocks.exists(_BlockModel.Name);
}

// ---------------------------------- //
/// Save checkpoints data in the map
Void SaveCheckpointsData() {
	// Map checkpoints data
	declare metadata Vec3[] Metadata_Lib_Checkpoints_Position for Map;
	declare metadata Vec3[] Metadata_Lib_Checkpoints_Size for Map;
	declare metadata Integer[] Metadata_Lib_Checkpoints_Direction for Map;
	declare metadata Integer[] Metadata_Lib_Checkpoints_Type for Map;
	declare metadata Integer Metadata_Lib_Checkpoints_NbTotal for Map;

	// Reset the arrays
	Metadata_Lib_Checkpoints_Position.clear();
	Metadata_Lib_Checkpoints_Size.clear();
	Metadata_Lib_Checkpoints_Direction.clear();
	Metadata_Lib_Checkpoints_Type.clear();
	Metadata_Lib_Checkpoints_NbTotal = 0;

	// ---------------------------------- //
	// Save the checkpoints
	foreach (Data in AnchorData) {
		// Block not supported
		if (Data.Block == Null || !IsSupported(Data.Block.BlockModel)) continue;

		declare Vec3 Position;
		declare Vec3 Size;
		declare Direction = 0;
		declare Type = 0;

		/**
		 * Checkpoints types
		 *
		 * 0 - Prism
		 * 1 - Cylinder horizontal
		 * 2 - Cylinder vertical
		 * 3 - Slope left
		 * 4 - Slope right
		 */

		declare BlockName = Data.Block.BlockModel.Name;
		declare Coord = Data.Block.Coord - <0, CollectionGroundY, 0>;
		declare Offset = <.5, 0., .5>;
		declare TriggerSize = <1., 1., .125>;
		declare RingRadius = 0.;

		// Most of the Canyon checkpoints
		if (Map.CollectionName == "Canyon") TriggerSize = <.25, .5, .0625>;

		// Most of the Lagoon checkpoints
		if (Map.CollectionName == "Lagoon") TriggerSize.X = .75;

		// Trigger Y offset
		if (C_LibCheckpointsEdit_TriggerOffsetY.existskey(BlockName)) {
			Offset.Y = C_LibCheckpointsEdit_TriggerOffsetY[BlockName];
		}

		// Trigger X size
		if (C_LibCheckpointsEdit_TriggerSizeX.existskey(BlockName)) {
			TriggerSize.X = C_LibCheckpointsEdit_TriggerSizeX[BlockName];
		}

		// Trigger Y size
		if (C_LibCheckpointsEdit_TriggerSizeY.existskey(BlockName)) {
			TriggerSize.Y = C_LibCheckpointsEdit_TriggerSizeY[BlockName];
		}

		// Trigger type
		if (C_LibCheckpointsEdit_TriggerType.existskey(BlockName)) {
			Type = C_LibCheckpointsEdit_TriggerType[BlockName];
		}

		// Ring radius
		if (C_LibCheckpointsEdit_TriggerRadius.existskey(BlockName)) {
			RingRadius = C_LibCheckpointsEdit_TriggerRadius[BlockName];
		}

		// Get the block direction
		switch (Data.Block.Direction) {
			case CBlock::CardinalDirections::North	: Direction = 0;
			case CBlock::CardinalDirections::East	: Direction = 1;
			case CBlock::CardinalDirections::South	: Direction = 2;
			case CBlock::CardinalDirections::West	: Direction = 3;
		}

		switch (Type) {
			// Horizontal cylinder
			case 1 : {
				if (BlockName == "StadiumCheckpointRing2x1H") {
					if (Direction == 0 || Direction == 2) Offset.X = 1.;
					else Offset.Z = 1.;
				}

				Position = <
					(Coord.X + Offset.X) * CollectionSquareSize,
					(Coord.Y + Offset.Y) * CollectionSquareHeight + (CollectionSquareHeight * TriggerSize.Y / 2),
					(Coord.Z + Offset.Z) * CollectionSquareSize
				>;

				Size = <RingRadius, CollectionSquareHeight, 0.>;
			}

			// Vertical cylinder
			case 2 : {
				if (BlockName == "StadiumCheckpointRing2x1V") {
					if (Direction == 0 || Direction == 2) Offset.X = 1.;
					else Offset.Z = 1.;
				}

				Position = <
					(Coord.X + Offset.X) * CollectionSquareSize,
					(Coord.Y + Offset.Y) * CollectionSquareHeight + (CollectionSquareHeight * TriggerSize.Y / 2),
					(Coord.Z + Offset.Z) * CollectionSquareSize
				>;

				Size = <RingRadius, CollectionSquareHeight, 0.>;
			}

			// All other checkpoint shapes
			default : {
				Position = <
					(Coord.X + Offset.X) * CollectionSquareSize,
					(Coord.Y + Offset.Y) * CollectionSquareHeight,
					(Coord.Z + Offset.Z) * CollectionSquareSize
				>;

				if (Direction == 1 || Direction == 3)
					Size = <CollectionSquareSize * TriggerSize.Z, CollectionSquareHeight * TriggerSize.Y, CollectionSquareSize * TriggerSize.X>;
				else
					Size = <CollectionSquareSize * TriggerSize.X, CollectionSquareHeight * TriggerSize.Y, CollectionSquareSize * TriggerSize.Z>;
			}
		}

		// Add the checkpoint
		Metadata_Lib_Checkpoints_Position	.add(Position);
		Metadata_Lib_Checkpoints_Size		.add(Size);
		Metadata_Lib_Checkpoints_Direction	.add(Direction);
		Metadata_Lib_Checkpoints_Type		.add(Type);
		Metadata_Lib_Checkpoints_NbTotal += 1;
	}
}

// ---------------------------------- //
/** Get the number of saved checkpoints.
 *
 *	@return		The number of saved checkpoints.
 */
Integer NbCheckpointsSaved() {
	declare metadata Integer Metadata_Lib_Checkpoints_NbTotal for Map;
	return Metadata_Lib_Checkpoints_NbTotal;
}