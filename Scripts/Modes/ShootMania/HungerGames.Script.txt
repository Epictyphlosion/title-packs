// -------------------------------------- //
//  HUNGER GAMES by domino54              //
//  script version: 2.3                   //
// -------------------------------------- //

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const CompatibleMapTypes	"HungerGamesArena"
#Const Version				"2014-07-25"
#Const ScriptName			"HungerGames.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/CustomUI.Script.txt" as CustomUI
#Include "Libs/Nadeo/Sound.Script.txt" as Sound
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/Domino/ShootMania/ScoresTableHG.Script.txt" as ScoresTable
#Include "Libs/Domino/Music.Script.txt" as Music

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_OffZoneStartOnDuel	True	as _("Activate tornado when there are 2 players left")
#Setting S_OffZoneAutoTime		360		as _("Time before auto activation of the tornado")
#Setting S_CharChoiceUse		False	as _("Allow players to choose their characters")
#Setting S_CharChoiceTime		30		as _("Time limit to choose a character")
#Setting S_ItemsRespawnDelay	300		as _("Charge, Weapon and MiniCharge respawn delay")
#Setting S_ItemsArmorDelay		120		as _("Armor and Replie respawn delay")
#Setting S_ItemsSpawnAll		False	as _("Spawn all items (advanced maps)")
#Setting S_ItemsSpawnCrate		True	as _("Spawn the Crate (advanced maps)")
#Setting S_ToadsSpawnDelay		60		as _("Toads spawn delay (-1 = don't spawn)")
#Setting S_ToadsArmor			3		as _("Toads armor points")
#Setting S_LegacyDecreasedItems	True	as _("Spawn decreased items count (legacy maps)")
#Setting S_NewPlayersAllow		True	as _("Allow new players to join shortly after game start")
#Setting S_NewPlayersTime		120		as _("Time for new players to join game")
#Setting S_FakePlayers			0		as _("Fake players")
#Setting S_MaxWeaponAmount		2		as _("Maximum amount of player weapons (exp.)")
#Setting S_MaxReplieAmount		4		as _("Maximum amount of player replies (exp.)")

#Const C_ModeStatus _("TYPE: Free for all\nOBJECTIVE: Survive as last man alive. Pick up bonuses to get weapons and faster reload.")

#Const C_BaseDir "file://Media/Manialinks/HungerGames/"
#Const C_ImgBaseDir	"file://Media/Manialinks/Shootmania/Common/"

#Const C_OffZoneStartRadius		275.
#Const C_OffZoneFinalRadius		25.
#Const C_OffZoneShrinkSpeed		2.5

#Const C_SurvivalPoints			10

#Const C_ChatPrefixColor		<1.0, 0.7, 0.1>

#Const C_MinimapSize			40

#Const C_ItemBlastRadius		0.5
#Const C_ItemPickPoints[
	"Armor" => 1,
	"Charge" => 2,
	"Weapon" => 3,
	"Mini" => 2,
	"Replie" => 1,
	"Fuel" => 4,
	"Gold" => 2,
	"Crate" => 10
]

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Ident[]			G_SpawnsList;			// Id of all the landmarks with a player spawn of the map
declare Ident			G_LatestSpawnId;		// Id of the last landmark used
declare CSmMapLandmark	G_CenterPole;			// Pole used as OffZone center
declare Boolean			G_OffZoneIsActivated;	// OffZone status
declare Ident[Text]		G_Objects;				// All objects
declare Ident[Text]		G_Actions;				// All actions
declare Integer			G_ItemVariant;			// Group of spawned items
declare Boolean			G_ToadsHaveBeenSpawned;	// Used for delaying toads spawn
declare Boolean			G_UseCharChoice;		// Use character choosing
declare Integer			G_CharMusicIndex;		// Index of char choose music
declare CSmObject		G_Crate;				// Crate
declare Ident			G_CrateSpawnLandmark;	// Id Crate spawn
declare Ident[]			G_CrateSpawns;			// Id of all landmarks with Crate spawn
declare CSmPlayer		G_CrateWearer;			// Player wearing Crate
declare Boolean			G_CrateHasBeenFound;	// If Crate was picked once
declare Vec3			G_CratePosition;		// Position of the Crate

// ----------------------------------- //
// Extend
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(CustomUI::GetScriptName(), CustomUI::GetScriptVersion());
MB_LogVersion(Sound::GetScriptName(), Sound::GetScriptVersion());
MB_LogVersion(Layers::GetScriptName(), Layers::GetScriptVersion());
MB_LogVersion(Message::GetScriptName(), Message::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
***

// ---------------------------------- //
// Set rules
// ---------------------------------- //
***Rules***
***
declare ModeName = "Hunger Games";
declare ModeRules = TextLib::Compose(_("$<%11. $>Run to the pole to get a weapon.\n$<%12. $>Pick up different items to upgrade your character.\n$<%13. $>After time limit tornado will be activated.\n$<%14. $>You can check your position and statistics by pressing 'E' key.\n$<%15. $>If you have more weapons, use mouse roll to switch them.\n$<%16. $>Last player alive wins."), "$"^SpawnScreen::GetModeColor());

SpawnScreen::AddSubsection(_("Type"), _("Free for all"), 0.);
SpawnScreen::AddSubsection(_("Objectives"), ModeRules, 20.);
SpawnScreen::CreatePrettyRules(ModeName);
***

// ---------------------------------- //
// Server start
// ---------------------------------- //
***StartServer***
***
UseClans				= False;
ForceNavMapsComputation	= True;
UseMinimap				= True;

declare Boolean UseCharacters;

---Rules---

SpawnScreen::CreateScores("Score.RoundPoints");
SpawnScreen::CreateMapInfo();

MB_NeutralEmblemUrl = C_BaseDir^"emblemHG.dds";

UIManager.UIAll.OverlayHide321Go = True;

// Include the items //
ItemList_Begin();
G_Objects["Armor"]		= ItemList_Add("SMCommon\\HG\\Armor.Item.gbx");
G_Objects["Charge"]		= ItemList_Add("SMCommon\\HG\\Rocket.Item.gbx");
G_Objects["Weapon"]		= ItemList_Add("SMCommon\\HG\\Laser.Item.gbx");
G_Objects["Mini"]		= ItemList_Add("SMCommon\\HG\\Arrow.Item.gbx");
G_Objects["Replie"]		= ItemList_Add("SMCommon\\HG\\Nucleus.Item.gbx");
G_Objects["Crate"]		= ItemList_Add("SMCommon\\HG\\AmmoCase.Item.gbx");
G_Objects["Fuel"]		= ItemList_Add("SMCommon\\Collectibles\\Fuel.Item.gbx");
G_Objects["Gold"]		= ItemList_Add("SMCommon\\Collectibles\\Gold.Item.gbx");

G_Objects["Sintel"] 	= ItemList_Add("Characters\\HungerGames\\SintelSample.Item.gbx");
G_Objects["Susu"] 		= ItemList_Add("Characters\\HungerGames\\Susu.Item.gbx");
G_Objects["Engineer"] 	= ItemList_Add("Characters\\HungerGames\\BLR_Engineer.Item.gbx");
G_Objects["Boba"] 		= ItemList_Add("Characters\\HungerGames\\Boba_Fett.Item.gbx");
G_Objects["Steve"] 		= ItemList_Add("Characters\\HungerGames\\MinecraftSteve.Item.gbx");
G_Objects["Creeper"] 	= ItemList_Add("Characters\\HungerGames\\MinecraftCreeper.Item.gbx");
G_Objects["ToadPlayer"] = ItemList_Add("Characters\\HungerGames\\ToadPlayer.Item.gbx");
G_Objects["Toad"] 		= ItemList_Add("Characters\\ToadSample.Item.gbx");
ItemList_End();

ActionList_Begin();
G_Actions["Torpede"] 	= ActionList_Add("DominoActions\\Torpede.Action.gbx");
G_Actions["Replie"] 	= ActionList_Add("DominoActions\\StatusEffects\\ReplieParticles.Action.gbx");
ActionList_End();

// Create the scores table
ScoresTable::Load();
ScoresTable::SetColumnsWidth(1.5, 1.5, 2., 18., 1.25, 1.25, 1.75, 1.75, 1.75, 3.25, 0.);
ScoresTable::SetTableFormat(2, 6);
ScoresTable::SetTableWidth(200.);
ScoresTable::SetColumnName("Custom1", "Itm");
ScoresTable::SetColumnName("Custom2", "Sv");
ScoresTable::SetColumnName("Custom3", "Hit");
ScoresTable::SetTableBackgroundImage(C_BaseDir^"scores_hg.png", <0.1, 1.0>, <206., 93.>);
ScoresTable::SetDefaultFooterStats("Tributes alive: "^ClansNbPlayersAlive[0]);
ScoresTable::Build();

CustomUI::Load();
CustomUI::Add("HG_AmmoCounter", <-50.5, -74.5>, <45., 7.>);
CustomUI::Add("HG_BuffCounter", <33.25, -74.5>, <10.5, 7.>);
CustomUI::Add("HG_MapLegend", <145.25, 57.5>, <29.5, 13.>);
CustomUI::Add("HG_Position", <-150., 59.>, <20., 10.>);
CustomUI::Add("HG_NewTipsWindow", <0., -56.125>, <112., 12.125>);
CustomUI::Build();

Sound::Load();
Sound::Attach();

Layers::Create("hgInfo", "");
Layers::Create("tips", GetLayerTipsWindow());
Layers::Create("battleMinimap", """<minimap sizen="1 1" mapposition="1 0"/>""");
***

// ----------------------------------- //
// Map start
// ---------------------------------- //
***StartMap***
***
Users_SetNbFakeUsers(S_FakePlayers, 0);
SM::SetupDefaultVisibility();

UseCharacters = S_CharChoiceUse;

G_ItemVariant			= MathLib::Rand(1, 3);
G_CrateHasBeenFound		= False;
G_CrateWearer			= Null;
G_ToadsHaveBeenSpawned	= False;

// Set tornado center
foreach (Pole in MapLandmarks_Gauge) {
	if (Pole.Tag == "HornOfPlenty") {
		G_CenterPole <=> Pole;
		OffZoneCenterLandmarkId = Pole.Id;
	}
}

Layers::Update("hgInfo", GetHudOverlay());
Layers::Update("battleMinimap", GetMinimapLayer());
Layers::Attach("tips");

G_CharMusicIndex += 1;
if (G_CharMusicIndex > 3) G_CharMusicIndex = 1;

Music::Load();

declare Integer SyncPlayersCount;

// Turn the lights on //
foreach (Base in MapBases) {
	Base.Clan = 0;
	Base.IsActive = True;
}

foreach (MapLandmark in MapLandmarks_ObjectAnchor) {
	if (MapLandmark.Tag == "Crate") G_CrateSpawns.add(MapLandmark.Id);
}
if (G_CrateSpawns.count > 0) G_CrateSpawnLandmark = G_CrateSpawns[MathLib::Rand(0, G_CrateSpawns.count - 1)];

foreach (Player in AllPlayers) {
	declare Integer TopScore_Hit		for Player;
	declare Integer TopScore_Survival	for Player;
	declare Integer TopScore_Items		for Player;
	TopScore_Hit		= 0;
	TopScore_Survival	= 0;
	TopScore_Items		= 0;
	
	ScoresTable::SetCustom1(Player, "");
	ScoresTable::SetCustom2(Player, "");
	ScoresTable::SetCustom3(Player, "");
	
	declare Boolean Player_WasSpawned for Player;
	Player_WasSpawned = False;
}

declare Integer OffZoneAutoTime;
OffZoneAutoTime = S_OffZoneAutoTime * 1000;
G_OffZoneIsActivated = False;

// Prepare pole //
G_CenterPole.Gauge.Max = MathLib::FloorInteger((C_OffZoneStartRadius - C_OffZoneFinalRadius) * 1000 / C_OffZoneShrinkSpeed);
G_CenterPole.Gauge.Value = G_CenterPole.Gauge.Max;
G_CenterPole.Gauge.Captured = True;

UIManager.UIAll.SpectatorForcedTarget = G_CenterPole.Id;

// Init objects //
ObjectDestroyAll();
foreach (MapLandmark in MapLandmarks_ObjectAnchor) {
	declare ObjectSpawned for MapLandmark = False;
	declare ObjectNextSpawn for MapLandmark = Now;
	declare CanBeSpawned for MapLandmark = 1;
	ObjectSpawned = False;
	ObjectNextSpawn = Now;
	if (S_LegacyDecreasedItems && MapLandmark.Order == 0) CanBeSpawned = MathLib::Rand(0, 1);
	else CanBeSpawned = 1;
}

declare Vec3 Crate_LastPosition;
Crate_LastPosition = <0., 0., 0.>;

SendChat(_("New map"));

// Wait for enough players //
while (Players.count < 2) {
	yield;	
	UIManager.UIAll.BigMessage = _("Waiting for players...");
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::Warning;
}
UIManager.UIAll.BigMessage = "";

UIManager.UIAll.OverlayHideCountdown = True;

//  Character choosing
if (S_CharChoiceUse) {
	MB_Sleep(3000);
	declare ChoiceEnd = Now + S_CharChoiceTime * 1000;
	
	declare BasePage = GetCharacterChoosingUI();
	
	Music::CharChoice(G_CharMusicIndex);
	
	Layers::Create("CharChoose", GetCharacterChoosingUI());	
	foreach (Player in Players) {
		declare UI for Player <=> UIManager.GetUI(Player);
		declare Integer LastModelId for UI;
		LastModelId = 0;
		Layers::Attach("CharChoose", Player);
	}
	
	declare Integer[Integer] ChoosesCount;
	
	for (I, 0, 8) ChoosesCount[I] = 0;
	
	MB_Sleep(10);
	
	while (Now < ChoiceEnd) {
		yield;
		
		foreach (Player in Players) {
			declare UI for Player <=> UIManager.GetUI(Player);
			
			declare netread Integer Net_ModelId for UI;
			declare Integer LastModelId for UI;
			declare netwrite Integer[Integer] Net_ChoosesCount for UI;
			
			for (I, 0, 8) Net_ChoosesCount[I] = ChoosesCount[I];
			
			if (LastModelId != Net_ModelId) {
				ChoosesCount[Net_ModelId] += 1;
				ChoosesCount[LastModelId] -= 1;
				
				LastModelId = Net_ModelId;
			}
		}
	}
}

foreach (Player in Players) Layers::Detach("CharChoose", Player);

MB_Sleep(2000);

Music::Silence();
//Countdown();

StartTime = Now;

Score::MatchBegin();
Score::RoundBegin();

UIManager.UIAll.SpectatorForcedTarget = NullId;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

if (S_OffZoneStartOnDuel) {
	UIManager.UIAll.CountdownEndTime = Now + S_OffZoneAutoTime * 1000;
	UIManager.UIAll.OverlayHideCountdown = False;
} else {
	UIManager.UIAll.OverlayHideCountdown = True;
}

MB_Sleep(1000);

foreach (MapLandmark in MapLandmarks_ObjectAnchor) {
	if (MapLandmark.Id == G_CrateSpawnLandmark) {
		declare ObjectSpawned for MapLandmark = False;
		declare ObjectNextSpawn for MapLandmark = Now;
		
		G_Crate = ObjectCreate(G_Objects["Crate"]);
		declare AnchorId for G_Crate = NullId;
		declare Tag for G_Crate = MapLandmark.Tag;
		AnchorId = MapLandmark.Id;
		Tag = MapLandmark.Tag;
		ObjectSpawned = True;
		G_Crate.SetAnchor(MapLandmark.ObjectAnchor);
		G_CratePosition = MapLandmark.Position;
	}
}

foreach (Player in Players) {
	SendTip(Player, "sync", 100);
	MB_Sleep(10);
	Hunger_SpawnPlayer(Player);
}

SyncPlayersCount = PlayersNbAlive;

Music::InGame(G_CharMusicIndex);
***

***OnNewPlayer***
***
Layers::Attach("battleMinimap", Player);
***

***OnNewSpectator***
***
Layers::Attach("battleMinimap", Spectator);
***

// ----------------------------------- //
// Play loop
// ---------------------------------- //
***PlayLoop***
***
Message::Loop();
Combo_SpawnObjects();
Layers::Attach("tips");

// ---------------------------------- //
// Events management
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// On armor empty
	if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
		if (!Event.Victim.IsBot) {
			if (PlayersNbAlive > 2) {
				Message::SendStatusMessage(TextLib::Compose(_("$<%1$> is eliminated!"), Event.Victim.Name), 4000, 1, CUIConfig::EUISound::Silence, 0);
				Sound::PlaySound(C_BaseDir^"cannon.ogg");
			} else {
				Message::SendBigMessage("", 1000, 1, CUIConfig::EUISound::VictoryPoint, 0);
			}
			
			SendTip(Event.Victim, "You got eliminated. To play again please wait for next map. Better luck next time!", 7000);
			
			// Score points for alive players
			foreach (Player in Players) {
				if (Player != Event.Victim && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
					Score::AddPoints(Player, C_SurvivalPoints);
					
					declare Integer TopScore_Survival for Player;
					TopScore_Survival += 1;
				}
			}
		}
		
		// Drop Charge from Toad
		else {
			declare WillDropCharge for Event.Victim = MathLib::Rand(0, 1);
			
			if (WillDropCharge == 1) {
				declare Object for Event.Victim = ObjectCreate(G_Objects["Charge"]);
				declare Tag for Object = "Charge";
				Object.SetPosition(Event.Victim.Position);
			}
		}
		
		XmlRpc::OnArmorEmpty(Event);
		PassOn(Event);
	}
	// ---------------------------------- //
	// On hit
	else if (Event.Type == CSmModeEvent::EType::OnHit) {
		if (Event.Victim == Null || Event.Shooter == Null || Event.Shooter == Event.Victim) {
			Discard(Event);
		} else {
			Event.Damage = 100;
			
			// Toss the critical hit
			if (!Event.Shooter.IsBot) HungerGamesCriticalHit(Event);
			
			declare Points = Event.Damage / 100;
			Score::AddPoints(Event.Shooter, Points);
			Event.ShooterPoints = Points;
			
			declare Integer TopScore_Hit for Event.Shooter;
			TopScore_Hit += Points;
			
			XmlRpc::OnHit(Event);
			PassOn(Event);
		}
	}
	// ---------------------------------- //
	// On player requests respawn
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
		SendTip(Event.Player, "You cannot respawn in Hunger Games!", 4000);
		Discard(Event);
	}
	// ---------------------------------- //
	// On player touches object
	else if (Event.Type == CSmModeEvent::EType::OnPlayerTouchesObject) {
		if (Event.Object == Null || Event.Player == Null || Event.Player.IsBot || Event.Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
			Discard(Event);
		} else {
			declare Text[] Player_AvailableWeapons	for Event.Player;
			declare Boolean Player_HasWeapon		for Event.Player;
			declare Boolean Player_HadCrate			for Event.Player;
			declare Integer Player_RepliesCount		for Event.Player;
			
			if (Player_HasWeapon) {
				declare Tag for Event.Object = "";
				
				if (Tag == "Weapon" && Player_AvailableWeapons.count == 0) {
					SendTip(Event.Player, "You reached the maximum amount of available weapons!", 5000);
					Discard(Event);
				} else if (Tag == "Armor" && Event.Player.Armor == Event.Player.ArmorMax) {
					SendTip(Event.Player, "You cannot pick up Armor item, if you have full health.", 5000);
					Discard(Event);
				} else if (Tag == "Mini" && Event.Player.Armor < 200) {
					SendTip(Event.Player, "You don't have enough Armors to pick up this item!", 5000);
					Discard(Event);
				} else if (Tag == "Gold" && Event.Player.ForceModelId == NullId) {
					SendTip(Event.Player, "Default character cannot pick up the Gold item!", 5000);
					Discard(Event);
				} else if (Tag == "Replie" && Player_RepliesCount == S_MaxReplieAmount) {
					SendTip(Event.Player, "You reached the maximum amount of available Replies!", 5000);
					Discard(Event);
				} else if (Tag == "Crate" && Player_HadCrate) {
					Discard(Event);
				} else {
					PickUpObject(Event.Player, Event.Object);
					PassOn(Event);
				}
			} else {
				SendTip(Event.Player, "You must touch the Pole first, before picking up any items!", 5000);
				Discard(Event);
			}
		}
	}
	// ---------------------------------- //
	// On action event
	else if (Event.Type == CSmModeEvent::EType::OnActionEvent) {
		if (Event.Player != G_CrateWearer) {
			declare Integer[Text] Player_AmmoCount for Event.Player;
			
			switch (Event.ActionInput) {
				case CSmModeEvent::EActionInput::Activable1: {
					if (Player_AmmoCount["Laser"] > 0) SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Laser, False);
				}
				case CSmModeEvent::EActionInput::Activable2: {
					if (Player_AmmoCount["Nucleus"] > 0) SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Nucleus, False);
				}
				case CSmModeEvent::EActionInput::Activable3: {
					if (Player_AmmoCount["Arrow"] > 0) SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Arrow, False);
				}
				case CSmModeEvent::EActionInput::Activable4: {
					if (Player_AmmoCount["Rocket"] > 0) SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Rocket, False);
				}
			}
		}
	}
	// ---------------------------------- //
	// On player request action change
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestActionChange && Event.Player != G_CrateWearer) {
		SwitchWeapon(Event);
	}
	// On near miss //
	else if (Event.Type == CSmModeEvent::EType::OnNearMiss) {
		if (!Event.Shooter.IsFakePlayer) {
			if (1.0 >= 0 && Event.MissDist <= 1.0) {
				declare Text Message = "";
				Message = GetNearMissMessage(Event);
				Message::SendStatusMessage(Event.Shooter, Message, 3000, 3, CUIConfig::EUISound::Silence, 0);
			}
		}
		PassOn(Event);
	}
	// ---------------------------------- //
	// On custom weapon hit
	else if (Event.Type == CSmModeEvent::EType::OnActionCustomEvent) {
		if (Event.Param1 == "damage") {
			if (Event.Shooter == Null || Event.Victim == Null || Event.Shooter == Event.Victim) {
				Discard(Event);
			} else {
				declare Damage = TextLib::ToInteger(Event.Param2[0]);
				declare Points = Damage / 100;
				
				AddPlayerArmor(Event.Victim, -Damage, Event.Shooter, Points);
				Score::AddPoints(Event.Shooter, Points);
				PassOn(Event);
			}
		}
	}
	// ---------------------------------- //
	// Other
	else {
		PassOn(Event);
	}
}

// ---------------------------------- //
// Manage player functions
foreach (Player in Players) {
	declare UI for Player <=> UIManager.GetUI(Player);
	
	declare Integer[Text] Player_AmmoCount	for Player;
	declare Boolean Player_WasSpawned		for Player;
	declare Boolean Player_HasWeapon		for Player;
	declare Boolean Player_HasCrate			for Player;
	declare Integer Player_RepliesCount		for Player;
	
	declare netwrite Integer[Text] Net_AmmoCount	for UI;
	declare netwrite Integer Net_RepliesCount 		for UI;
	declare netwrite Integer Net_AmmoCountTorpede	for UI;
	declare netwrite Boolean Net_HasTorpede			for UI;
	declare netwrite Boolean Net_HadCrate			for UI;
	
	if (Player == G_CrateWearer) Net_HasTorpede = True;
	else Net_HasTorpede = False;
	
	declare Integer TorpedeBulletsCount for Player;
	declare HadCrate for Player = False;
	Net_HadCrate = HadCrate;
	
	Net_RepliesCount = Player_RepliesCount;
	Net_AmmoCountTorpede = TorpedeBulletsCount;
	
	// ---------------------------------- //
	// Set the bullets count
	if (Player_WasSpawned) {
		SetPlayerAmmoMax(Player, CSmMode::EWeapon::Laser, Player_AmmoCount["Laser"]);
		SetPlayerAmmoMax(Player, CSmMode::EWeapon::Nucleus, Player_AmmoCount["Nucleus"]);
		SetPlayerAmmoMax(Player, CSmMode::EWeapon::Arrow, Player_AmmoCount["Arrow"]);
		SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, Player_AmmoCount["Rocket"]);
		
		Net_AmmoCount["Laser"]		= Player_AmmoCount["Laser"];
		Net_AmmoCount["Nucleus"]	= Player_AmmoCount["Nucleus"];
		Net_AmmoCount["Arrow"]		= Player_AmmoCount["Arrow"];
		Net_AmmoCount["Rocket"]		= Player_AmmoCount["Rocket"];
	}
	
	declare netwrite Integer Net_PlayersNbAlive for UI;
	Net_PlayersNbAlive = PlayersNbAlive;
	
	SetPlayerReloadAllWeapons(Player, True);
	
	// ---------------------------------- //
	// Player touches pole
	if (Player.CapturedLandmark == G_CenterPole && Player_HasWeapon == False) {
		HungerGamesPoleCapture(Player);	
		Player_HasWeapon = True;
	}
	
	// ---------------------------------- //
	// Player escapes arena
	if (Player.Position[0] < 0. || Player.Position[0] > 384. || Player.Position[2] < 0. || Player.Position[2] > 384.) {
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
			Player.Armor = 0;
			UnspawnPlayer(Player);
			SendChat("$<"^Player.Name^"$> tried to escape arena.");
		}
	}
	
	// ---------------------------------- //
	// Drop items from player
	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned && Player.Objects.count > 0 && Player.Position != <0., 0., 0.>) Player.Objects[0].SetPosition(Player.Position + <MathLib::Rand(-C_ItemBlastRadius, C_ItemBlastRadius), MathLib::Rand(-0.1, 0.35), MathLib::Rand(-C_ItemBlastRadius, C_ItemBlastRadius)>);
	
	// ---------------------------------- //
	// Drop crate
	if (Player == G_CrateWearer && TorpedeBulletsCount == 0 || G_CrateWearer != Null && G_CrateWearer.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
		HadCrate = True;
		Message::SendBigMessage("$<"^G_CrateWearer.Name^"$> dropped Crate", 3000, 10, CUIConfig::EUISound::PhaseChange, 0);
		G_Crate.SetPosition(G_CrateWearer.Position);
		ActionBind(G_CrateWearer, CSmMode::EActionSlot::Slot_A, CSmMode::EActionInput::None);
		if (G_CrateWearer.Armor > 0) {
			SetPlayerWeapon(G_CrateWearer, CSmMode::EWeapon::Rocket, False);
			SetPlayerAmmo(G_CrateWearer, CSmMode::EWeapon::Rocket, 0);
			SendTip(G_CrateWearer, "You used your all available bullets. You can't pick up Crate again.", 6000);
		}
		G_CrateWearer = Null;
	}
	// ---------------------------------- //
	// Communicate with Replie action
	declare Boolean WasHealed for Player;
	if (!WasHealed) {
		Player.Armor += 100;
		WasHealed = True;
	}
	
	// ---------------------------------- //
	// Spawn new player	
	if (S_NewPlayersAllow) {
		if (!Player_WasSpawned) {
			if (Now < StartTime + S_NewPlayersTime * 1000 && !G_OffZoneIsActivated) {
				Hunger_SpawnPlayer(Player);
				SendChat("$<"^Player.Name^"$> has joined the game!");
			} else {
				UI.SendChat("$"^TextLib::ColorToText(C_ChatPrefixColor)^"»$fff "^"Time to join for new players has expired. Please wait for the next map.");
			}
			
			Player_WasSpawned = True;
		}
	}
	
	if (Player == G_CrateWearer) Player.ArmorReplenishGain = 50;
	else Player.ArmorReplenishGain = 0;
}

// ---------------------------------- //
// Unspawn objects behind tornado
foreach (Object in Objects) {
	declare Text Tag for Object;
	if (Object.Status == CSmObject::EStatus::InWorld && MathLib::Distance(Object.Position, G_CenterPole.Position) >= OffZoneRadius && OffZoneRadius >= C_OffZoneFinalRadius && Tag != "Crate") Object.SetUnspawned();
}

// ---------------------------------- //
// Notify changing players count
if (SyncPlayersCount != PlayersNbAlive && PlayersNbAlive >= 2 && SyncPlayersCount > PlayersNbAlive) {
	UIManager.UIAll.SendNotice(
		TextLib::Compose("%1%2", _("Remaining players: "), ""^PlayersNbAlive), 
		CUIConfig::ENoticeLevel::Default, Null, 
		CUIConfig::EAvatarVariant::Default, 
		CUIConfig::EUISound::Silence, 0
	);
	SyncPlayersCount = PlayersNbAlive;
}

// ---------------------------------- //
// Interface management
foreach (Player in AllPlayers) {
	if (!Player.IsBot || !Player.IsFakePlayer) {
		declare UI for Player <=> UIManager.GetUI(Player);
		
		ScoresTable::SetFooterStats(Player, "Tributes alive: "^PlayersNbAlive);
		
		// Detach UI if player isn't playing
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) Layers::Attach("hgInfo", Player);
		else Layers::Detach("hgInfo", Player);
		
		// Crate
		declare netwrite Boolean Net_CrateHasBeenFound for UI;
		Net_CrateHasBeenFound = G_CrateHasBeenFound;
		
		declare netwrite Text Net_CrateWearer for UI;
		if (G_CrateHasBeenFound && G_CrateWearer != Null) Net_CrateWearer = G_CrateWearer.User.Login;
		else Net_CrateWearer = "";
		
		declare netwrite Vec3 Net_CratePosition for UI;
		Net_CratePosition = G_CratePosition;
		
		// Performance bar
		declare netwrite Integer Net_BotsCount for UI;
		declare netwrite Integer Net_ObjectsCount for UI;
		declare netwrite Boolean Net_OffZoneIsActive for UI;
		Net_BotsCount = BotPlayers.count;
		Net_ObjectsCount = Objects.count;
		Net_OffZoneIsActive = G_OffZoneIsActivated;
	}
}

// ---------------------------------- //
// Spawn the Toads
if (S_ToadsSpawnDelay != -1 && MapLandmarks_BotPath.count > 0) {
	declare ToadsSpawnTime = StartTime + S_ToadsSpawnDelay * 1000;
	
	if (Now >= ToadsSpawnTime && !G_ToadsHaveBeenSpawned && MapLandmarks_BotPath.count > 0) {
		foreach (MapLandmark in MapLandmarks_BotPath) {
			declare CSmPlayer Bot for MapLandmark;
			Bot = CreateBotPlayer(G_Objects["Toad"], 0);
			SpawnBotPlayer(Bot, 0, 200, MapLandmark.BotPath, Now);
		}
		
		// Configure behavior
		foreach (Bot in BotPlayers) {
			Bot.Driver.Behaviour	= CSmPlayerDriver::ESmDriverBehaviour::Saunter;
			Bot.Driver.AttackFilter	= CSmPlayerDriver::ESmAttackFilter::AllPlayers;
			Bot.Driver.Saunter_BaseChillingTime		= 3000;
			Bot.Driver.Saunter_ChillingTimeDelta	= 1500;
			Bot.Driver.Saunter_Radius				= 8.;
			Bot.Driver.AggroRadius			= MathLib::Rand(15., 20.);
			Bot.Driver.DisengageDistance	= MathLib::Rand(18., 22.);
			Bot.Driver.Accuracy				= MathLib::Rand(.75, .85);
			Bot.Driver.ReactionTime			= MathLib::Rand(200, 500);
			Bot.Driver.ShootPeriodMin		= 500;
			Bot.Driver.ShootPeriodMax		= 1250;
			Bot.SpeedPower		= .25;
			Bot.AmmoGain		= .5;
			Bot.ForceColor		= <0., 1., 0.>;
		}
		
		// Send notice
		UIManager.UIAll.SendNotice(
			_("Toads have been spawned."), 
			CUIConfig::ENoticeLevel::Default, Null, 
			CUIConfig::EAvatarVariant::Default, 
			CUIConfig::EUISound::Silence, 0
		);
		
		G_ToadsHaveBeenSpawned = True;
	}
}

// ---------------------------------- //
// Start the storm
if (S_OffZoneStartOnDuel && !G_OffZoneIsActivated) {
	if (PlayersNbAlive == 2 || Now >= StartTime + OffZoneAutoTime) {
		OffZoneRadius = C_OffZoneStartRadius;
		G_CenterPole.Gauge.Speed = -1;
		G_CenterPole.Gauge.Captured = False;
		
		UIManager.UIAll.CountdownEndTime = Now;
		UIManager.UIAll.OverlayHideCountdown = True;
		
		// Send notice
		UIManager.UIAll.SendNotice(
			_("Tornado activated."), 
			CUIConfig::ENoticeLevel::Default, Null, 
			CUIConfig::EAvatarVariant::Default, 
			CUIConfig::EUISound::Notice, 0
		);
		
		G_OffZoneIsActivated = True;
	}
}

// ---------------------------------- //
// Stop the storm
if (G_OffZoneIsActivated && OffZoneRadius >= C_OffZoneFinalRadius) OffZoneRadiusSpeed = C_OffZoneShrinkSpeed;
else OffZoneRadiusSpeed = 0.;

// ---------------------------------- //
// Others
if (G_Crate.Status == CSmObject::EStatus::InWorld) G_CratePosition = G_Crate.Position; // Crate pointer
if (Now > StartTime + 2000) Layers::Detach("countdown"); // Destroy countdown

// ---------------------------------- //
// Victory conditions
if (PlayersNbAlive <= 1) MB_StopMap = True;
***

// ----------------------------------- //
// Map end
// ---------------------------------- //
***EndMap***
***
UIManager.UIAll.CountdownEndTime = Now;
OffZoneRadiusSpeed = 0.;
OffZoneRadius = -1.;
G_CenterPole.Gauge.Speed = 0;

DestroyAllBotPlayers();
ObjectDestroyAll();

// ----------------------------------- //
// Set the winner
declare CmPlayer Winner;
foreach (Player in Players) {
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && PlayersNbAlive == 1) {
		Winner = Player;
		Score::AddPoints(Winner, 50);
	}
}

Score::RoundEnd();
Score::MatchEnd(True);

Layers::Detach("hgInfo");
Message::CleanBigMessages();
Message::CleanStatusMessages();

MB_Sleep(1000);

UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;

MB_Sleep(2000);

Layers::Detach("battleMinimap");

UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
UIManager.UIAll.BigMessageSoundVariant = 0;
UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> won the Hunger Games!"), Winner.User.Name);

ScoresTable::SetColumnsWidth(1.5, 1.5, 2., 18., 1.25, 1.25, 1.75, 1.75, 1.75, 0., 3.25);
ScoresTable::Build();

MB_Sleep(5000);

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;

MB_Sleep(10000);

Music::Silence();

ScoresTable::SetColumnsWidth(1.5, 1.5, 2., 18., 1.25, 1.25, 1.75, 1.75, 1.75, 3.25, 0.);
ScoresTable::Build();

while(!UIManager.UIAll.UISequenceIsCompleted) {
	MB_Yield();
}

UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.BigMessage = "";
***

// ----------------------------------- //
// Server end
// ---------------------------------- //
***EndServer***
***
SpawnScreen::DestroyRules();
SpawnScreen::DestroyScores();
SpawnScreen::DestroyMapInfo();
Layers::Destroy("hgInfo");
Layers::Destroy("battleMinimap");
Layers::Destroy("tips");
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ----------------------------------- //
// Send informations
Void SendChat(Text _Message) {
	declare TextPrefix = "$"^TextLib::ColorToText(C_ChatPrefixColor)^"»$fff";
	UIManager.UIAll.SendChat(TextLib::Compose("%1 %2", TextPrefix, _Message));
}
Void SendTip(CSmPlayer _Player, Text _Message, Integer _Time) {
	if (_Player.IsBot || _Player.IsFakePlayer) return;
	declare Text[Text] ShownMessages for _Player;
	declare UI <=> UIManager.GetUI(_Player);
	if (_Message == "sync") ShownMessages.clear();
	if (!ShownMessages.existskey(_Message)) {
		declare netwrite Text Net_PlayerCurrentTipText for UI;
		Net_PlayerCurrentTipText = _Message;
		ShownMessages[_Message] = _Message;
	}
	declare netwrite Integer Net_PlayerCurrentTipTime for UI;
	Net_PlayerCurrentTipTime = _Time;
}

/* ------------------------------------- */
/** Spawn a player
 *
 * @param	_Player		The player to spawn
 */
Void HungerGamesPoleCapture(CSmPlayer _Player) {
	declare Integer[Text] Player_AmmoCount for _Player;
	
	declare PossibleWeapons for _Player = ["Laser", "Nucleus", "Arrow", "Rocket"];
	
	Player_AmmoCount["Laser"]	= 0;
	Player_AmmoCount["Nuleus"]	= 0;
	Player_AmmoCount["Arrow"]	= 0;
	Player_AmmoCount["Rocket"]	= 4;
	
	switch (_Player.ForceModelId) {
		case NullId : {
			_Player.AmmoGain = 0.5;
			_Player.StaminaGain = 0.2;
			PossibleWeapons.remove("Rocket");
		}
		case G_Objects["Sintel"] : {
			_Player.AmmoGain = 0.7;
			_Player.StaminaGain = 0.4;
			Player_AmmoCount["Laser"]	= 1;
			Player_AmmoCount["Rocket"]	= 2;
		}
		case G_Objects["Susu"] : {
			_Player.AmmoGain = 0.7;
			_Player.StaminaGain = 0.4;
			Player_AmmoCount["Laser"]	= 1;
			Player_AmmoCount["Rocket"]	= 2;
		}
		case G_Objects["ToadPlayer"] : {
			_Player.AmmoGain = 0.75;
			_Player.StaminaGain = 0.75;
			PossibleWeapons.remove("Rocket");
		}
		case G_Objects["Engineer"] : {
			_Player.AmmoGain = 0.5;
			_Player.StaminaGain = 0.4;
			PossibleWeapons.remove("Rocket");
		}
		case G_Objects["Boba"] : {
			_Player.AmmoGain = 0.5;
			_Player.StaminaGain = 0.4;
			Player_AmmoCount["Laser"]	= 1;
			Player_AmmoCount["Rocket"]	= 2;
		}
		case G_Objects["Steve"] : {
			_Player.AmmoGain = 0.4;
			_Player.StaminaGain = 0.2;
			Player_AmmoCount["Laser"]	= 1;
			Player_AmmoCount["Rocket"]	= 2;
		}
		case G_Objects["Creeper"] : {
			_Player.AmmoGain = 0.7;
			_Player.StaminaGain = 0.2;
			Player_AmmoCount["Laser"]	= 1;
			Player_AmmoCount["Rocket"]	= 2;
			if (S_MaxWeaponAmount <= 2) PossibleWeapons.remove("Nucleus");
			SetPlayerWeapon(_Player, CSmMode::EWeapon::Nucleus, False);
		}
	}
	
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser, Player_AmmoCount["Laser"]);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Nucleus, Player_AmmoCount["Nucleus"]);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Arrow, Player_AmmoCount["Arrow"]);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, Player_AmmoCount["Rocket"]);
	
	XmlRpc.SendCallback("poleCapture", _Player.Login);
}

// ---------------------------------- //
// Spawn objects
Void Combo_SpawnObjects() {
	foreach (MapLandmark in MapLandmarks_ObjectAnchor) {
		declare ObjectAnchor <=> MapLandmark.ObjectAnchor;
		if (ObjectAnchor == Null) continue;

		declare ObjectSpawned for MapLandmark = False;
		declare ObjectNextSpawn for MapLandmark = Now;
		declare CanBeSpawned for MapLandmark = 1;
		if (ObjectSpawned) continue;
		if (ObjectNextSpawn > Now) continue;
		
		if (MapLandmark.Id == G_CrateSpawnLandmark) continue;
		
		declare CSmObject Object;	
		if (MapLandmark.Order == G_ItemVariant || MapLandmark.Order == 0 || S_ItemsSpawnAll) {
			if (CanBeSpawned == 1) {
				switch (MapLandmark.Tag) {
					case "Armor" :		Object = ObjectCreate(G_Objects["Armor"]);
					case "Charge" :		Object = ObjectCreate(G_Objects["Charge"]);
					case "Weapon" :		Object = ObjectCreate(G_Objects["Weapon"]);
					case "Mini" :		Object = ObjectCreate(G_Objects["Mini"]);
					case "Replie" :		Object = ObjectCreate(G_Objects["Replie"]);
					case "Fuel" :		Object = ObjectCreate(G_Objects["Fuel"]);
					case "Gold" :		Object = ObjectCreate(G_Objects["Gold"]);
				}
			}
		}
		
		declare Boolean WeaponIsHealing for Object;
		WeaponIsHealing = True;
		
		declare Boolean MiniTakesArmor for Object;
		MiniTakesArmor = True;
		
		if (Object != Null) {
			declare AnchorId for Object = NullId;
			declare Tag for Object = MapLandmark.Tag;
			AnchorId = MapLandmark.Id;
			Tag = MapLandmark.Tag;
			ObjectSpawned = True;
			Object.SetAnchor(ObjectAnchor);
		}
	}
}

// ---------------------------------- //
/** Pick up object
 *
 *	@param	_Player		The player who picked up the item
 *	@param	_Object		The item picked up by the player
 */
Void PickUpObject(CSmPlayer _Player, CSmObject _Object) {
	if (_Player == Null || _Object == Null) return;

	declare Tag for _Object = "";
	declare AnchorId for _Object = NullId;

	if (!MapLandmarks_ObjectAnchor.existskey(AnchorId)) return;
	declare MapLandmark <=> MapLandmarks_ObjectAnchor[AnchorId];
	declare ObjectSpawned for MapLandmark = False;
	declare ObjectNextSpawn for MapLandmark = Now;
	ObjectSpawned = False;
	
	switch (Tag) {
		case "Armor" : ObjectNextSpawn = Now + S_ItemsArmorDelay * 1000;
		case "Replie" : ObjectNextSpawn = Now + S_ItemsArmorDelay * 1000;
		case "Charge" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
		case "Weapon" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
		case "Mini" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
		case "Fuel" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
		case "Gold" : ObjectNextSpawn = Now + S_ItemsRespawnDelay * 1000;
		case "Crate" : ObjectNextSpawn = Now + 3600000;
	}
	
	declare TopScore_Items for _Player = 0;	
	TopScore_Items += 1;
	Score::AddPoints(_Player, 1);
	
	declare Integer[Text]	Player_AmmoCount		for _Player;
	declare Text[]			Player_AvailableWeapons	for _Player;
	declare Integer			Player_RepliesCount		for _Player;
	
	declare Text WeaponId;
	
	// This is cause weird Real behavior
	declare AmmoGainInteger = 0;
	AmmoGainInteger = MathLib::NearestInteger(_Player.AmmoGain * 100);
	declare StaminaGainInteger = 0;
	StaminaGainInteger = MathLib::NearestInteger(_Player.StaminaGain * 100);
	declare SpeedFactorInteger = 0;
	SpeedFactorInteger = MathLib::NearestInteger(_Player.SpeedPower * 1000);
	
	
	declare Boolean IsDropped for _Object;
	
	if (Player_AvailableWeapons.count > 0) {
		WeaponId = Player_AvailableWeapons[MathLib::Rand(0, Player_AvailableWeapons.count - 1)];
	}
	
	declare Integer WillBeDropped for _Object;
	WillBeDropped = MathLib::Rand(0, 1);
	
	switch (Tag) {		
		case "Armor" : {
			_Player.Armor += 100;
			
			WillBeDropped = 0;
		}
		
		case "Charge" : {
			if (AmmoGainInteger <= 950) _Player.AmmoGain = (AmmoGainInteger + 5) / 100.;
			if (StaminaGainInteger <= 90) _Player.StaminaGain = (StaminaGainInteger + 10) / 100.;
			
			SendTip(_Player, "Yellow 'Charge' increases your ammo reload by 5% and stamina by 10%.", 7000);
		}
		
		case "Weapon" : {
			Player_AmmoCount[WeaponId] += 1;
			
			if (!IsDropped) {
				_Player.Armor += 100;
				IsDropped = True;
			}
			
			SendTip(_Player, "Purple 'Weapon' gives you one bullet to random weapon.", 6000);
		}
		
		case "Mini" : {
			if (!IsDropped) {
				_Player.Armor -= 100;
				IsDropped = True;
			}
			
			if (AmmoGainInteger <= 900) _Player.AmmoGain = (AmmoGainInteger + 10) / 100.;
			else if (AmmoGainInteger <= 950) _Player.AmmoGain = (AmmoGainInteger + 5) / 100.;
			if (StaminaGainInteger <= 80) _Player.StaminaGain = (StaminaGainInteger + 20) / 100.;
			else if (StaminaGainInteger <= 90) _Player.StaminaGain = (StaminaGainInteger + 10) / 100.;
			
			if (_Player.Armor < 100) SendChat("$<"^_Player.Name^"$> got eliminated by picking up MiniCharge.");
			
			SendTip(_Player, "Red 'MiniCharge' increases ammo and stamina reload, but takes one armor point.", 7000);
		}
		
		case "Replie" : {
			Player_RepliesCount += 1;
			
			WillBeDropped = 0;
			
			SendTip(_Player, "With pink 'Replie' you can heal one armor point. Press 'F' on your keyboard to use.", 7000);
		}
		
		case "Gold" : {
			if (SpeedFactorInteger <= 725) _Player.SpeedPower = (SpeedFactorInteger + 25) / 1000.;
			if (StaminaGainInteger <= 95) _Player.StaminaGain = (StaminaGainInteger + 5) / 100.;
			
			SendTip(_Player, "The Gold crystal is letting you 5% faster and adds higher stamina reload.", 7000);
		}
		
		case "Crate" : {
			if (!G_CrateHasBeenFound) {
				Message::SendBigMessage("$<"^_Player.Name^"$> has found the Crate!", 4000, 10, CUIConfig::EUISound::PhaseChange, 0);
				G_CrateHasBeenFound = True;
			} else {
				Message::SendBigMessage("$<"^_Player.Name^"$> picked up Crate!", 3000, 10, CUIConfig::EUISound::PhaseChange, 0);
			}
			
			G_CrateWearer = _Player;
			
			ActionBind(_Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::Weapon);
			
			WillBeDropped = 1;
			
			SendTip(_Player, "You found the 'Crate'! You can use now weapon Torpede! Don't waste bullets!", 7000);
		}
	}
	
	if (WillBeDropped == 0) ObjectDestroy(_Object);
	else _Object.SetPlayer(_Player);
	
	// Lock weapon if player has maximum bullet count
	if (Player_AmmoCount["Laser"] == S_MaxWeaponAmount && Player_AvailableWeapons.exists("Laser")) {
		Player_AvailableWeapons.remove("Laser");
	}
	if (Player_AmmoCount["Nucleus"] == S_MaxWeaponAmount && Player_AvailableWeapons.exists("Nucleus")) {
		Player_AvailableWeapons.remove("Nucleus");
	}
	if (Player_AmmoCount["Arrow"] == S_MaxWeaponAmount && Player_AvailableWeapons.exists("Arrow")) {
		Player_AvailableWeapons.remove("Arrow");
	}
	if (Player_AmmoCount["Rocket"] == 4 && Player_AvailableWeapons.exists("Rocket")) {
		Player_AvailableWeapons.remove("Rocket");
	}
}

/* ------------------------------------- */
/** Toss the critical hit
 *
 * @param	_Event			Operated hit event
 */
Void HungerGamesCriticalHit(CSmModeEvent _Event) {
	if (_Event.Shooter.IsBot) return;
	
	declare Boolean IsCrit for _Event.Shooter;
	IsCrit = False;
	
	declare CritChance = 0;
	
	switch (_Event.Shooter.ForceModelId) {
		case NullId :					CritChance = MathLib::Rand(1, 100);
		case G_Objects["Sintel"] : 		CritChance = MathLib::Rand(1, 33);
		case G_Objects["Susu"] :		CritChance = MathLib::Rand(1, 33);
		case G_Objects["ToadPlayer"] :	CritChance = MathLib::Rand(1, 50);
		case G_Objects["Engineer"]:		CritChance = MathLib::Rand(1, 50);
		case G_Objects["Boba"] : 		CritChance = MathLib::Rand(1, 50);
		case G_Objects["Steve"] : 		CritChance = MathLib::Rand(1, 50);
		case G_Objects["Creeper"] : 	CritChance = MathLib::Rand(1, 20);
	}
	
	if (CritChance == 1) {
		_Event.Damage += 100;
		
		Message::SendStatusMessage(_Event.Shooter, "$t"^"Critical hit!", 2000, 2, CUIConfig::EUISound::Silence, 0);
		Message::SendStatusMessage(_Event.Victim, "$f00"^"Critical hit!", 2000, 2, CUIConfig::EUISound::Silence, 0);
		
		SendTip(_Event.Shooter, "Critical hit takes two damage points!", 4000);
		SendTip(_Event.Victim, "Critical hit takes two damage points!", 4000);
	}
}

// ---------------------------------- //
/** Create HUD overlay
 *
 *	@return		Layer hgInfo manialink
 */
Text GetHudOverlay() {
	return """
		<frame id="Frame_Global" hidden="1">
		<format textfont="Eurostile.Font.Gbx"/>
		
		<frame class="LibCustomUI_Module" id="HG_AmmoCounter"><frame posn="-73 -71">
			<frame id="Frame_AmmoCounter">
				<frame posn="0 0">
					<quad sizen="10.5 7" bgcolor="000a"/>
					<quad posn="0.75 -1 2" sizen="5 5" id="Quad_Laser0" image="{{{C_BaseDir}}}laser_0.png"/>
					<quad posn="0.75 -1 3" sizen="5 5" id="Quad_Laser1" image="{{{C_BaseDir}}}laser_1.png" hidden="1"/>
					<label posn="8 -1.6 2" scale="0.9" halign="center" id="Label_CountLaser"/>
				</frame>
				<frame posn="11.5 0">
					<quad sizen="10.5 7" bgcolor="000a"/>
					<quad posn="1 -1 2" sizen="5 5" id="Quad_Nucleus0" image="{{{C_BaseDir}}}nucleus_0.png"/>
					<quad posn="1 -1 3" sizen="5 5" id="Quad_Nucleus1" image="{{{C_BaseDir}}}nucleus_1.png" hidden="1"/>
					<label posn="8 -1.6 2" scale="0.9" halign="center" id="Label_CountNucleus"/>
				</frame>
				<frame posn="23 0">
					<quad sizen="10.5 7" bgcolor="000a"/>
					<quad posn="0.75 -1 2" sizen="5 5" id="Quad_Arrow0" image="{{{C_BaseDir}}}arrow_0.png"/>
					<quad posn="0.75 -1 3" sizen="5 5" id="Quad_Arrow1" image="{{{C_BaseDir}}}arrow_1.png" hidden="1"/>
					<label posn="8 -1.6 2" scale="0.9" halign="center" id="Label_CountArrow"/>
				</frame>
				<frame posn="34.5 0">
					<quad sizen="10.5 7" bgcolor="000a"/>
					<quad posn="0.75 -1 2" sizen="5 5" id="Quad_Rocket0" image="{{{C_BaseDir}}}rocket_0.png"/>
					<quad posn="0.75 -1 3" sizen="5 5" id="Quad_Rocket1" image="{{{C_BaseDir}}}rocket_1.png" hidden="1"/>
					<label posn="8 -1.6 2" scale="0.9" halign="center" id="Label_CountRocket"/>
				</frame>
				<quad posn="0 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon1" hidden="1"/>
				<quad posn="11.5 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon2" hidden="1"/>
				<quad posn="23 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon3" hidden="1"/>
				<quad posn="34.5 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_Weapon4" hidden="1"/>
			</frame>
			<frame posn="34.5 0" id="Frame_TorpedeCounter">
				<quad sizen="10.5 7" bgcolor="000a"/>
				<quad posn="0.75 -1 3" sizen="5 5" id="Quad_Rocket1" image="{{{C_BaseDir}}}torpede_1.png"/>
				<label posn="8 -1.6 2" scale="0.9" halign="center" style="TextButtonNav" id="Label_CountTorpede"/>
				<quad posn="0 0 2" sizen="10.5 7" image="{{{C_BaseDir}}}hud_weapon_h.png" id="Quad_WeaponT"/>
			</frame>
		</frame></frame>
		
		<frame class="LibCustomUI_Module" id="HG_BuffCounter"><frame posn="28 -71 2" id="Frame_ReplieCounter">
			<quad sizen="10.5 7" bgcolor="000a"/>
			<quad posn="0.75 -1 2" sizen="5 5" id="Quad_Replie0" image="{{{C_BaseDir}}}replie_0.png"/>
			<quad posn="0.75 -1 3" sizen="5 5" id="Quad_Replie1" image="{{{C_BaseDir}}}replie_1.png" hidden="1"/>
			<label posn="8 -1.6 2" scale="0.9" halign="center" id="Label_CountReplies"/>
		</frame></frame>
		
		<frame posn="0 0 -10" id="Frame_MapMenu" hidden="1">
			<label posn="0 -62.5 4" halign="center" scale="0.875" textprefix="$t$s$FFF" text="Press 'E' to close map"/>
			<quad posn="-160 90 0" sizen="320 180" bgcolor="000A"/>
			<quad posn="-160 90 3" sizen="320 180" image="file://Media/Images/Effects/Vignette.dds"/>
			<quad posn="-160 90 3" sizen="320 180" image="file://Media/Images/Effects/Vignette.dds"/>
			
			<minimap sizen="240 240" posn="0 0 1" halign="center" valign="center" mapposition="1 0" id="MiniMap_Main"/>
			
			<quad posn="0 0 4" sizen="2 2" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_MapPointer"/>
			<quad posn="0 0 3.1" sizen="2 2" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_MenuPole" colorize="1. 1. 1."/>
			<quad posn="0 0 3.1" sizen="2 2" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_MenuCrate" colorize="0.7 0.4 0.1" hidden="1"/>
			<quad posn="0 0 3.2" sizen="2 2" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" hidden="1" id="Quad_MenuOpponent"/>
			
			<frame class="LibCustomUI_Module" id="HG_MapLegend"><frame posn="160 64 10" id="Frame_Legend">
				<quad posn="-0.5" sizen="0.5 13" bgcolor="777F" id="Quad_LegendBg"/>
				<quad posn="-3.5 -1 2" sizen="2 2" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_LegendYou"/>
				<quad posn="-3.5 -4 2" sizen="2 2" image="{{{C_BaseDir}}}hud_map_pointer.png" colorize="1. 1. 1."/>
				<quad posn="-3.5 -7 2" sizen="2 2" image="{{{C_BaseDir}}}hud_map_pointer.png" colorize="0.7 0.4 0.1" id="Quad_LegendCrate" hidden="1"/>
				<quad posn="-3.5 -10 2" sizen="2 2" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_LegendOpponent"/>
				<label posn="-4.5 -2 2" scale="0.7" valign="center2" halign="right" style="TextButtonNav" text="$s$fffYou"/>
				<label posn="-4.5 -5 2" scale="0.7" valign="center2" halign="right" style="TextButtonNav" text="$s$fffHorn of Plenty"/>
				<label posn="-4.5 -8 2" scale="0.7" valign="center2" halign="right" style="TextButtonNav" text="$s$fffCrate" id="Label_LegendCrate" hidden="1"/>
				<label posn="-4.5 -11 2" scale="0.7" valign="center2" halign="right" style="TextButtonNav" text="$s$fffOpponent" id="Label_LegendOpponent"/>
			</frame></frame>
			
			<frame class="LibCustomUI_Module" id="HG_Position"><frame posn="-160 64 10" id="Frame_Position">
				<quad sizen="0.5 10" bgcolor="777F"/>
				<label posn="2 -2 2" valign="center2" scale="0.7" style="TextButtonNav" id="Label_PositionX"/>
				<label posn="2 -5 2" valign="center2" scale="0.7" style="TextButtonNav" id="Label_PositionY"/>
				<label posn="2 -8 2" valign="center2" scale="0.7" style="TextButtonNav" id="Label_PositionZ"/>
			</frame></frame>
			
			<frame posn="86 -66 10" id="Frame_CharInfo">
				<quad sizen="96 24" image="{{{C_BaseDir}}}ScoresRectangleUnspawn2.dds"/>
				<quad posn="44 13 1" sizen="30 30" id="Quad_CharImage"/>
				<quad posn="44 12.5 0.5" sizen="30 30" image="{{{C_BaseDir}}}char_bg_glow.png" opacity="0.5"/>
				
				<label posn="59 -19.25 2" sizen="42 4" scale="0.675" halign="center" valign="center" id="Label_PlayerName"/>
				
				<format textcolor="777"/>
				<label posn="3 -3 2" scale="0.7" style="TextButtonNav" text="Ammo Reload"/>
				<label posn="3 -6.33 2" scale="0.7" style="TextButtonNav" text="STAMINA"/>
				<label posn="3 -9.66 2" scale="0.7" style="TextButtonNav" text="Speed"/>
				<label posn="3 -13 2" scale="0.7" style="TextButtonNav" text="Crit chance"/>
				
				<label posn="3 -18.6 2" scale="0.7" style="TextButtonNav" id="Label_CharName"/>
				
				<format textcolor="FFF"/>
				<label posn="44 -3 2" scale="0.7" halign="right" style="TextButtonNav" id="Label_AmmoGain"/>
				<label posn="44 -6.33 2" scale="0.7" halign="right" style="TextButtonNav" id="Label_StaminaGain"/>
				<label posn="44 -9.66 2" scale="0.7" halign="right" style="TextButtonNav" id="Label_Speed"/>
				<label posn="44 -13 2" scale="0.7" halign="right" style="TextButtonNav" id="Label_Criticals"/>
			</frame>
		</frame>
		
		<frame id="Frame_CrateDetector" posn="5 10">
			<quad substyle="Vehicles" style="Icons128x128_1" sizen="10 10"/>
			<label posn="2 -7" style="TextValueSmallSm" text="Detected!" scale="0.625"/>
		</frame>
		
		</frame>
		
		<script><!--
			#Include "MathLib" as ML
			#Include "TextLib" as TL
			
			main() {
				declare Frame_Global <=> (Page.GetFirstChild("Frame_Global") as CMlFrame);
				declare Frame_MiniMap <=> (Page.GetFirstChild("Frame_MiniMap") as CMlFrame);
				declare Frame_MapMenu <=> (Page.GetFirstChild("Frame_MapMenu") as CMlFrame);
				declare Frame_AmmoCounter <=> (Page.GetFirstChild("Frame_AmmoCounter") as CMlFrame);
				declare Frame_TorpedeCounter <=> (Page.GetFirstChild("Frame_TorpedeCounter") as CMlFrame);
				declare Frame_CrateDetector <=> (Page.GetFirstChild("Frame_CrateDetector") as CMlFrame);
				
				declare Label_CountLaser	<=> (Page.GetFirstChild("Label_CountLaser") as CMlLabel);
				declare Label_CountNucleus	<=> (Page.GetFirstChild("Label_CountNucleus") as CMlLabel);
				declare Label_CountArrow	<=> (Page.GetFirstChild("Label_CountArrow") as CMlLabel);
				declare Label_CountRocket	<=> (Page.GetFirstChild("Label_CountRocket") as CMlLabel);
				declare Label_CountReplies	<=> (Page.GetFirstChild("Label_CountReplies") as CMlLabel);
				declare Label_CountTorpede	<=> (Page.GetFirstChild("Label_CountTorpede") as CMlLabel);
				
				declare Quad_Laser0		<=> (Page.GetFirstChild("Quad_Laser0") as CMlQuad);
				declare Quad_Laser1		<=> (Page.GetFirstChild("Quad_Laser1") as CMlQuad);
				declare Quad_Nucleus0	<=> (Page.GetFirstChild("Quad_Nucleus0") as CMlQuad);
				declare Quad_Nucleus1	<=> (Page.GetFirstChild("Quad_Nucleus1") as CMlQuad);
				declare Quad_Arrow0		<=> (Page.GetFirstChild("Quad_Arrow0") as CMlQuad);
				declare Quad_Arrow1		<=> (Page.GetFirstChild("Quad_Arrow1") as CMlQuad);
				declare Quad_Rocket0	<=> (Page.GetFirstChild("Quad_Rocket0") as CMlQuad);
				declare Quad_Rocket1	<=> (Page.GetFirstChild("Quad_Rocket1") as CMlQuad);
				declare Quad_Replie0	<=> (Page.GetFirstChild("Quad_Replie0") as CMlQuad);
				declare Quad_Replie1	<=> (Page.GetFirstChild("Quad_Replie1") as CMlQuad);
				
				declare netread Integer[Text] Net_AmmoCount for UI;
				declare netread Integer Net_RepliesCount for UI;
				declare netread Integer Net_AmmoCountTorpede for UI;
				
				declare MiniMap_Main			<=> (Page.GetFirstChild("MiniMap_Main") as CMlMinimap);
				declare Quad_MenuPole			<=> (Page.GetFirstChild("Quad_MenuPole") as CMlQuad);
				declare Quad_MenuCrate			<=> (Page.GetFirstChild("Quad_MenuCrate") as CMlQuad);
				declare Quad_MenuOpponent		<=> (Page.GetFirstChild("Quad_MenuOpponent") as CMlQuad);
				declare Quad_LegendOpponent		<=> (Page.GetFirstChild("Quad_LegendOpponent") as CMlQuad);
				declare Label_LegendOpponent	<=> (Page.GetFirstChild("Label_LegendOpponent") as CMlLabel);
				declare Quad_LegendCrate		<=> (Page.GetFirstChild("Quad_LegendCrate") as CMlQuad);
				declare Label_LegendCrate		<=> (Page.GetFirstChild("Label_LegendCrate") as CMlLabel);
				declare Quad_LegendBg			<=> (Page.GetFirstChild("Quad_LegendBg") as CMlQuad);
				declare Quad_LegendYou			<=> (Page.GetFirstChild("Quad_LegendYou") as CMlQuad);
				declare Quad_MapPointer			<=> (Page.GetFirstChild("Quad_MapPointer") as CMlQuad);
				
				declare Label_PositionX <=> (Page.GetFirstChild("Label_PositionX") as CMlLabel);
				declare Label_PositionY <=> (Page.GetFirstChild("Label_PositionY") as CMlLabel);
				declare Label_PositionZ <=> (Page.GetFirstChild("Label_PositionZ") as CMlLabel);
				
				declare Label_AmmoGain		<=> (Page.GetFirstChild("Label_AmmoGain") as CMlLabel);
				declare Label_StaminaGain	<=> (Page.GetFirstChild("Label_StaminaGain") as CMlLabel);
				declare Label_Speed			<=> (Page.GetFirstChild("Label_Speed") as CMlLabel);
				declare Label_Criticals		<=> (Page.GetFirstChild("Label_Criticals") as CMlLabel);
				declare Quad_CharImage		<=> (Page.GetFirstChild("Quad_CharImage") as CMlQuad);
				declare Label_CharName		<=> (Page.GetFirstChild("Label_CharName") as CMlLabel);
				declare Label_PlayerName	<=> (Page.GetFirstChild("Label_PlayerName") as CMlLabel);
				
				declare Quad_Weapon1 <=> (Page.GetFirstChild("Quad_Weapon1") as CMlQuad);
				declare Quad_Weapon2 <=> (Page.GetFirstChild("Quad_Weapon2") as CMlQuad);
				declare Quad_Weapon3 <=> (Page.GetFirstChild("Quad_Weapon3") as CMlQuad);
				declare Quad_Weapon4 <=> (Page.GetFirstChild("Quad_Weapon4") as CMlQuad);
				declare Quad_WeaponT <=> (Page.GetFirstChild("Quad_WeaponT") as CMlQuad);
				
				declare HudColor for UI = TL::ColorToText(InputPlayer.User.Color);
				
				declare netread Boolean Net_CrateHasBeenFound for UI;
				declare netread Text Net_CrateWearer for UI;
				declare netread Vec3 Net_CratePosition for UI;
				declare netread Boolean Net_HadCrate for UI;
				
				Quad_LegendYou.Colorize = InputPlayer.User.Color;
				Quad_MapPointer.Colorize = InputPlayer.User.Color;
				
				declare Boolean MapMenuVisibility for UI;
				MapMenuVisibility = False;
				
				declare netread Integer Net_Model2 for UI;
				declare netread Integer Net_PlayersNbAlive for UI;
				
				declare netread Net_HasTorpede for UI = False;
				
				declare ModelId = 0;
				if (Net_Model2 == 0) ModelId = 1;
				else ModelId = Net_Model2;
				
				declare CSmPlayer Opponent;
				declare Vec3 LastCratePosition;
				
				{{{CustomUI::InjectMLInit()}}}
				
				while(True) {
					yield;
					
					foreach (Event in PendingEvents) {
						if (Event.Type == CMlEvent::Type::KeyPress) {
							if (Event.KeyName == "E") MapMenuVisibility = !MapMenuVisibility;
						}
					}
					
					{{{CustomUI::InjectMLLoop()}}}
					
					Frame_AmmoCounter.Visible = !Net_HasTorpede;
					Frame_TorpedeCounter.Visible = Net_HasTorpede;
					
					//// Switch menu visibility ////
					
					Frame_MapMenu.Visible = MapMenuVisibility;
					
					//// Map menu ////
					
					MiniMap_Main.RelativePosition = <
						InputPlayer.Position[0] / 384. * 240 - 120,
						InputPlayer.Position[2] / 384. * -240 + 120,
						1.
					>;
					
					Quad_MenuPole.RelativePosition = MiniMap_Main.RelativePosition + <
						{{{G_CenterPole.Position[0]}}} / 384. * -240 + 120,
						{{{G_CenterPole.Position[2]}}} / 384. * 240 - 120,
						3.
					>;
					
					foreach (Player in Players) {
						if (Net_CrateHasBeenFound) {
							if (Player.Login == Net_CrateWearer && Player.Position != <0., 0., 0.>) {
								LastCratePosition = Player.Position;
							}
							Quad_MenuCrate.RelativePosition = MiniMap_Main.RelativePosition + <
								LastCratePosition[0] / 384. * -240 + 120,
								LastCratePosition[2] / 384. * 240 - 120,
								1.5
							>;
							Quad_MenuCrate.Show();
						} else {
							Quad_MenuCrate.Hide();
						}
					}
					
					if (Net_PlayersNbAlive == 2) {
						foreach (Player in Players) {
							if (Player != InputPlayer && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !Player.IsBot) Opponent <=> Player;
						}
						if (Opponent != Null) {
							Quad_MenuOpponent.Show();
							Quad_LegendOpponent.Colorize = Opponent.User.Color;
							Quad_MenuOpponent.Colorize = Opponent.User.Color;
							Quad_MenuOpponent.RelativePosition = MiniMap_Main.RelativePosition + <
								Opponent.Position[0] / 384. * -240 + 120,
								Opponent.Position[2] / 384. * 240 - 120,
								3.
							>;
						}
					} else {
						Quad_MenuOpponent.Hide();
						Quad_LegendOpponent.Hide();
						Label_LegendOpponent.Hide();
						Quad_LegendBg.Size = <0.5, 7.>;
					}
					
					//// Position ////
					
					Label_PositionX.SetText("X: "^ML::FloorInteger(InputPlayer.Position[0]));
					Label_PositionY.SetText("Y: "^ML::FloorInteger(InputPlayer.Position[1]));
					Label_PositionZ.SetText("Z: "^ML::FloorInteger(InputPlayer.Position[2]));
					
					//// Display ammo count ////
					
					if (Net_AmmoCount["Laser"] > 0) {
						Label_CountLaser.SetText("$s$FFF"^Net_AmmoCount["Laser"]);
						Quad_Laser0.Hide();
						Quad_Laser1.Show();
					} else {
						Label_CountLaser.SetText("$s$777"^"0");
						Quad_Laser0.Show();
						Quad_Laser1.Hide();
					}
					
					if (Net_AmmoCount["Nucleus"] > 0) {
						Label_CountNucleus.SetText("$s$FFF"^Net_AmmoCount["Nucleus"]);
						Quad_Nucleus0.Hide();
						Quad_Nucleus1.Show();
					} else {
						Label_CountNucleus.SetText("$s$777"^"0");
						Quad_Nucleus0.Show();
						Quad_Nucleus1.Hide();
					}
					
					if (Net_AmmoCount["Arrow"] > 0) {
						Label_CountArrow.SetText("$s$FFF"^Net_AmmoCount["Arrow"]);
						Quad_Arrow0.Hide();
						Quad_Arrow1.Show();
					} else {
						Label_CountArrow.SetText("$s$777"^"0");
						Quad_Arrow0.Show();
						Quad_Arrow1.Hide();
					}
					
					if (Net_AmmoCount["Rocket"] > 0) {
						Label_CountRocket.SetText("$s$FFF"^Net_AmmoCount["Rocket"]);
						Quad_Rocket0.Hide();
						Quad_Rocket1.Show();
					} else {
						Label_CountRocket.SetText("$s$777"^"0");
						Quad_Rocket0.Show();
						Quad_Rocket1.Hide();
					}
					
					if (Net_RepliesCount > 0) {
						Label_CountReplies.SetText("$s$FFF"^Net_RepliesCount);
						Quad_Replie0.Hide();
						Quad_Replie1.Show();
					} else {
						Label_CountReplies.SetText("$s$777"^"0");
						Quad_Replie0.Show();
						Quad_Replie1.Hide();
					}
					
					Label_CountTorpede.SetText("$s$FFF"^Net_AmmoCountTorpede);
					
					//// Char info ////
					
					Label_AmmoGain.SetText(""^ML::NearestInteger(InputPlayer.AmmoGain*100)^"%");
					Label_StaminaGain.SetText(""^ML::NearestInteger(InputPlayer.StaminaGain*100)^"%");
					Label_PlayerName.SetText(InputPlayer.Name);
					
					if (ModelId == 0 || ModelId == 1) Label_Speed.SetText(ML::FloorInteger(InputPlayer.SpeedPower * 100)^"%");
					else Label_Speed.SetText(ML::FloorInteger(InputPlayer.SpeedPower * 200)^"%");
					
					switch (ModelId) {
						case 1 : {
							Label_Criticals.SetText("1%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_player.png";
							Label_CharName.SetText("Arena Player");
						}				
						case 2 : {
							Label_Criticals.SetText("3%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_sintel.png";
							Label_CharName.SetText("Sintel");
						}
						case 3 : {
							Label_Criticals.SetText("3%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_susu.png";
							Label_CharName.SetText("Susu");
						}
						case 4 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_organic.png";
							Label_CharName.SetText("Toad");
						}
						case 5 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_engineer.png";
							Label_CharName.SetText("Engineer");
						}
						case 6 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_boba.png";
							Label_CharName.SetText("Boba Fett");
						}
						case 7 : {
							Label_Criticals.SetText("2%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_steve.png";
							Label_CharName.SetText("Steve");
						}
						case 8 : {
							Label_Criticals.SetText("5%");
							Quad_CharImage.ImageUrl = "{{{C_BaseDir}}}char_creeper.png";
							Label_CharName.SetText("Creeper");
						}
					}
					
					//// Highlight weapon ////
					
					if (InputPlayer.CurWeapon == 1) {
						Quad_Weapon1.Show();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Hide();
					} else if (InputPlayer.CurWeapon == 3) {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Show();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Hide();
					} else if (InputPlayer.CurWeapon == 5) {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Show();
						Quad_Weapon4.Hide();
					} else if (InputPlayer.CurWeapon == 2 && Net_AmmoCount["Rocket"] > 0) {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Show();
					} else {
						Quad_Weapon1.Hide();
						Quad_Weapon2.Hide();
						Quad_Weapon3.Hide();
						Quad_Weapon4.Hide();
					}
					
					Quad_Weapon1.Colorize = InputPlayer.User.Color;
					Quad_Weapon2.Colorize = InputPlayer.User.Color;
					Quad_Weapon3.Colorize = InputPlayer.User.Color;
					Quad_Weapon4.Colorize = InputPlayer.User.Color;
					Quad_WeaponT.Colorize = InputPlayer.User.Color;
					
					/// Legend improvement ///
					if (Net_CrateHasBeenFound && Opponent != Null) {
						Quad_LegendBg.Size = <0.5, 13.>;
						Quad_LegendOpponent.Show();
						Label_LegendOpponent.Show();
						Quad_LegendCrate.Show();
						Label_LegendCrate.Show();
						Quad_LegendOpponent.RelativePosition = <-3.5, -10., 2.>;
						Label_LegendOpponent.RelativePosition = <-4.5, -11., 2.>;
					} else if (Net_CrateHasBeenFound) {
						Quad_LegendBg.Size = <0.5, 10.>;
						Quad_LegendOpponent.Hide();
						Label_LegendOpponent.Hide();
						Quad_LegendCrate.Show();
						Label_LegendCrate.Show();
					} else if (Opponent != Null) {
						Quad_LegendBg.Size = <0.5, 10.>;
						Quad_LegendOpponent.Show();
						Label_LegendOpponent.Show();
						Quad_LegendCrate.Hide();
						Label_LegendCrate.Hide();
						Quad_LegendOpponent.RelativePosition = <-3.5, -7., 2.>;
						Label_LegendOpponent.RelativePosition = <-4.5, -8., 2.>;
					}
					
					if (ML::Distance(Net_CratePosition, InputPlayer.Position) < 20. && !Net_HadCrate && Net_CrateWearer == "") {
						Frame_CrateDetector.Show();
					} else {
						Frame_CrateDetector.Hide();
					}
					
					Frame_Global.Show();
				}
			}
		--></script>
	""";
}

// ---------------------------------- //
/** Spawn the player
 *
 *	@param _Player		Player to be spawned
 */
Void Hunger_SpawnPlayer(CSmPlayer _Player) {
	if (_Player.IsBot) return;
	
	declare UI for _Player <=> UIManager.GetUI(_Player);
	
	_Player.ForceColor = _Player.User.Color;
	_Player.AmmoGain = 0.;
	_Player.StaminaGain = 0.;
	
	declare Boolean Player_WasSpawned		for _Player;
	declare Boolean Player_HasWeapon		for _Player;
	declare Boolean Player_HadCrate			for _Player;
	declare Integer Player_CriticalChance	for _Player;
	declare Integer Player_RepliesCount		for _Player;
	
	Player_WasSpawned		= True;
	Player_HasWeapon		= False;
	Player_HadCrate			= False;
	Player_CriticalChance	= 0;
	Player_RepliesCount		= 0;
	
	// Load actions
	ActionLoad(_Player, CSmMode::EActionSlot::Slot_A, G_Actions["Replie"]);
	ActionLoad(_Player, CSmMode::EActionSlot::Slot_B, G_Actions["Torpede"]);
	
	ActionBind(_Player, CSmMode::EActionSlot::Slot_A, CSmMode::EActionInput::Consumable1);
	ActionBind(_Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::None);
	
	// Prepare player weapons
	declare Integer[Text]	Player_AmmoCount		for _Player;
	declare Text[]			Player_AvailableWeapons	for _Player;
	
	Player_AmmoCount["Laser"]	= 0;
	Player_AmmoCount["Nucleus"]	= 0;
	Player_AmmoCount["Arrow"]	= 0;
	Player_AmmoCount["Rocket"]	= 0;
	
	Player_AvailableWeapons = ["Laser", "Nucleus", "Arrow", "Rocket"];
	
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Laser, 0);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Nucleus, 0);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Arrow, 0);
	SetPlayerAmmoMax(_Player, CSmMode::EWeapon::Rocket, 0);
	
	SetPlayerWeapon(_Player, CSmMode::EWeapon::Rocket, False);
	
	// Sync with Torpede action
	declare Integer TorpedeBulletsCount for _Player;
	TorpedeBulletsCount = 8;
	
	// Set character
	declare netread	Integer Net_ModelId for UI;
	declare netwrite Integer Net_CurrentModel for UI;
	declare Integer Player_Model for _Player;
	
	if (Net_ModelId == 0) Player_Model = 1;
	else Player_Model = Net_ModelId;
	Net_CurrentModel = Player_Model;
	
	switch (Player_Model) {
		case 1 : {
			_Player.ForceModelId = NullId;
			_Player.ArmorMax = 500;
			_Player.Armor = 500;
			_Player.SpeedPower = 1.;
		}
		case 2 : {
			_Player.ForceModelId = G_Objects["Sintel"];
			_Player.ArmorMax = 400;
			_Player.Armor = 400;
			_Player.SpeedPower = .6;
		}
		case 3 : {
			_Player.ForceModelId = G_Objects["Susu"];
			_Player.ArmorMax = 500;
			_Player.Armor = 500;
			_Player.SpeedPower = .45;
		}
		case 4 : {
			_Player.ForceModelId = G_Objects["ToadPlayer"];
			_Player.ArmorMax = 700;
			_Player.Armor = 700;
			_Player.SpeedPower = .375;
		}
		case 5 : {
			_Player.ForceModelId = G_Objects["Engineer"];
			_Player.ArmorMax = 600;
			_Player.Armor = 600;
			_Player.SpeedPower = .4;
		}
		case 6 : {
			_Player.ForceModelId = G_Objects["Boba"];
			_Player.ArmorMax = 600;
			_Player.Armor = 600;
			_Player.SpeedPower = .4;
		}
		case 7 : {
			_Player.ForceModelId = G_Objects["Steve"];
			_Player.ArmorMax = 500;
			_Player.Armor = 500;
			_Player.SpeedPower = .5;
		}
		case 8 : {
			_Player.ForceModelId = G_Objects["Creeper"];
			_Player.ArmorMax = 400;
			_Player.Armor = 400;
			_Player.SpeedPower = .375;
		}
	}
	
	// Set up the fake player
	if (_Player.IsFakePlayer) {
		_Player.Driver.Accuracy				= MathLib::Rand(.8, .95);
		_Player.Driver.AggroRadius			= MathLib::Rand(40., 60.);
		_Player.Driver.DisengageDistance	= MathLib::Rand(60., 100.);
		_Player.Driver.ShootPeriodMin		= 300;
		_Player.Driver.ShootPeriodMax		= 500;
		_Player.AmmoGain = .5;
	}
	
	SendTip(_Player, "Run to the Pole to get a weapon!", 6000);
	
	// ---------------------------------- //
	// Select spawn as in Melee
	if (G_SpawnsList.count == 0) {
		foreach (MapLandmark in MapLandmarks_PlayerSpawn) G_SpawnsList.add(MapLandmark.Id);
	}
	
	declare SpawnId = NullId;
	while (True) {
		SpawnId = G_SpawnsList[MathLib::Rand(0, G_SpawnsList.count - 1)];
		if (SpawnId != G_LatestSpawnId) break;
		if (G_SpawnsList.count == 1) break;
	}
	G_LatestSpawnId = SpawnId;
	SM::SpawnPlayer(_Player, 0, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn);
	declare Removed = G_SpawnsList.remove(SpawnId);
}

// ---------------------------------- //
/** Create Minimap
 *
 *	@return		Layer battleMinimap manialink
 */
Text GetMinimapLayer() {
	declare Text PointersML;
	PointersML = "";
	
	for (I, 1, 512) {
		PointersML ^= """
			<quad sizen="1.375 1.375" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_Player{{{I}}}" hidden="1" opacity="0"/>
		""";
	}
	
	return """
		<frame posn="156.5 -86.5" id="Frame_Minimap" hidden="0">
			{{{PointersML}}}
			<minimap sizen="{{{C_MinimapSize}}}.1 {{{C_MinimapSize}}}.1" posn="-{{{C_MinimapSize}}} {{{C_MinimapSize}}} -1" mapposition="1 0"/>
			
			<quad posn="-{{{C_MinimapSize+3}}} {{{C_MinimapSize+3}}} -2" sizen="{{{C_MinimapSize+6}}} {{{C_MinimapSize+6}}}" image="file://Media/Manialinks/Common/Minimap/MinimapOverlay2.dds"/>
			<quad sizen="1.5 1.5" halign="center" valign="center" hidden="1" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_PlayerPosition"/>
			<quad sizen="1.375 1.375" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_Opponent" hidden="1" opacity="0"/>
			<quad sizen="1.375 1.375" halign="center" valign="center" image="{{{C_BaseDir}}}hud_map_pointer.png" id="Quad_Crate" hidden="1" opacity="0" colorize="0.7 0.4 0.1"/>
		</frame>
		<script><!--
			main() {
				declare Frame_Minimap <=> (Page.GetFirstChild("Frame_Minimap") as CMlFrame);
				declare Quad_PlayerPosition <=> (Page.GetFirstChild("Quad_PlayerPosition") as CMlQuad);
				declare Quad_Opponent <=> (Page.GetFirstChild("Quad_Opponent") as CMlQuad);
				declare Quad_Crate <=> (Page.GetFirstChild("Quad_Crate") as CMlQuad);
				
				declare netread Boolean Net_MapMenuVisibility for UI;
				
				declare netread Integer Net_PlayersNbAlive for UI;
				declare netread Integer Net_BotsCount for UI;
				
				declare netread Boolean Net_CrateHasBeenFound for UI;
				declare netread Text Net_CrateWearer for UI;
				
				declare Boolean MapMenuVisibility;
				MapMenuVisibility = False;
				
				declare Integer CurAlivePlayers;
				
				while(True) {
					yield;
					
					if (InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
						foreach (Event in PendingEvents) {
							if (Event.Type == CMlEvent::Type::KeyPress) {
								if (Event.KeyName == "E") MapMenuVisibility = !MapMenuVisibility;
							}
						}
						Frame_Minimap.Visible = !MapMenuVisibility;
					} else {
						Frame_Minimap.Visible = True;
					}
					
					foreach (Player in Players) {
						if (CurAlivePlayers != Players.count) {
							for (I, 1, Players.count) {
								declare Pointer for Players[I - 1] <=> (Page.GetFirstChild("Quad_Player"^I) as CMlQuad);
							}
							CurAlivePlayers = Players.count;
						}
						
						declare CMlQuad Pointer for Player;
						
						Pointer.RelativePosition = <
							Player.Position[0] / 384 * -{{{C_MinimapSize}}},
							Player.Position[2] / 384 * {{{C_MinimapSize}}},
							2.
						>;
						
						if (Player.IsBot) {
							if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
								Pointer.Colorize = <0., .5, 0.>;
								Pointer.RelativeScale = 0.875;
								Pointer.Show();
								if (Pointer.Opacity < 0.95) Pointer.Opacity += 0.01;
								else Pointer.Opacity = 1.;
							} else {
								if (Pointer.Opacity > 0.01) Pointer.Opacity -= 0.01;
								else Pointer.Hide();
							}
						} else {
							if (InputPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned || InputPlayer.RequestsSpectate) {
								if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && Player.Position != <0., 0., 0.>) {
									Pointer.Colorize = Player.User.Color;
									Pointer.Show();
									if (Pointer.Opacity < 0.95) Pointer.Opacity += 0.01;
									else Pointer.Opacity = 1.;
								} else {
									if (Pointer.Opacity > 0.01) Pointer.Opacity -= 0.01;
									else Pointer.Hide();
								}
							} else {
								if (Pointer.Opacity > 0.01) Pointer.Opacity -= 0.01;
								else Pointer.Hide();
							}
						} 
					}
					
					if (InputPlayer.Position != <0., 0., 0.> && !InputPlayer.RequestsSpectate) {
						Quad_PlayerPosition.Colorize = <1., 1., 1.>;
						
						Quad_PlayerPosition.RelativePosition = <
							InputPlayer.Position[0] / 384 * -{{{C_MinimapSize}}},
							InputPlayer.Position[2] / 384 * {{{C_MinimapSize}}},
							3.
						>;
						
						if (Net_PlayersNbAlive == 2) {
							foreach (Player in Players) {
								if (Player != InputPlayer && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && !Player.IsBot) {
									Quad_Opponent.RelativePosition = <
										Player.Position[0] / 384 * -{{{C_MinimapSize}}},
										Player.Position[2] / 384 * {{{C_MinimapSize}}},
										2.9
									>;
									Quad_Opponent.Show();
									if (Quad_Opponent.Opacity < 0.95) Quad_Opponent.Opacity += 0.01;
									else Quad_Opponent.Opacity = 1.;
									Quad_Opponent.Colorize = Player.User.Color;
								}
							}
						}
						
						Quad_PlayerPosition.Show();
						if (Quad_PlayerPosition.Opacity < 0.95) Quad_PlayerPosition.Opacity += 0.01;
						else Quad_PlayerPosition.Opacity = 1.;
					} else {
						if (Quad_PlayerPosition.Opacity > 0.01) Quad_PlayerPosition.Opacity -= 0.01;
						else Quad_PlayerPosition.Hide();
					}
					
					if (Net_CrateHasBeenFound) {
						foreach (Player in Players) {
							if (Player.Login == Net_CrateWearer) {
								Quad_Crate.RelativePosition = <
									Player.Position[0] / 384 * -{{{C_MinimapSize}}},
									Player.Position[2] / 384 * {{{C_MinimapSize}}},
									2.8
								>;	
							}
						}
						Quad_Crate.Show();
						if (Quad_Crate.Opacity < 0.95) Quad_Crate.Opacity += 0.01;
						else Quad_Crate.Opacity = 1.;
					}
				}
			}
		--></script>
	""";
}

// ---------------------------------- //
/** Create the character selection window
 *
 *	@return		Layer charChoose manialink
 */
Text GetCharacterChoosingUI() {
return
"""
<manialink version="1" name="HG_CharSelection" background="0">
<frame posn="-75 40">
	<format textfont="Eurostile.Font.Gbx"/>
	<quad sizen="150 92" image="file://Media/Manialinks/HungerGames/char_bg.png"/>
	<label style="TextButtonNav" posn="5 -4 1" halign="left" scale="1.3" text="$FD0》"/>
	<label posn="10 -4 1" halign="left" scale="1.1" textprefix="$t$FFF" text="Select your character"/>
	<label posn="146 -4 1" halign="right" textprefix="$FD0" text="0:30" id="Label_Chrono"/>
	<frame posn="50 -16 2">
		<quad posn="-2 2 -1" sizen="64 23" bgcolor="000F"/>
		<label posn="0 0" scale="0.75" textprefix="$777" text="Armor points"/>
		<label posn="0 -4" scale="0.75" textprefix="$777" text="Speed factor"/>
		<label posn="0 -8" scale="0.75" textprefix="$777" text="Initial ammo reload"/>
		<label posn="0 -12" scale="0.75" textprefix="$777" text="Initial Stamina gain"/>
		<label posn="0 -16" scale="0.75" textprefix="$777" text="Critical hit chance"/>
		<label posn="60 0" scale="0.8" halign="right" textprefix="$FFF" text="5" id="Label_ArmorPoints"/>
		<label posn="60 -4" scale="0.8" halign="right" textprefix="$FFF" text="100%" id="Label_Speed"/>
		<label posn="60 -8" scale="0.8" halign="right" textprefix="$FFF" text="50%" id="Label_AmmoReload"/>
		<label posn="60 -12" scale="0.8" halign="right" textprefix="$FFF" text="20%" id="Label_Stamina"/>
		<label posn="60 -16" scale="0.8" halign="right" textprefix="$FFF" text="1%" id="Label_Critical"/>
	</frame>
	<frame posn="120 -16 2">
		<quad posn="-2 2 -1" sizen="24 23" bgcolor="000F"/>
		<label posn="10 0" scale="0.85" halign="center" text="$777Weapons"/>
		<frame posn="-0.7 -5">
			<quad sizen="6 6" image="file://Media/Manialinks/HungerGames/laser_0.png" id="Quad_Weapon1Icon"/>
			<label posn="6.35 -1.3" scale="0.9" text="$7770" id="Label_Weapon1Counter"/>
		</frame>
		<frame posn="10.5 -5">
			<quad sizen="6 6" image="file://Media/Manialinks/HungerGames/nucleus_0.png" id="Quad_Weapon2Icon"/>
			<label posn="6.35 -1.3" scale="0.9" text="$7770" id="Label_Weapon2Counter"/>
		</frame>
		<frame posn="-0.7 -12">
			<quad sizen="6 6" image="file://Media/Manialinks/HungerGames/arrow_0.png" id="Quad_Weapon3Icon"/>
			<label posn="6.35 -1.3" scale="0.9" text="$7770" id="Label_Weapon3Counter"/>
		</frame>
		<frame posn="10.5 -12">
			<quad sizen="6 6" image="file://Media/Manialinks/HungerGames/rocket_1.png" id="Quad_Weapon4Icon"/>
			<label posn="6.35 -1.3" scale="0.9" text="$7770" id="Label_Weapon4Counter"/>
		</frame>
	</frame>
	<frame posn="50 -42 2">
		<quad posn="-2 2 -1" sizen="94 22" bgcolor="000F"/>
		<label posn="0 0.25" scale="0.8" textprefix="$777" text="Description"/>
		<label posn="0 -4.5" scale="0.675" sizen="140 14" textprefix="$BBB" text="Arena Player is a default character. He's most balanced, has all abilities and is choosen by nearby all players." id="Label_CharDesc" autonewline="1"/>
	</frame>
	<quad posn="2 -11 1" sizen="148 0.5" image="file://Media/Manialinks/HungerGames/gradient.png"/>
	<quad posn="5 -14 1" sizen="40 40" image="file://Media/Manialinks/HungerGames/char_player.png" id="Quad_CharImage"/>
	<quad posn="4 -54 2" sizen="42 0.5" image="file://Media/Manialinks/HungerGames/gradient.png"/>
	<label posn="25 -57 1" halign="center" textprefix="$t$FFF" text="Arena Player" id="Label_CharName"/>
	<quad posn="2 -64.5 1" sizen="148 0.5" image="file://Media/Manialinks/HungerGames/gradient.png"/>
	<quad posn="12 -68 1" sizen="10 10" halign="center" valign="center" style="Icons64x64_1" substyle="ShowUp2" id="Quad_Pager"/>
	<frame posn="3 -70 1">
		<frame posn="0 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="1"/>
			<label posn="14.5 -1.5 1" scale="0.75" textprefix="$o$000" text="1"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter1"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_player.png"/>
		</frame>
		<frame posn="18 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="2"/>
			<label posn="14 -1.5 1" scale="0.75" textprefix="$o$000" text="2"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter2"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_sintel.png"/>
		</frame>
		<frame posn="36 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="3"/>
			<label posn="14 -1.5 1" scale="0.75" textprefix="$o$000" text="3"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter3"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_susu.png"/>
		</frame>
		<frame posn="54 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="4"/>
			<label posn="14 -1.5 1" scale="0.75" textprefix="$o$000" text="4"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter4"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_organic.png"/>
		</frame>
		<frame posn="72 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="5"/>
			<label posn="14 -1.5 1" scale="0.75" textprefix="$o$000" text="5"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter5"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_engineer.png"/>
		</frame>
		<frame posn="90 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="6"/>
			<label posn="14 -1.5 1" scale="0.75" textprefix="$o$000" text="6"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter6"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_boba.png"/>
		</frame>
		<frame posn="108 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="7"/>
			<label posn="14 -1.5 1" scale="0.75" textprefix="$o$000" text="7"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter7"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_steve.png"/>
		</frame>
		<frame posn="126 0">
			<quad sizen="18 18" style="UIConstruction_Buttons" substyle="Item" ScriptEvents="1" class="CharItem" id="8"/>
			<label posn="14 -1.5 1" scale="0.75" textprefix="$o$000" text="8"/>
			<label posn="9 -18" scale="0.75" halign="center" style="TextButtonNav" text="$7770" id="Label_CharCounter8"/>
			<quad posn="1 -1 1" sizen="16 16" image="file://Media/Manialinks/HungerGames/char_creeper.png"/>
		</frame>
	</frame>
</frame>
<script><!--
	#Include "TextLib" as TL
	
	#Const C_BaseDir "file://Media/Manialinks/HungerGames/"
	
	#Const C_CharName[
		1 => "Arena Player",
		2 => "Sintel",
		3 => "Susu",
		4 => "Invasion Toad",
		5 => "Engineer",
		6 => "Boba Fett",
		7 => "Steve",
		8 => "Creeper"
	]
	#Const C_CharDesc[
		1 => "Arena Player is default character. He's most balanced, has all abilities and is choosen by most players.",
		2 => "Training long time Sintel became the fastest girl in district 4. Sometimes instead of fighting better escape the danger.\n\nNOTE: No random critical hits.",
		3 => "Being one of the Combo champions, Susu has her presicion not only in obstacling with items, but keeps skill in taking criticals.",
		4 => "Just escaped from Invasion strike on third wave. Toad looks harmless, but you will se what power has inside.\n\nNOTE: Toad cannot wall-jump and use grappling hooks.",
		5 => "Bring the Blacklight fight strategies on the field while controlling the Engineer (no, this is not the guy of sentry gun).",
		6 => "Use the imperial blaster equipped by Boba. Become the Bounty Hunter, when you win the Games!\n\nNOTE: Boba can't destroy bullets with the Laser.",
		7 => "Has boots Feather Falling V, but lost his diamond pickaxe, so your only hope is the majestic launcher hidden in your arm.",
		8 => "Ssssss... Keep your house away! Beeing Creeper you can't explode, but you still can be explosive!\n\nNOTE: 20% critical hit chance while hitting Steve."
	]
	#Const C_CharImg[
		1 => "player",
		2 => "sintel",
		3 => "susu",
		4 => "organic",
		5 => "engineer",
		6 => "boba",
		7 => "steve",
		8 => "creeper"
	]
	
	#Const C_StatsArmor[0, 5, 4, 5, 7, 6, 6, 5, 4]
	#Const C_StatsSpeed[0, 100, 120, 90, 75, 80, 80, 100, 75]
	#Const C_StatsAmmo[0, 50, 50, 50, 50, 65, 65, 40, 40]
	#Const C_StatsStamina[0, 20, 10, 20, 60, 40, 40, 20, 20]
	#Const C_StatsCrit[0, 1, 0, 4, 3, 2, 2, 2, 1]
	
	#Const C_AmmoLaser[0, 0, 0, 0, 0, 0, 1, 0, 0]
	#Const C_AmmoNucleus[0, 0, 0, 0, 1, 0, 0, 0, 2]
	#Const C_AmmoArrow[0, 0, 0, 0, 0, 0, 0, 1, 0]
	#Const C_AmmoRocket[0, 4, 3, 4, 3, 4, 2, 3, 0]
	
	main() {
		declare Label_Chrono <=> (Page.GetFirstChild("Label_Chrono") as CMlLabel);
		
		declare Quad_Pager <=> (Page.GetFirstChild("Quad_Pager") as CMlQuad);
		declare Label_CharDesc <=> (Page.GetFirstChild("Label_CharDesc") as CMlLabel);
		declare Label_CharName <=> (Page.GetFirstChild("Label_CharName") as CMlLabel);
		declare Quad_CharImage <=> (Page.GetFirstChild("Quad_CharImage") as CMlQuad);
		
		declare Label_ArmorPoints <=> (Page.GetFirstChild("Label_ArmorPoints") as CMlLabel);
		declare Label_Speed <=> (Page.GetFirstChild("Label_Speed") as CMlLabel);
		declare Label_AmmoReload <=> (Page.GetFirstChild("Label_AmmoReload") as CMlLabel);
		declare Label_Stamina <=> (Page.GetFirstChild("Label_Stamina") as CMlLabel);
		declare Label_Critical <=> (Page.GetFirstChild("Label_Critical") as CMlLabel);
		
		declare Label_Weapon1Counter <=> (Page.GetFirstChild("Label_Weapon1Counter") as CMlLabel);
		declare Label_Weapon2Counter <=> (Page.GetFirstChild("Label_Weapon2Counter") as CMlLabel);
		declare Label_Weapon3Counter <=> (Page.GetFirstChild("Label_Weapon3Counter") as CMlLabel);
		declare Label_Weapon4Counter <=> (Page.GetFirstChild("Label_Weapon4Counter") as CMlLabel);
		
		declare Quad_Weapon1Icon <=> (Page.GetFirstChild("Quad_Weapon1Icon") as CMlQuad);
		declare Quad_Weapon2Icon <=> (Page.GetFirstChild("Quad_Weapon2Icon") as CMlQuad);
		declare Quad_Weapon3Icon <=> (Page.GetFirstChild("Quad_Weapon3Icon") as CMlQuad);
		declare Quad_Weapon4Icon <=> (Page.GetFirstChild("Quad_Weapon4Icon") as CMlQuad);
		
		declare netwrite Integer Net_ModelId for UI;
		Net_ModelId = 1;
		
		declare netread Integer[Integer] Net_ChoosesCount for UI;
		
		declare Label_CharCounter1 <=> (Page.GetFirstChild("Label_CharCounter1") as CMlLabel);
		declare Label_CharCounter2 <=> (Page.GetFirstChild("Label_CharCounter2") as CMlLabel);
		declare Label_CharCounter3 <=> (Page.GetFirstChild("Label_CharCounter3") as CMlLabel);
		declare Label_CharCounter4 <=> (Page.GetFirstChild("Label_CharCounter4") as CMlLabel);
		declare Label_CharCounter5 <=> (Page.GetFirstChild("Label_CharCounter5") as CMlLabel);
		declare Label_CharCounter6 <=> (Page.GetFirstChild("Label_CharCounter6") as CMlLabel);
		declare Label_CharCounter7 <=> (Page.GetFirstChild("Label_CharCounter7") as CMlLabel);
		declare Label_CharCounter8 <=> (Page.GetFirstChild("Label_CharCounter8") as CMlLabel);
		
		declare Integer AmmoLaser;
		declare Integer AmmoNucleus;
		declare Integer AmmoArrow;
		declare Integer AmmoRocket;
		
		declare StartTime = Now;
		declare EndTime = Now + {{{S_CharChoiceTime}}}000;
		
		while(True){
			yield;
			
			if (Net_ChoosesCount.existskey(1)) {
				Label_CharCounter1.Value = "$777"^Net_ChoosesCount[1];
				Label_CharCounter2.Value = "$777"^Net_ChoosesCount[2];
				Label_CharCounter3.Value = "$777"^Net_ChoosesCount[3];
				Label_CharCounter4.Value = "$777"^Net_ChoosesCount[4];
				Label_CharCounter5.Value = "$777"^Net_ChoosesCount[5];
				Label_CharCounter6.Value = "$777"^Net_ChoosesCount[6];
				Label_CharCounter7.Value = "$777"^Net_ChoosesCount[7];
				Label_CharCounter8.Value = "$777"^Net_ChoosesCount[8];
			}
			
			Label_Chrono.Value = TL::TimeToText(EndTime - Now + 1000, False);
			
			Quad_Pager.RelativePosition = <12 + 18. * (Net_ModelId-1), -68., 0.>;
			Label_CharDesc.Value = C_CharDesc[Net_ModelId];
			Label_CharName.Value = C_CharName[Net_ModelId];
			Quad_CharImage.ImageUrl = C_BaseDir^"char_"^C_CharImg[Net_ModelId]^".png";
			
			Label_ArmorPoints.Value = ""^C_StatsArmor[Net_ModelId];
			Label_Speed.Value = ""^C_StatsSpeed[Net_ModelId]^"%";
			Label_AmmoReload.Value = ""^C_StatsAmmo[Net_ModelId]^"%";
			Label_Stamina.Value = ""^C_StatsStamina[Net_ModelId]^"%";
			Label_Critical.Value = ""^C_StatsCrit[Net_ModelId]^"%";
			
			AmmoLaser = C_AmmoLaser[Net_ModelId];
			AmmoNucleus = C_AmmoNucleus[Net_ModelId];
			AmmoArrow = C_AmmoArrow[Net_ModelId];
			AmmoRocket = C_AmmoRocket[Net_ModelId];
			
			if (AmmoLaser > 0) {
				Label_Weapon1Counter.Value = "$fff"^AmmoLaser;
				Quad_Weapon1Icon.ImageUrl = C_BaseDir^"laser_1.png";
			} else {
				Label_Weapon1Counter.Value = "$7770";
				Quad_Weapon1Icon.ImageUrl = C_BaseDir^"laser_0.png";
			}
			
			if (AmmoNucleus > 0) {
				Label_Weapon2Counter.Value = "$fff"^AmmoNucleus;
				Quad_Weapon2Icon.ImageUrl = C_BaseDir^"nucleus_1.png";
			} else {
				Label_Weapon2Counter.Value = "$7770";
				Quad_Weapon2Icon.ImageUrl = C_BaseDir^"nucleus_0.png";
			}
			
			if (AmmoArrow > 0) {
				Label_Weapon3Counter.Value = "$fff"^AmmoArrow;
				Quad_Weapon3Icon.ImageUrl = C_BaseDir^"arrow_1.png";
			} else {
				Label_Weapon3Counter.Value = "$7770";
				Quad_Weapon3Icon.ImageUrl = C_BaseDir^"arrow_0.png";
			}
			
			if (AmmoRocket > 0) {
				Label_Weapon4Counter.Value = "$fff"^AmmoRocket;
				Quad_Weapon4Icon.ImageUrl = C_BaseDir^"rocket_1.png";
			} else {
				Label_Weapon4Counter.Value = "$7770";
				Quad_Weapon4Icon.ImageUrl = C_BaseDir^"rocket_0.png";
			}
			
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlEvent::Type::MouseClick) {
					Net_ModelId = TL::ToInteger(Event.ControlId);
				} else if (Event.Type == CMlEvent::Type::KeyPress) {
					switch (Event.KeyName) {
						case "1" : Net_ModelId = 1;
						case "2" : Net_ModelId = 2;
						case "3" : Net_ModelId = 3;
						case "4" : Net_ModelId = 4;
						case "5" : Net_ModelId = 5;
						case "6" : Net_ModelId = 6;
						case "7" : Net_ModelId = 7;
						case "8" : Net_ModelId = 8;
					}
				}
			}
		}
	}
--></script>
</manialink>
""";
}

// ---------------------------------- //
/** --
 *
 *	--
 */
Void SwitchWeapon(CSmModeEvent Event) {
	declare WeaponIndex for Event.Player = 0;
	WeaponIndex = Event.Player.CurWeapon;
	
	declare Integer AmmoCountLaser		for Event.Player;
	declare Integer AmmoCountNucleus	for Event.Player;
	declare Integer AmmoCountArrow		for Event.Player;
	declare Integer AmmoCountRocket		for Event.Player;
	
	switch (Event.ActionChange) {
		case -1 : {
			switch (Event.Player.CurWeapon) {
				case 1: {
					if (AmmoCountRocket > 0) WeaponIndex = 2;
					else if (AmmoCountArrow > 0) WeaponIndex = 5;
					else if (AmmoCountNucleus > 0) WeaponIndex = 3;
				}
				
				case 3: {
					if (AmmoCountLaser > 0) WeaponIndex = 1;
					else if (AmmoCountRocket > 0) WeaponIndex = 2;
					else if (AmmoCountArrow > 0) WeaponIndex = 5;
				}
				
				case 5: {
					if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountLaser > 0) WeaponIndex = 1;
					else if (AmmoCountRocket > 0) WeaponIndex = 2;
				}
				
				case 2: {
					if (AmmoCountArrow > 0) WeaponIndex = 5;
					else if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountLaser > 0) WeaponIndex = 1;
				}
			}
		}
		case 1 : {
			switch (Event.Player.CurWeapon) {					
				case 1: {
					if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountArrow > 0) WeaponIndex = 5;
					else if (AmmoCountRocket > 0) WeaponIndex = 2;
				}
				
				case 3: {
					if (AmmoCountArrow > 0) WeaponIndex = 5;
					else if (AmmoCountRocket > 0) WeaponIndex = 2;
					else if (AmmoCountLaser > 0) WeaponIndex = 1;
				}
				
				case 5: {
					if (AmmoCountRocket > 0) WeaponIndex = 2;
					else if (AmmoCountLaser > 0) WeaponIndex = 1;
					else if (AmmoCountNucleus > 0) WeaponIndex = 3;
				}
				
				case 2: {
					if (AmmoCountLaser > 0) WeaponIndex = 1;
					else if (AmmoCountNucleus > 0) WeaponIndex = 3;
					else if (AmmoCountArrow > 0) WeaponIndex = 5;
				}
			}
		}
	}
	
	switch (WeaponIndex) {
		case 1 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Laser, False);
		case 2 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Rocket, False);
		case 3 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Nucleus, False);
		case 5 : SetPlayerWeapon(Event.Player, CSmMode::EWeapon::Arrow, False);
	}
}

// Creates message for near miss
Text GetNearMissMessage(CSmModeEvent _Event) {
	// Catch invalid events
	if (_Event.Type != CSmModeEvent::EType::OnNearMiss) return "";
	if (_Event.Shooter.CurWeapon != 1) return "";
	if (_Event.MissDist <= 0.0) return "";
	
	// Get message text
	declare Message = "";
	declare Dist = MathLib::NearestInteger(_Event.MissDist * 1000);
	if (Dist >= 10) {
		Message = """You missed $<{{{_Event.Victim.Name}}}$> by {{{Dist/10.0}}}cm!""";
	} else {
		Dist = MathLib::NearestInteger(_Event.MissDist * 10000);
		if (Dist >= 10) {
			Message = """You missed $<{{{_Event.Victim.Name}}}$> by {{{Dist/10.0}}}mm!""";
		} else {
			Dist = MathLib::NearestInteger(_Event.MissDist * 10000000);
			Message = """You missed $<{{{_Event.Victim.Name}}}$> by {{{Dist/10.0}}}µm!""";
		}
	}
	return Message;
}

Void Countdown() {
	declare Integer CountdownDelay;
	CountdownDelay = Now;
	
	Layers::Create("countdown", """
		<quad posn="0 0 1" sizen="60 60" halign="center" valign="center" bgcolor="000" id="Quad_MainDigit"/>
		<quad posn="0 0 0" sizen="60 60" halign="center" valign="center" bgcolor="333" id="Quad_SecDigit"/>
		<script><!--
			main() {
				declare test <=> (Page.GetFirstChild("test") as CMlLabel);
				
				declare Quad_MainDigit <=> (Page.GetFirstChild("Quad_MainDigit") as CMlQuad);
				declare Quad_SecDigit <=> (Page.GetFirstChild("Quad_SecDigit") as CMlQuad);
				
				declare Tick = 11;
				declare TickEndTime = Now + 1000;
				
				declare Sound = Audio.CreateSound("file://Media/Manialinks/HungerGames/countdown.ogg", 1., False, False, False);
				Sound.Play();
				
				Quad_MainDigit.Hide();
				Quad_SecDigit.Hide();
				
				sleep(1227);
				
				while(True) {
					yield;
					
					if (Tick > -1) {
						Quad_MainDigit.Show();
						Quad_SecDigit.Show();
						
						Quad_MainDigit.RelativeScale -= 0.005;
						Quad_MainDigit.Opacity -= 0.005;
						
						Quad_SecDigit.RelativeScale += 0.0025;
						Quad_SecDigit.Opacity -= 0.0025;
					}
					
					if (Now >= TickEndTime && Tick > 0) {
						TickEndTime = Now + 1000;
						
						Quad_MainDigit.RelativeScale = 1.;
						Quad_MainDigit.Opacity = 1.;
						
						Quad_SecDigit.RelativeScale = 1.;
						Quad_SecDigit.Opacity = 0.75;
						
						Tick -= 1;
					}
					
					if (Now >= TickEndTime && Tick == 0) {
						if (Quad_MainDigit.Opacity >= 0.025) Quad_MainDigit.Opacity -= 0.025;
						if (Quad_SecDigit.Opacity >= 0.025) Quad_SecDigit.Opacity -= 0.025;
						if (Quad_MainDigit.Opacity <= 0.) Quad_MainDigit.Hide();
						if (Quad_SecDigit.Opacity <= 0.) Quad_SecDigit.Hide();
					}
					
					Quad_MainDigit.ImageUrl = "file://Media/Manialinks/HungerGames/countdown/main_"^Tick^".png";
					Quad_SecDigit.ImageUrl = "file://Media/Manialinks/HungerGames/countdown/sec_"^Tick^".png";
				}
			}
		--></script>
	""");
	
	foreach (Player in AllPlayers) Layers::Attach("countdown", Player);
	
	MB_Sleep(11227);
	
	Message::SendBigMessage("", 10, 10, CUIConfig::EUISound::Default, 0);
}

Text GetLayerTipsWindow() {
	return """
		<frame class="LibCustomUI_Module" id="HG_NewTipsWindow"><frame posn="0 -50 11" halign="center" scale="0.875">
			<quad posn="-64 0 0" sizen="128 14" bgcolor="000A" id="Quad_Tip" opacity="0"/>
			<label sizen="122 14" posn="0 -7.33 1" scale="0.9" halign="center" valign="center" autonewline="1" style="TextValueSmallSm" id="Label_Tip" opacity="0"/>
		</frame></frame>
		<frame posn="-159.5 -87.5" scale="0.5" id="Frame_Performance" hidden="1">
			<quad posn="1 -1 1" sizen="50 2" bgcolor="0F0" opacity="1" id="Quad_Performance"/>
			<quad sizen="52 4" bgcolor="000"/>
			<label posn="53 -2" valign="center2" scale="1.25" textemboss="1" textcolor="fff" text="300" id="Label_Performance"/>
		</frame>
		<label posn="-160 -90" valign="bottom" style="StyleTextScriptEditor" scale="0.75" text="$fffDev Build #03" id="Label_Build"/>
		<script><!--
			main() {
				declare Frame_Performance <=> (Page.GetFirstChild("Frame_Performance") as CMlFrame);
				declare Quad_Performance <=> (Page.GetFirstChild("Quad_Performance") as CMlQuad);
				declare Label_Performance <=> (Page.GetFirstChild("Label_Performance") as CMlLabel);
				declare Label_Build <=> (Page.GetFirstChild("Label_Build") as CMlLabel);
				declare Integer PerformancePoints;
				declare netread Integer Net_BotsCount for UI;
				declare netread Integer Net_ObjectsCount for UI;
				declare netread Boolean Net_OffZoneIsActive for UI;
				declare Integer OffZonePoints;
				
				declare Quad_Tip <=> (Page.GetFirstChild("Quad_Tip") as CMlQuad);
				declare Label_Tip <=> (Page.GetFirstChild("Label_Tip") as CMlLabel);
				declare netread Text Net_PlayerCurrentTipText for UI;
				declare netread Integer Net_PlayerCurrentTipTime for UI;
				declare Text CurrentTipText;
				CurrentTipText = Net_PlayerCurrentTipText;
				declare Integer AnimEnd;
				Quad_Tip.Opacity = 0.;
				Label_Tip.Opacity = 0.;
				{{{CustomUI::InjectMLInit()}}}
				while(True) {
					yield;
					{{{CustomUI::InjectMLLoop()}}}
					if (CurrentTipText != Net_PlayerCurrentTipText) {
						AnimEnd = Now + Net_PlayerCurrentTipTime;
						CurrentTipText = Net_PlayerCurrentTipText;
						Label_Tip.SetText(CurrentTipText);
						if (Net_PlayerCurrentTipText != "sync") {
							Quad_Tip.Opacity = 1.;
							Label_Tip.Opacity = 1.;
						}
					}
					if (Now >= AnimEnd) {
						if (Quad_Tip.Opacity > 0) Quad_Tip.Opacity -= 0.005;
						if (Quad_Tip.Opacity <= 0) Quad_Tip.Opacity = 0.;
						if (Label_Tip.Opacity > 0) Label_Tip.Opacity -= 0.005;
						if (Label_Tip.Opacity <= 0) Label_Tip.Opacity = 0.;
					}
					
					Frame_Performance.Visible = IsKeyPressed(123);
					Label_Build.Visible = !IsKeyPressed(123);
					
					if (Net_OffZoneIsActive) OffZonePoints = 10;
					else OffZonePoints = 0;
					
					PerformancePoints = 300 - Net_BotsCount - Players.count - Net_ObjectsCount - OffZonePoints + 1;
					Quad_Performance.Size = <50. * PerformancePoints/300, 2.>;
					declare Real Color;
					if (PerformancePoints >= 150) {
						Color = PerformancePoints/150. - 1;
						Quad_Performance.BgColor = <1-Color, 1., 0.>;
					} else {
						Color = PerformancePoints/150.;
						Quad_Performance.BgColor = <1., Color, 0.>;
					}
					Label_Performance.Value = ""^PerformancePoints;
				}
			}
		--></script>
	""";
}
