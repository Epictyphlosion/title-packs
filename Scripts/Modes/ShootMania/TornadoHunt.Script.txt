// -------------------------------------- //
//  TORNADO HUNT by domino54              //
//  script version: 2017-01-12            //
// -------------------------------------- //

#Extends "Modes/ShootMania/ModeGalaxyTitles.Script.txt"

#Const CompatibleMapTypes	"TornadoHuntArena GoalHuntArena RealmArena BattleArena"
#Const Version		"2017-01-12"
#Const ScriptName	"TornadoHunt.Script.txt"

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit			600 	as _("Time limit (seconds)")
#Setting S_PointsLimit			120		as _("Points limit")
#Setting S_EnablePvPWeapons		True	as _("Enable PvP weapons")
#Setting S_ShowTornadoOnGoal	True	as _("Show Tornado over the first Goal")
#Setting S_MaxNbPrevGoals		2		as _("Number of capturable previous Goals (4 max)")
#Setting S_BoostOthersOnCap		True	as _("Boost other players on capture")
#Setting S_GoalCaptureTimeout	30		as _("Time before other Goal is selected if not captured")

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_PointsPerCapturedGoal	2	///< Amount of points per every goal avaialble
#Const C_MaxNbPrevGoalsToCap	4	///< Maximum number of previous Goals to capture
#Const C_OffZoneConstantRadius	3.	///< Radius of the Tornado around the Goal

/// Force colors of both teams
#Const C_TeamsColors [0 => <1., 1., 0.>, 1 => <0., 1., 0.>]

#Const Description _("TYPE: Free for all\nOBJECTIVE: Touch the Goal highlighted with the Tornado to get a point. The first player to reach the points limit wins the map.")

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Integer G_GoalsNbMax;	///< Maxinum number of previous Goals to capture
declare Ident[] G_GoalsOrder;	///< All Goals listed from the oldest to the newest tossed
declare Ident[] G_GoalsList;	///< List of Goals available to toss
declare Ident G_LatestGoalId;	///< Previously tossed Goal
declare Ident[] G_SpawnsList;	///< List of Spawns available to toss
declare Ident G_LatestSpawnId;	///< Previously tossed Spawn
declare Text[] C_MapMarkers;	///< Text Ids of all markers created on the minimap by the mode

// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

// ---------------------------------- //
// Adjust the scores table
// ---------------------------------- //
***ScoresTable***
***
ST2::DestroyCol("LibST_SMRoundPoints");
ST2::SetColWidth("LibST_SMPoints", 5.);
TopScores::RemoveCategory("Support");
TopScores::AddCategory("Capture", "Cp", 2.25, 70.);
***

// ---------------------------------- //
// Server start
// ---------------------------------- //
***StartServer***
***
// ---------------------------------- //
// Set mode options
GT_DisableOffZoneDamage = True;
GT_DisableTornadoDamage = True;

// ---------------------------------- //
// Set the rules in the SpawnScreen
GT_SpawnScreenModeName = "Tornado Hunt";
GT_SpawnScreenModeType = _("Free for all");
GT_SpawnScreenObjectives = TL::Compose(
	_("$<%11. $>Touch the $<$FF0yellow$> Goal highlighted with the Tornado to get a point.\n$<%12. $>Touch the previous $<$0F0green$> and $<$FFFwhite$> Goals to get less points than highlighted one gives.\n$<%13. $>The first player to reach the points limit or the player with the highest score at the end of the time limit wins the map."),
	"$"^SpawnScreen::GetModeColor()
);

// ---------------------------------- //
// Set the rules in the pause menu
PauseMenu::SetModeRules(GT_SpawnScreenModeName, "Touch the $<$FF0yellow$> Goal highlighted with the Tornado to get a point. Touch the previous $<$0F0green$> and $<$BBBwhite$> Goals to get less points than highlighted one gives. The first player to reach the points limit or the player with the highest score at the end of the time limit wins the map.", "");

// ---------------------------------- //
// Create custom interface
Layers::Create("TornadoHunt:Markers", CreateManialinkMarkers());
Layers::SetType("TornadoHunt:Markers", CUILayer::EUILayerType::Markers);
Layers::Attach("TornadoHunt:Markers");

Layers::Create("TornadoHunt:Countdown", CreateManialinkCountdown());
Layers::Attach("TornadoHunt:Countdown");

UpdateInterface();
***

// ---------------------------------- //
// Map begin
// ---------------------------------- //
***InitMap***
***
declare CurrentTimeLimit = S_TimeLimit;
declare PrevPointsLimit = -1;
declare PrevShowTornado = False;
declare PrevNbGoalsMax = S_MaxNbPrevGoals;

// ---------------------------------- //
// Check if the map is valid
declare MapValidated = True;
declare TotalNbGoals = 0;

if (MapLandmarks_PlayerSpawn.count <= 0) MapValidated = False;
foreach (MapLandmark in MapLandmarks_Gauge) if (MapLandmark.Gate == Null) TotalNbGoals += 1;
if (TotalNbGoals < 3) MapValidated = False;

// ---------------------------------- //
// Skip map if not valid
if (!MapValidated) GT_SkipInvalidMap();
***

// ---------------------------------- //
// Start map
// ---------------------------------- //
***StartMap***
***
G_GoalsNbMax = ML::Clamp(S_MaxNbPrevGoals, 0, C_MaxNbPrevGoalsToCap);
G_GoalsOrder.clear();
G_GoalsList.clear();
G_SpawnsList.clear();
G_LatestGoalId = NullId;
G_LatestSpawnId = NullId;

// Reset OffZone
OffZoneRadius = 0.;
PrevShowTornado = False;

// ---------------------------------- //
// Wait for enough players to start game
while (!ServerShutdownRequested && !MatchEndRequested && Players.count <= 0) MB_Yield();

// ---------------------------------- //
// Init scores
MB_Sleep(1); ///< Allow the scores array to be sorted
foreach (Score in Scores) {
	declare Integer LastPoint for Score;
	LastPoint = 0;
}
declare LeadId = NullId;
if (Scores.existskey(0)) LeadId = Scores[0].User.Id;

// ---------------------------------- //
// Init players
foreach (Player in Players) {
	declare Ident[] CapturedLandmarksIds for Player;
	CapturedLandmarksIds.clear();
}

// ---------------------------------- //
// Start match
StartTime = Now + S_RespawnTime;
if (S_TimeLimit > 0) EndTime = StartTime + (S_TimeLimit * 1000);
else EndTime = -1;
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.UIAll.SendNotice("", CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::StartRound, 0);

// Set the first Goal
SelectNextGoal();
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Force custom teams colors
foreach (I => Team in Teams) {
	if (Team.ColorPrimary == C_TeamsColors[I]) continue;
	Team.ColorPrimary = C_TeamsColors[I];
}
***

// ---------------------------------- //
// Remove points on respawn
// ---------------------------------- //
***OnPlayerRequestRespawn***
***
if (Event.Player.Score != Null) Event.Player.Score.Points -= C_PointsPerCapturedGoal;
***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***PlayLoop***
***
// ---------------------------------- //
// Check if current Goal has timed out
foreach (MapLandmark in MapLandmarks_Gauge) {
	if (MapLandmark.Gate != Null || MapLandmark.Gauge.Speed >= 0) continue;
	if (MapLandmark.Gauge.ValueReal <= 0) {
		Translations::SendStatusMessage("The Goal has timed out", 3000, 0, CUIConfig::EUISound::Notice, 0);
		SelectNextGoal();
	}
}

// ---------------------------------- //
// Spawn players
foreach (Player in Players) {
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !Player.RequestsSpectate && GT_IsValidPlayer(Player)) {
		GT_InitPlayer(Player);
		GH_SpawnPlayer(Player);
	}
	
	// ---------------------------------- //
	// Check if player is touching a goal
	declare Ident PrevLandmarkId for Player;
	
	// Get the ID of landmark the player is on
	declare MapLandmarkId = NullId;
	if (Player.CapturedLandmark != Null) MapLandmarkId = Player.CapturedLandmark.Id;
	
	// Fire event on landmark change
	if (PrevLandmarkId != MapLandmarkId) {
		PrevLandmarkId = MapLandmarkId;
		CaptureLandmark(Player, MapLandmarkId);
	}
}

// ---------------------------------- //
// Turn all round points into normal points
foreach (Score in Scores) {
	if (Score.RoundPoints == 0) continue;
	Score.Points += Score.RoundPoints;
	Score.RoundPoints = 0;
}

// ---------------------------------- //
// Play sound and notice if someone is taking the lead
if (Scores.existskey(0) && Scores[0].User.Id != LeadId) {
	LeadId = Scores[0].User.Id;
	Message::SendBigMessage(TL::Compose(_("$<%1$> takes the lead!"), Scores[0].User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
}

// ---------------------------------- //
// Server info change
if (PrevPointsLimit != S_PointsLimit) {
	PrevPointsLimit = S_PointsLimit;
	ST2::SetFooterText(TL::Compose("%1 "^S_PointsLimit, _("Points limit : ")));
}

// ---------------------------------- //
// Update time limit
if (CurrentTimeLimit != S_TimeLimit) {
	CurrentTimeLimit = S_TimeLimit;
	if (S_TimeLimit > 0) EndTime = StartTime + (S_TimeLimit * 1000);
	else EndTime = -1;
}

// ---------------------------------- //
// PvP weapons setting change
if (UsePvPWeapons != S_EnablePvPWeapons) {
	UsePvPWeapons = S_EnablePvPWeapons;
}

// ---------------------------------- //
// Set the Tornado visibility
if (PrevShowTornado != S_ShowTornadoOnGoal) {
	PrevShowTornado = S_ShowTornadoOnGoal;
	
	if (S_ShowTornadoOnGoal) OffZoneRadius = C_OffZoneConstantRadius;
	else OffZoneRadius = 0.;
}

// ---------------------------------- //
// Update previous capturable Goals count
if (PrevNbGoalsMax != S_MaxNbPrevGoals) {
	PrevNbGoalsMax = S_MaxNbPrevGoals;
	G_GoalsNbMax = ML::Clamp(S_MaxNbPrevGoals, 0, C_MaxNbPrevGoalsToCap);
	UpdateInterface();
}

// ---------------------------------- //
// Victory conditions
if (Scores.existskey(0) && Scores[0].Points >= S_PointsLimit) {
	Message::SendBigMessage(
		TL::Compose(_("$<%1$> gets the final hit!"), Scores[0].User.Name),
		3000, 3, CUIConfig::EUISound::VictoryPoint, 0
	);
	MB_StopMap = True;
}
if (EndTime > 0 && Now > EndTime) MB_StopMap = True;
***

// ---------------------------------- //
// Map end
// ---------------------------------- //
***EndRound***
***
G_GoalsOrder.clear();
UpdateInterface();
OffZoneRadius = 0.;

// ---------------------------------- //
// Reset landmarks apperance
foreach (MapLandmark in MapLandmarks_Gauge) {
	if (MapLandmark.Gate != Null) continue;
	MapLandmark.Gauge.Max = 0;
	MapLandmark.Gauge.ValueReal = 0.;
	MapLandmark.Gauge.Speed = 0;
}

foreach (MapLandmark in MapLandmarks) {
	if (MapLandmark.Base == Null) continue;
	MapLandmark.Base.Clan = 0;
	MapLandmark.Base.IsActive = False;
}

// Unspawn everyone except the winner
foreach (I => Player in Players) if (I > 0) UnspawnPlayer(Player);

// Disallow the winner to move after match end
UIManager.UIAll.UISequence = CUIConfig::EUISequence::UIInteraction;
MB_Sleep(1500);

// Cinematic round end
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
MB_Sleep(1500);

Message::CleanBigMessages();
***

// ---------------------------------- //
// Server end
// ---------------------------------- //
***EndServer***
***
Layers::Detach("TornadoHunt:Countdown");
Layers::Destroy("TornadoHunt:Countdown");
Layers::Detach("TornadoHunt:Markers");
Layers::Destroy("TornadoHunt:Markers");
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Get the selection order of a landmark
 *
 *	@param	_MapLandmarkId		Id of the landmark to get order
 *
 *	@return		The landmark order
 */
Integer GetGoalOrder(Ident _MapLandmarkId) {
	if (!MapLandmarks_Gauge.existskey(_MapLandmarkId) || !G_GoalsOrder.exists(_MapLandmarkId)) return -1;
	
	declare Order = 0;
	while (Order <= G_GoalsOrder.count - 1) {
		if (G_GoalsOrder[G_GoalsOrder.count - Order - 1] == _MapLandmarkId) return Order;
		Order += 1;
	}
	return -1;
}

// ---------------------------------- //
/// Update the data sent to the interface
Void UpdateInterface() {
	declare netwrite Integer Net_TornadoHunt_NbMaxGoals for Teams[0];
	declare netwrite Integer Net_TornadoHunt_UpdateTime for Teams[0];
	declare netwrite Vec3 Net_TornadoHunt_CurrentGoal for Teams[0];
	declare netwrite Vec3[] Net_TornadoHunt_GoalsOrder for Teams[0];
	declare netwrite Vec3[][Text] Net_TornadoHunt_CapturedGoals for Teams[0];
	
	Net_TornadoHunt_NbMaxGoals = G_GoalsNbMax;
	Net_TornadoHunt_UpdateTime = Now;
	Net_TornadoHunt_CurrentGoal = Vec3;
	Net_TornadoHunt_GoalsOrder.clear();
	Net_TornadoHunt_CapturedGoals.clear();
	
	// ---------------------------------- //
	// Get the list of all capturable Goals
	foreach (MapLandmarkId in G_GoalsOrder) {
		declare GoalOrder = GetGoalOrder(MapLandmarkId);
		if (GoalOrder < 0 || GoalOrder > G_GoalsNbMax) continue;
		
		// Get landmark position
		if (!MapLandmarks.existskey(MapLandmarkId)) continue;
		declare MapLandmark <=> MapLandmarks[MapLandmarkId];
		Net_TornadoHunt_GoalsOrder.add(MapLandmark.Position);
	}
	
	// ---------------------------------- //
	// Get the current Goal
	if (Net_TornadoHunt_GoalsOrder.count > 0)
		Net_TornadoHunt_CurrentGoal = Net_TornadoHunt_GoalsOrder[Net_TornadoHunt_GoalsOrder.count - 1];
	
	// ---------------------------------- //
	// Get list of Goals captured by players
	foreach (Player in Players) {
		declare Ident[] CapturedLandmarksIds for Player;
		Net_TornadoHunt_CapturedGoals[Player.User.Login] = Vec3[];
		
		foreach (MapLandmarkId in CapturedLandmarksIds) {
			if (!MapLandmarks.existskey(MapLandmarkId)) continue;
			declare MapLandmark <=> MapLandmarks[MapLandmarkId];
			Net_TornadoHunt_CapturedGoals[Player.User.Login].add(MapLandmark.Position);
		}
	}
	
	// ---------------------------------- //
	// Update minimap markers
	foreach (Marker in C_MapMarkers) MiniMap::DestroyMarker(Marker);
	C_MapMarkers.clear();
	
	foreach (MapLandmarkId in G_GoalsOrder) {
		declare GoalOrder = GetGoalOrder(MapLandmarkId);
		if (GoalOrder < 0 || GoalOrder > G_GoalsNbMax) continue;
		
		// Configure marker apperance
		declare MapLandmark <=> MapLandmarks[MapLandmarkId];
		declare MarkerId = "Goal#"^GoalOrder;
		declare Color = <1., 1., 1.>;
		if (C_TeamsColors.existskey(GoalOrder)) Color = C_TeamsColors[GoalOrder];
		
		// Create marker
		MiniMap::SetMarker(MarkerId, "Goal.png", Color, MapLandmark.Position);
		C_MapMarkers.add(MarkerId);
	}
}

// ---------------------------------- //
/// Show the capture alert animation
Void ShowCaptureAlert() {
	declare netwrite Integer Net_TornadoHunt_CaptureTime for Teams[0];
	Net_TornadoHunt_CaptureTime = Now;
}

// ---------------------------------- //
/// Select random next goal
Void SelectNextGoal() {
	// Fill the goals list
	if (G_GoalsList.count <= 0) foreach (MapLandmark in MapLandmarks_Gauge) if (MapLandmark.Gate == Null) G_GoalsList.add(MapLandmark.Id);
	
	// ---------------------------------- //
	// Choose random goal
	declare MapLandmarkId = NullId;
	while (True) {
		MapLandmarkId = G_GoalsList[ML::Rand(0, G_GoalsList.count - 1)];
		if (MapLandmarkId != G_LatestGoalId || G_GoalsList.count == 1) break;
	}
	declare Removed = G_GoalsList.remove(MapLandmarkId);
	G_LatestGoalId = MapLandmarkId;
	
	// ---------------------------------- //
	// List the goal at the end of the array
	if (G_GoalsOrder.exists(MapLandmarkId)) {
		declare Removed = G_GoalsOrder.remove(MapLandmarkId);
	}
	G_GoalsOrder.add(MapLandmarkId);
	
	// ---------------------------------- //
	// Remove landmark from captured IDs array
	foreach (Player in AllPlayers) {
		declare Ident[] CapturedLandmarksIds for Player;
		while (CapturedLandmarksIds.exists(MapLandmarkId)) {
			Removed = CapturedLandmarksIds.remove(MapLandmarkId);
		}
	}
	
	// ---------------------------------- //
	// Configure landmarks apperance
	foreach (MapLandmark in MapLandmarks_Gauge) {
		if (MapLandmark.Gate != Null) continue;
		declare GoalOrder = GetGoalOrder(MapLandmark.Id);
		
		// Make the goal center of the OffZone
		if (GoalOrder == 0) OffZoneCenterLandmarkId = MapLandmark.Id;
		
		// Reset Goal gauge
		MapLandmark.Gauge.Max = 1;
		MapLandmark.Gauge.ValueReal = 0.;
		MapLandmark.Gauge.Speed = 0;
		
		// ---------------------------------- //
		// Configure the landmark base
		if (MapLandmark.Base == Null) continue;
		MapLandmark.Base.IsActive = GoalOrder != -1 && GoalOrder <= G_GoalsNbMax;
		if (MapLandmark.Base.IsActive) MapLandmark.Gauge.ValueReal = 1.;
		
		// Set clan depending on order
		declare Clan = GoalOrder + 1;
		if (Clan > 2) Clan = 0;
		MapLandmark.Base.Clan = Clan;
		MapLandmark.Gauge.Clan = Clan;
	}
	
	// ---------------------------------- //
	// Set the goal timeout
	if (S_GoalCaptureTimeout > 0) {
		declare MapLandmark <=> MapLandmarks[MapLandmarkId];
		MapLandmark.Gauge.Max = S_GoalCaptureTimeout * 1000;
		MapLandmark.Gauge.ValueReal = 1.;
		MapLandmark.Gauge.Speed = -1;
	}
	
	// Update interfaces
	UpdateInterface();
}

// ---------------------------------- //
/** Capture a landmark by a player
 *
 *	@param	_Player			The player that captures a landmark
 *	@param	_MapLandmarkId	Id of the landmark to capture
 */
Void CaptureLandmark(CSmPlayer _Player, Ident _MapLandmarkId) {
	if (_Player == Null || _MapLandmarkId == NullId) return;
	
	// Get the order of the goal
	declare GoalOrder = GetGoalOrder(_MapLandmarkId);
	if (GoalOrder <= -1 || GoalOrder > G_GoalsNbMax) return;
	
	// Check if player haven't captured this goal yet
	declare Ident[] CapturedLandmarksIds for _Player;
	if (CapturedLandmarksIds.exists(_MapLandmarkId)) return;
	CapturedLandmarksIds.add(_MapLandmarkId);
	
	// Give points for capturing the goal
	declare Points = (G_GoalsNbMax - GoalOrder + 1) * C_PointsPerCapturedGoal;
	Score::AddPoints(_Player, Points);
	TopScores::AddPoints(_Player.Score, "Capture", Points);
	Statistics::TrackEvent(_Player, "TornadoHuntGoals", 1);
	Interfancy::SendCrosshairNote(_Player, ["+%1 %2", TL::ToText(Points), _("Points")], 2000);
	
	// Notify player about the capture
	Translations::SendStatusMessage(_Player, ["You've captured the Goal #%1!", TL::ToText(GoalOrder + 1)], 3000, 1, CUIConfig::EUISound::Checkpoint, 0);
	
	// ---------------------------------- //
	// Things valid only for the highlighted Goal
	if (GoalOrder == 0) {
		foreach (Player in AllPlayers) {
			if (Player == _Player || Player.IsBot) continue;
			
			// Notify other players about the capture
			Translations::SendStatusMessage(Player, ["$<%1$> has captured the Goal #%2", _Player.User.Name, TL::ToText(GoalOrder + 1)], 3000, 0, CUIConfig::EUISound::Checkpoint, 1);
			
			// Boost other players on capture
			if (S_BoostOthersOnCap && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
				GalaxyTitles::AddReloadBoost(Player);
				Player.Stamina = ML::FloorInteger(3600 * Player.StaminaMax);
			}
		}
		
		// Select new random Goal
		SelectNextGoal();
		ShowCaptureAlert();
	}
	
	// Update interfaces
	else UpdateInterface();
}

// ---------------------------------- //
/** Spawn a player
 *
 *	@param	_Player		The player to spawn
 */
Void GH_SpawnPlayer(CSmPlayer _Player) {
	if (_Player == Null) return;
	
	// Fill the spawns lists
	if (G_SpawnsList.count == 0) foreach (MapLandmark in MapLandmarks_PlayerSpawn) G_SpawnsList.add(MapLandmark.Id);
	
	// ---------------------------------- //
	// Get new spawn
	declare SpawnId = NullId;
	while (True) {
		SpawnId = G_SpawnsList[ML::Rand(0, G_SpawnsList.count - 1)];
		if (SpawnId != G_LatestSpawnId || G_SpawnsList.count == 1) break;
	}
	G_LatestSpawnId = SpawnId;
	
	// ---------------------------------- //
	// Spawn player
	SM::SpawnPlayer(_Player, 0, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, Now + S_RespawnTime);
	declare Removed = G_SpawnsList.remove(SpawnId);
}

// ---------------------------------- //
/** Create manialink for the countdown module
 *
 *	@return		The countdown manialink
 */
Text CreateManialinkCountdown() {
	return """
<manialink version="2" name="TornadoHunt:Countdown">
<stylesheet>
	<style class="text" halign="center" valign="center2" textemboss="1" textfont="Eurostile_Bold" textcolor="FFF"/>
	<style class="circ" sizen="16 16" halign="center" valign="center" colorize="FFF"/>
</stylesheet>

<frame id="Frame_PoleGauge" posn="0 75" hidden="1">
	<quad class="circ" image="{{{C_ImgBase}}}CircGaugeBg.png" id="Quad_GaugeBg"/>
	<frame posn="-.05 0 1" clip="1" clipposn="4" clipsizen="8 16">
		<quad class="circ" image="{{{C_ImgBase}}}CircGaugeProg.png" id="Quad_GaugeL" hidden="1"/>
	</frame>
	<frame posn="0 0 1" clip="1" clipposn="-4" clipsizen="8 16">
		<quad class="circ" image="{{{C_ImgBase}}}CircGaugeProg.png" id="Quad_GaugeR" hidden="1" rot="180"/>
	</frame>
	<label posn="0 -2.75 2" class="text" textsize="2" text="0s" id="Label_Ratio"/>
	<quad posn="0 1.25 2" sizen="6 6" halign="center" valign="center" style="Emblems" substyle="#0"/>
	<quad
		posn="0 0 -1" sizen="14 14" halign="center" valign="center"
		image="file://Media/Manialinks/Common/disc.dds" colorize="FFF" opacity="0" id="Quad_CaptureAlert"
	/>
</frame>

<script><!--
/**
 *	TornadoHunt: Countdown
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Frame_PoleGauge <=> (Page.GetFirstChild("Frame_PoleGauge") as CMlFrame);
declare Quad_GaugeL <=> (Page.GetFirstChild("Quad_GaugeL") as CMlQuad);
declare Quad_GaugeR <=> (Page.GetFirstChild("Quad_GaugeR") as CMlQuad);
declare Quad_GaugeBg <=> (Page.GetFirstChild("Quad_GaugeBg") as CMlQuad);
declare Label_Ratio <=> (Page.GetFirstChild("Label_Ratio") as CMlLabel);
declare Quad_CaptureAlert <=> (Page.GetFirstChild("Quad_CaptureAlert") as CMlQuad);

// ---------------------------------- //
// Netcode
declare netread Vec3 Net_TornadoHunt_CurrentGoal for Teams[0];
declare netread Integer Net_TornadoHunt_CaptureTime for Teams[0];

// ---------------------------------- //
// Variables
declare CurrentGoalId = NullId;
declare Time = 0;
declare MaxTime = 0;

// Update
declare PrevGoal = Vec3;
declare PrevCaptureTime = -1;

// ---------------------------------- //
// Set the gauge color
declare Color = {{{C_TeamsColors[0]}}};
Quad_GaugeL.Colorize = Color;
Quad_GaugeR.Colorize = Color;
Quad_GaugeBg.Colorize = Color;
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
if (!PageIsVisible) continue;

// ---------------------------------- //
// Get current Goal Id
if (PrevGoal != Net_TornadoHunt_CurrentGoal) {
	PrevGoal = Net_TornadoHunt_CurrentGoal;
	CurrentGoalId = NullId;
	foreach (MapLandmark in MapLandmarks_Gauge) if (MapLandmark.Position == PrevGoal) CurrentGoalId = MapLandmark.Id;
}

// ---------------------------------- //
// Show the capture alert
if (PrevCaptureTime != Net_TornadoHunt_CaptureTime) {
	if (PrevCaptureTime > 0) {
		LibManialink_AnimStop(Quad_CaptureAlert);
		
		Quad_CaptureAlert.RelativeScale = 1.;
		Quad_CaptureAlert.Opacity = .75;
		
		LibManialink_Anim(Quad_CaptureAlert, "<quad scale=1.75 opacity=0 />", 1500, "EaseOutCirc");
	}
	PrevCaptureTime = Net_TornadoHunt_CaptureTime;
}

// ---------------------------------- //
// Set the frame visibility
if (CurrentGoalId != NullId) {
	declare MapLandmark <=> MapLandmarks_Gauge[CurrentGoalId];
	Time = MapLandmark.Gauge.Value;
	MaxTime = MapLandmark.Gauge.Max;
}
Frame_PoleGauge.Visible = MaxTime > 1 && Time > 0;
if (!Frame_PoleGauge.Visible) continue;

// ---------------------------------- //
// Set ratio
declare Ratio = ML::ToReal(Time) / MaxTime;
Quad_GaugeL.RelativeRotation = ML::Clamp(Ratio * 360., 0., 180.);
Quad_GaugeR.RelativeRotation = 180 + ML::Clamp((Ratio - .5) * 360., 0., 180.);
Quad_GaugeL.Visible = Quad_GaugeL.RelativeRotation > 1.5;
Quad_GaugeR.Visible = Quad_GaugeR.RelativeRotation > 180;
Label_Ratio.Value = ML::CeilingInteger(Time / 1000.)^"s";
***

{{{Manialink::Animations(["EaseOutCirc"])}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	---Main---
	while (True) {
		yield;
		LibManialink_AnimLoop();
		---Yield---
	}
}
--></script>
</manialink>""";
}

// ---------------------------------- //
/** Create manialink for the markers module
 *
 *	@return		The markers manialink
 */
Text CreateManialinkMarkers() {
	declare R = 9/16.;
	
	declare Text MarkersInstances;
	for (I, 0, C_MaxNbPrevGoalsToCap)
		MarkersInstances ^= "<frameinstance modelid='FrameModel_GoalMarker' id='Frame_GoalMarker#"^I^"' hidden=1 />";
	
	return """
<manialink version="2" name="TornadoHunt:Markers">
<stylesheet>
	<style class="text" halign="center" valign="center2" textsize="0" textemboss="1" textcolor="FFF" textfont="Eurostile_Bold"/>
</stylesheet>

<framemodel id="FrameModel_GoalMarker">
	<label posn="0 4" class="text" id="Label_MarkerDistance"/>
	<label posn="0 2" class="text" scale="1.5" id="Label_MarkerGoalName"/>
	<label class="text" id="Label_MarkerNbPoints"/>
	<quad posn="0 3" sizen="{{{8*R}}} 8" halign="center" autoscale="0" image="file://Media/Manialinks/ShootMania/Common/target.dds" id="Quad_MarkerIcon"/>
</framemodel>

{{{MarkersInstances}}}

<script><!--
/**
 *	TornadoHunt: Markers
 */

#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare CMlFrame[] Frame_GoalsMarkers;
for (I, 0, {{{C_MaxNbPrevGoalsToCap}}}) Frame_GoalsMarkers.add((Page.GetFirstChild("Frame_GoalMarker#"^I) as CMlFrame));

declare CMlLabel[] Label_MarkersDistances;
foreach (Frame in Frame_GoalsMarkers) Label_MarkersDistances.add((Frame.GetFirstChild("Label_MarkerDistance") as CMlLabel));

// ---------------------------------- //
// Netcode
declare netread Integer Net_TornadoHunt_NbMaxGoals for Teams[0];
declare netread Integer Net_TornadoHunt_UpdateTime for Teams[0];
declare netread Vec3[] Net_TornadoHunt_GoalsOrder for Teams[0];
declare netread Vec3[][Text] Net_TornadoHunt_CapturedGoals for Teams[0];

// ---------------------------------- //
// Variables
declare UpdateMarkers = 2;
declare VisibleFrames = Integer[];

declare PrevUpdateTime = -1;
declare PrevGUIPlayerId = NullId;

// Reset markers
ClientUI.MarkersXML = "";
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Server script called an update
if (PrevUpdateTime != Net_TornadoHunt_UpdateTime) {
	PrevUpdateTime = Net_TornadoHunt_UpdateTime;
	UpdateMarkers = 2;
}

// ---------------------------------- //
// Force update on spectated player change
if (GUIPlayer != Null) {
	if (PrevGUIPlayerId != GUIPlayer.Id) {
		PrevGUIPlayerId = GUIPlayer.Id;
		UpdateMarkers = 2;
	}
}
else if (PrevGUIPlayerId != NullId) {
	PrevGUIPlayerId = NullId;
	UpdateMarkers = 2;
}

// ---------------------------------- //
// Update markers
if (UpdateMarkers > 0) {
	UpdateMarkers -= 1;
	
	// Reset markers
	ClientUI.MarkersXML = "";
	
	declare Text Login;
	if (GUIPlayer != Null && GUIPlayer.User != Null) Login = GUIPlayer.User.Login;
	
	// ---------------------------------- //
	// Create marker for every Goal available
	foreach (I => Frame in Frame_GoalsMarkers) {
		Frame.Visible = Net_TornadoHunt_GoalsOrder.existskey(I);
		if (!Frame.Visible) continue;
		
		// Goal parameters
		declare Position = Net_TornadoHunt_GoalsOrder[I];
		declare GoalOrder = Net_TornadoHunt_GoalsOrder.count - I - 1;
		declare Points = (Net_TornadoHunt_NbMaxGoals - GoalOrder + 1) * {{{C_PointsPerCapturedGoal}}};
		
		// ---------------------------------- //
		// Ignore goal if captured by the spectated player
		declare Vec3[] GUIPlayerGoals;
		if (Net_TornadoHunt_CapturedGoals.existskey(Login)) GUIPlayerGoals = Net_TornadoHunt_CapturedGoals[Login];
		if (GUIPlayerGoals.exists(Position)) { Frame.Hide(); continue; }
		
		// ---------------------------------- //
		// Get marker height depending on the Goal type
		declare MarkerHeight = 5.;
		declare MapLandmarkTag = "Checkpoint";
		foreach (MapLandmark in MapLandmarks) if (MapLandmark.Position == Position) MapLandmarkTag = MapLandmark.Tag;
		if (MapLandmarkTag == "Goal") MarkerHeight = 25.;
		
		// ---------------------------------- //
		// Create marker
		declare Pos = Position.X^" "^Position.Y + MarkerHeight^" "^Position.Z;
		ClientUI.MarkersXML ^= "<marker manialinkframeid='Frame_GoalMarker#"^I^"' pos='"^Pos^"' visibility='WhenInFrustum' minimapvisibility='Never'/>";
		
		// ---------------------------------- //
		// Load frame elements
		declare Label_MarkerGoalName <=> (Frame.GetFirstChild("Label_MarkerGoalName") as CMlLabel);
		declare Label_MarkerNbPoints <=> (Frame.GetFirstChild("Label_MarkerNbPoints") as CMlLabel);
		declare Quad_MarkerIcon <=> (Frame.GetFirstChild("Quad_MarkerIcon") as CMlQuad);
		
		// ---------------------------------- //
		// Configure marker text
		Label_MarkerGoalName.Value = MarkerText("$n$t%1 #%2", _("Target"), TL::ToText(GoalOrder + 1));
		Label_MarkerNbPoints.Value = MarkerText("$n$t%1 - %2", _("Points"), TL::ToText(Points));
		
		// ---------------------------------- //
		// Set the marker color
		declare Color = <.75, .75, .75>;
		switch (GoalOrder) {
			case 0 : Color = {{{C_TeamsColors[0]}}};
			case 1 : Color = {{{C_TeamsColors[1]}}};
		}
		Label_MarkerGoalName.TextColor = Brightness(Color, 2.);
		Quad_MarkerIcon.Colorize = Color;
		
		// Configure distance label
		Label_MarkersDistances[I].DataAttributeSet("Position", Position.X^" "^Position.Y^" "^Position.Z);
	}
}

// ---------------------------------- //
// Show the distance to a Goal
foreach (Label in Label_MarkersDistances) {
	Label.Visible = GUIPlayer != Null && GUIPlayer.Position != <0., 0., 0.>;
	if (!Label.Visible) continue;
	
	// ---------------------------------- //
	// Get the Goal position
	declare Vec3 MapLandmarkPosition;
	declare PositionText = TL::Split(" ", Label.DataAttributeGet("Position"));
	foreach (I => SubText in PositionText) MapLandmarkPosition[I] = TL::ToReal(SubText);
	
	// Set the distance text
	declare Distance = ML::Distance(GUIPlayer.Position, MapLandmarkPosition);
	Label.Value = "$n"^ML::FloorInteger(Distance)^" M";
}
***

// ---------------------------------- //
/** Change color brightness
 *
 *	@param	_Color			Input color
 *	@param	_Brightness		Target brightness
 *
 *	@return		New color
 */
Vec3 Brightness(Vec3 _Color, Real _Brightness) {
	if (_Brightness == 1) return _Color;
	if (_Brightness <= 0) return Vec3;
	
	declare Vec3 OutputColor;
	if (_Brightness < 1) for (I, 0, 2) OutputColor[I] = _Color[I] * _Brightness;
	else if (_Brightness > 1) for (I, 0, 2) OutputColor[I] = 1 - (1 / _Brightness) + _Color[I] * (1 / _Brightness);
	return OutputColor;
}

// ---------------------------------- //
/** Simplified marker text creation
 *
 *	@param	_Attrib0	Marker text base
 *	@param	_Attrib1	First attribute
 *	@param	_Attrib2	Second attribute
 *
 *	@return		Marker text
 */
Text MarkerText(Text _Attrib0, Text _Attrib1, Text _Attrib2) {
	return TL::GetTranslatedText(TL::Compose(_Attrib0, _Attrib1, _Attrib2));
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>""";
}