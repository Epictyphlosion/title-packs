// -------------------------------------- //
//  OVERRUNNING by domino54               //
//  script version: 2017-09-07            //
// -------------------------------------- //

#Extends "Modes/ShootMania/ModeGalaxyTitles.Script.txt"

#Const CompatibleMapTypes	"OverrunningArena"
#Const Version		"2017-09-07"
#Const ScriptName	"Modes/ShootMania/Overrunning.Script.txt"

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit			600 	as _("Time limit (seconds)")
#Setting S_PointsLimit			25		as _("Points limit")
#Setting S_MatchmakingFormat	6		as _("Number of players in matchmaking mode")
#Setting S_PlayerArmorPoints	5		///< Increase default armor points

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_PlayerAmmoGain			[1 => .75, 2 => 2., 3 => .75]
#Const C_OverrunningVehiclesURL	"file://Media/Characters/Overrunning.xml"

/// Available weapons for the players
#Const C_PlayerAvailableWeapons [
	CSmMode::EWeapon::Laser,
	// CSmMode::EWeapon::Nucleus,
	CSmMode::EWeapon::Rocket
]

/// Maximum ammunition for all weapons
#Const C_PlayerWeaponsAmmoMax [
	CSmMode::EWeapon::Laser		=> 1,
	CSmMode::EWeapon::Nucleus	=> 1,
	CSmMode::EWeapon::Rocket	=> 4
]

#Const Description _("TYPE: Free for all\nOBJECTIVE: Hit your opponents to score points. The first player to reach the points limit or the player with the highest score at the end of the time limit wins the map.")

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Ident[] G_SpawnsList;	///< List of Spawns available to toss
declare Ident G_LatestSpawnId;	///< Previously tossed Spawn

// ---------------------------------- //
// Extend
// ---------------------------------- //
***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
***

// ---------------------------------- //
// Set up matchmaking
// ---------------------------------- //
***MM_SetupMatchmaking***
***
declare Integer[] MatchmakingFormats;
for (I, 1, S_MatchmakingFormat) MatchmakingFormats.add(1);
MM_SetFormat(MatchmakingFormats);
***

// ---------------------------------- //
// Galaxy settings
// ---------------------------------- //
***GalaxyTitles_Settings***
***
GT_UseAutospawnObjects = False;
GT_UseComboWeapons = False;
GT_UseRepliePickups = False;
GT_UseRandomToads = False;
GT_AutoManageOnArmorEmpty = False;
GT_AutoManageOnHit = False;
GT_AutoManageOnRespawn = False;
GT_CharactersDataFileURL = C_OverrunningVehiclesURL;
***

// ---------------------------------- //
// Set up the pause menu
// ---------------------------------- //
***GalaxyTitles_PauseMenu***
***
PauseMenu::SetButtonLabel("GT_CharSelection", "Change vehicle");
PauseMenu::SetButtonIcon("GT_CharSelection", C_ImgBase^"Icons/CanyonCar.png");
***

// ---------------------------------- //
// Adjust the scores table
// ---------------------------------- //
***ScoresTable***
***
ST2::DestroyCol("LibST_SMRoundPoints");
ST2::SetColWidth("LibST_SMPoints", 5.);
TopScores::RemoveCategory("Support");
TopScores::SetFormat(1, 1);
***

// ---------------------------------- //
// Update the mode rules
// ---------------------------------- //
***Match_Rules***
***
ModeInfo::SetName("Overrunning");
ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
ModeInfo::SetRules("1. Hit your opponents to score points.\n2. The first player to reach the points limit or the player with the highest score at the end of the time limit wins the map.");
ModeInfo::SetStatusMessage(Description);
***

// ---------------------------------- //
// Initialize server
// ---------------------------------- //
***Match_InitServer***
***
Characters::SetWindowTitle("Choose your vehicle");
Characters::SetCharSwitchNote("Press 'M' to change vehicle");
//Interfancy::SetArmorVisibility(False);
//Interfancy::SetStaminaVisibility(False);

// Set labels visibility
UIManager.UIAll.TeamLabelsVisibility = CUIConfig::ELabelsVisibility::WhenVisible;
UIManager.UIAll.OpposingTeamLabelsVisibility = CUIConfig::ELabelsVisibility::WhenVisible;

// Variables
declare LeadId = NullId;
***

// ---------------------------------- //
// Initialize map
// ---------------------------------- //
***Match_InitMap***
***
declare CurrentTimeLimit = S_TimeLimit;
declare PrevPointsLimit = -1;

// ---------------------------------- //
// Check if the map is valid
declare MapValidated = True;
if (MapLandmarks_PlayerSpawn.count <= 0) MapValidated = False;

// ---------------------------------- //
// Skip map if not valid
if (!MapValidated) GT_SkipInvalidMap();
***

// ---------------------------------- //
// Start map
// ---------------------------------- //
***Match_StartMap***
***
G_SpawnsList.clear();
G_LatestSpawnId = NullId;

// Bet the blue side team
declare BlueTeamSideOrder = MB_GetRoundCount() % 2 + 1;

// ---------------------------------- //
// Colorize bases
foreach (MapLandmark in MapLandmarks_Gauge) {
	if (MapLandmark.Tag != "Base" || MapLandmark.Base == Null) continue;
	if (MapLandmark.Order == BlueTeamSideOrder) MapLandmark.Base.Clan = 1;
	else MapLandmark.Base.Clan = 2;
}

// Wait for enough players to start game
while (!ServerShutdownRequested && !MatchEndRequested && Players.count <= 0) MB_Yield();

// Matchmaking: allow substitutes
if (MM_IsMatchServer()) MM_AllowSubstitutes(True);

// Character selection screen
GT_ShowCharSelection();

// ---------------------------------- //
// Init scores
MB_Sleep(1); ///< Allow the scores array to be sorted
foreach (Score in Scores) {
	declare Integer LastPoint for Score;
	LastPoint = 0;
}
LeadId = NullId;
if (Scores.existskey(0)) LeadId = Scores[0].User.Id;

// ---------------------------------- //
// Leader color
foreach (MapLandmark in MapLandmarks_Gauge) {
	if (MapLandmark.Base == Null) continue;
	MapLandmark.Base.Clan = 1;
	MapLandmark.Gauge.Clan = 1;
}
if (Scores.existskey(0)) Teams[0].ColorPrimary = Scores[0].User.Color;

// ---------------------------------- //
// Start match
StartTime = Now + S_RespawnTime;
if (S_TimeLimit > 0) GT_SetTimeLimit(StartTime + S_TimeLimit * 1000);
else GT_DisableTimeLimit();

UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.UIAll.SendNotice("", CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::StartRound, 0);
Interfancy::SetModuleVisibility("Countdown", True);
***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***Match_PlayLoop***
***
// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// On armor empty
	if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
		PassOn(Event);
		Killfeed::OnArmorEmpty(Event, Null);

		if (Event.Shooter == Null) continue;
		declare Points = 1;
		if (Event.Shooter == Event.Victim) Points *= -1;
		
		Scores::AddPlayerRoundPoints(Event.Shooter.Score, Points);
		TopScores::AddPoints(Event.Shooter.Score, "Hit", Points);
		Streaks::OnArmorEmpty(Event);

		// ---------------------------------- //
		// Notify shooter eliminating someone
		declare CrosshairNote = [_("You eliminated yourself!")];
		if (Event.Shooter != Event.Victim) CrosshairNote = [_("You have eliminated %1!"), Event.Victim.User.Name^"$z"];
		Interfancy::SendCrosshairNote(Event.Shooter, CrosshairNote, 2000);
	}
	// ---------------------------------- //
	// On player request respawn
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
		Event.Player.Score.Points -= 1;
		if (Event.Player.Score.Points < 0) Event.Player.Score.Points = 0;
		PassOn(Event);
	}
}

// ---------------------------------- //
// Manage player functions
foreach (Player in Players) {
	declare Integer PrevPlayerWeapon for Player;

	// ---------------------------------- //
	// Update the ammo reload speed
	if (PrevPlayerWeapon != Player.CurWeapon) {
		PrevPlayerWeapon = Player.CurWeapon;

		if (!C_PlayerAmmoGain.existskey(Player.CurWeapon)) Player.AmmoGain = 1.;
		else Player.AmmoGain = C_PlayerAmmoGain[Player.CurWeapon];
	}

	// ---------------------------------- //
	// Unspawn players in water (temporary workaround)
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && Player.Position.Y < -1 && Player.ForceModelId != NullId) Player.Armor = 0;

	// ---------------------------------- //
	// Spawn the player
	if (Player.RequestsSpectate || Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned || !GT_IsValidPlayer(Player)) continue;
	GT_InitPlayer(Player);

	// Spawn the player
	OVR_SpawnPlayer(Player);

	// Need to set weapon if player is spawned inside of a vehicle
	Inventory::SetFirstWeapon(Player);
	PrevPlayerWeapon = -1;
}

// ---------------------------------- //
// Turn all round points into normal points
foreach (Score in Scores) {
	if (Score.RoundPoints == 0) continue;
	Score.Points += Score.RoundPoints;
	Score.RoundPoints = 0;
}

// ---------------------------------- //
// Play sound and notice if someone is taking the lead
if (Scores.existskey(0) && Scores[0].User.Id != LeadId) {
	LeadId = Scores[0].User.Id;
	Message::SendBigMessage(TL::Compose(_("$<%1$> takes the lead!"), Scores[0].User.Name), 3000, 1, CUIConfig::EUISound::PhaseChange, 1);
	Teams[0].ColorPrimary = Scores[0].User.Color;
	MiniMap::Flash();
}

// ---------------------------------- //
// Server info change
if (PrevPointsLimit != S_PointsLimit) {
	PrevPointsLimit = S_PointsLimit;
	ST2::SetFooterText(TL::Compose("%1 "^S_PointsLimit, _("Points limit : ")));
}

// ---------------------------------- //
// Update time limit
if (CurrentTimeLimit != S_TimeLimit) {
	CurrentTimeLimit = S_TimeLimit;
	if (S_TimeLimit > 0) GT_SetTimeLimit(StartTime + S_TimeLimit * 1000);
	else GT_DisableTimeLimit();
}

// ---------------------------------- //
// Victory conditions
if (Scores.existskey(0) && Scores[0].Points >= S_PointsLimit) {
	Message::SendBigMessage(
		TL::Compose(_("$<%1$> gets the final hit!"), Scores[0].User.Name),
		3000, 3, CUIConfig::EUISound::VictoryPoint, 0
	);
	MB_StopMatch();
}
if (GT_TimeReachedLimit()) MB_StopMatch();
***

// ---------------------------------- //
// Map end
// ---------------------------------- //
***Match_EndMap***
***
// Unspawn everyone except the winner
foreach (Player in Players) if (Player.Score.Id != GT_GetWinnerScoreId()) UnspawnPlayer(Player);

// Disallow the winner to move after match end
UIManager.UIAll.UISequence = CUIConfig::EUISequence::UIInteraction;
MB_Sleep(1500);

// Cinematic round end
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
Interfancy::SetModuleVisibility("Countdown", False);
MB_Sleep(1500);

Message::CleanBigMessages();
***

// ---------------------------------- //
// Configure player character
// ---------------------------------- //
***GalaxyTitles_ConfigCharacter***
***
switch (PlayerCharacterId) {
	case 0 : Models::SetCanyonCar(Player);
	case 1 : Models::SetStadiumCar(Player);
	case 2 : Models::SetValleyCar(Player);
	case 3 : Models::SetLagoonCar(Player);
}

// Minimap icon
MiniMap::SetVehicleType(Player, PlayerCharacterId);

// Init player weapons
Inventory::SetAvailableWeapons(Player, C_PlayerAvailableWeapons);
foreach (Weapon => Amount in C_PlayerWeaponsAmmoMax) Inventory::SetWeaponSlots(Player, Weapon, Amount);
SetPlayerReloadAllWeapons(Player, False);
***

// ---------------------------------- //
/** Get all Player Spawn landmarks with specified attributes
 *
 *	@param	_Tag		Landmark tag
 *	@param	_Order		Landmark order
 *
 *	@return		Player Spawn landmarks with specific attributes
 */
Ident[] GetLandmarksPlayerSpawn(Text _Tag, Integer _Order) {
	declare Ident[] PlayerSpawnLandmarks;
	foreach (MapLandmark in MapLandmarks_PlayerSpawn) {
		if (MapLandmark.Tag == _Tag && MapLandmark.Order == _Order) PlayerSpawnLandmarks.add(MapLandmark.Id);
	}
	return PlayerSpawnLandmarks;
}

// ---------------------------------- //
/** Spawn a player
 *
 *	@param	_Player		The player to spawn
 */
Void OVR_SpawnPlayer(CSmPlayer _Player) {
	if (_Player == Null) return;
	
	// Fill the spawns lists
	if (G_SpawnsList.count == 0) foreach (MapLandmark in MapLandmarks_PlayerSpawn) G_SpawnsList.add(MapLandmark.Id);
	
	// ---------------------------------- //
	// Get new spawn
	declare SpawnId = NullId;
	while (True) {
		SpawnId = G_SpawnsList[ML::Rand(0, G_SpawnsList.count - 1)];
		if (SpawnId != G_LatestSpawnId || G_SpawnsList.count == 1) break;
	}
	G_LatestSpawnId = SpawnId;
	
	// ---------------------------------- //
	// Spawn player
	SM::Spawn(_Player, 0, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, Now + S_RespawnTime);
	declare Removed = G_SpawnsList.remove(SpawnId);
}