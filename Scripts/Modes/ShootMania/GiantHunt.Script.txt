// -------------------------------------- //
//  GIANT HUNT by domino54                //
//  script version: 2017-06-28            //
// -------------------------------------- //

#Extends "Modes/ShootMania/ModeGalaxyTitles.Script.txt"

#Const CompatibleMapTypes	"GiantHuntArena"
#Const Version		"2017-06-28"
#Const ScriptName	"Modes/ShootMania/GiantHunt.Script.txt"

#Include "Libs/Nadeo/Sound.Script.txt" as Sound
#Include "Libs/Nadeo/ShootMania/Map.Script.txt" as Map
#Include "Libs/domino54/ShootMania/InvasionUI.Script.txt" as InvasionUI

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit			600 	as _("Time limit (seconds)")
#Setting S_GiantArmorPoints		500		as _("Giant Armor points (min. 100)")
#Setting S_G_NbCheckpointsToCap	15		as _("Amount of Checkpoints to capture")
#Setting S_GoalCaptureTime		2		as _("Time required to capture a Checkpoint (0 = instant)")
#Setting S_PlayerArmorPoints	5
#Setting S_UsePlayerClublinks	False

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_SafePhaseDuration		10000	///< Duration of the preparation phase before tossing the Giant
#Const C_GiantArmorPointsMin	100		///< Minimum Armor points of the Giant

// Gold crystal properties
#Const C_GoldSpawningInterval	40000	///< Time between each Gold spawn
#Const C_GoldLifeDuration		15000	///< Life duration of the Gold item
#Const C_GoldBuffBaseDuration	10000	///< Duration of the weapon buff

/// Actions used as weapons
#Const C_CustomWeaponActions ["EnergyCharge", "FrozenArrow", "PlasmaGrenade", "Torpede"/*, "WideRail"*/]

/// Names of the custom weapons
#Const C_CustomWeaponsNames [
	"EnergyCharge" => "Handheld Charge",
	"FrozenArrow" => "Frozen Arrow",
	"PlasmaGrenade" => "Plasma Grenade",
	"Torpede" => "Torpede",
	"WideRail" => "Wide Rail"
]

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Ident G_GiantPlayerId;			///< Id of the player who is currently the Giant
declare Ident[] G_SpawnsList;			///< List of Spawns available to toss
declare Ident G_LatestSpawnId;			///< Previously tossed Spawn

declare Ident[] G_CheckpointsList;		///< List of Checkpoints to capture
declare Ident G_CurrentCheckpointId;	///< Id of the current Checkpoint to capture
declare Integer G_TotalNbCpsCaptured;	///< Total amount of captured Checkpoints
declare Integer G_NbCheckpointsToCap;	///< Amount of Checkpoints to capture

declare CSmObject G_GoldCrystalObject;	///< The Gold item
declare Integer G_CurGoldItemSpawnId;	///< Id of current Gold item life

declare Ident[Text] G_ObjectId; ///< List of all available objects
declare Ident[Text] G_ActionId; ///< List of all available actions

// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
Log::RegisterScript(ScriptName, Version);
Log::RegisterScript(Sound::GetScriptName(), Sound::GetScriptVersion());
Log::RegisterScript(Map::GetScriptName(), Map::GetScriptVersion());
Log::RegisterScript(InvasionUI::GetScriptName(), InvasionUI::GetScriptVersion());
***

// ---------------------------------- //
// Adjust the scores table
// ---------------------------------- //
***ScoresTable***
***
ST2::DestroyCol("LibST_SMRoundPoints");
ST2::DestroyCol("LibST_SMPoints");
ST2::CreateCol("GiantHunt", "Damage", "", 8., 100.);
ST2::SetColTextAlign("GiantHunt", CMlControl::AlignHorizontal::Right);
TopScores::RemoveCategory("Hit");
***

// ---------------------------------- //
// Update the mode rules
// ---------------------------------- //
***Match_Rules***
***
ModeInfo::SetName("Golden Dunk v2");
ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
ModeInfo::SetRules("");
//ModeInfo::SetStatusMessage(Description);
***

// ---------------------------------- //
// Galaxy settings
// ---------------------------------- //
***GalaxyTitles_Settings***
***
GT_AutoManageOnNearMiss = False;
GT_AllowMatchmakingMode = False;
***

// ---------------------------------- //
// Server start
// ---------------------------------- //
***Match_StartServer***
***
UseClans = True;
UseForcedClans = True;

// Don't use statistics in this mode
Statistics::Unload();

// Setup custom interfaces
// MB_NeutralEmblemUrl = C_ImgBase^"EmblemInvasion.dds";
InvasionUI::LoadModules(["GoldMarker", "CustomWeaponBar", "BossHealth"]);
InvasionUI::SetDisplayInterface(False);
Sound::Load();

// Load objects
G_ObjectId["Giant"]	= ItemList_Add("Characters\\StormManBig.Item.Gbx");
G_ObjectId["Gold"]	= ItemList_Add("SMCommon\\Collectibles\\Gold.Item.gbx");

// Load actions
G_ActionId["EnergyCharge"]	= ActionList_Add("Invasion\\EnergyCharge.Action.Gbx");
G_ActionId["FrozenArrow"]	= ActionList_Add("Invasion\\FrozenArrow.Action.Gbx");
G_ActionId["PlasmaGrenade"]	= ActionList_Add("Invasion\\PlasmaGrenade.Action.Gbx");
G_ActionId["Torpede"]		= ActionList_Add("Invasion\\Torpede.Action.Gbx");
G_ActionId["WideRail"]		= ActionList_Add("Invasion\\WideRail.Action.Gbx");
***

// ---------------------------------- //
// Map begin
// ---------------------------------- //
***Match_InitMap***
***
InvasionUI::InitializeMatch();

declare CurrentTimeLimit = S_TimeLimit;
declare LatestGiantHealth = ML::Max(S_GiantArmorPoints, C_GiantArmorPointsMin) * 100;
declare MapCanSpawnGoldCrystal = False;
declare GoldNextSpawnTime = 0;		///< Spawn time of the Gold item
declare GoldCrystalUnspawnTime = 0;	///< Lifetime of the Gold object
declare PrevGoalCaptureTime = S_GoalCaptureTime;
declare PrevGiantArmorPoints = S_GiantArmorPoints;
declare PrevGiantHasLeft = False;
declare PrevGiantId = NullId;

// ---------------------------------- //
// Check if the map is valid
declare MapValidated = True;
if (Map::GetLandmarkPlayerSpawn("SpawnHunters", 0) == Null) MapValidated = False;
if (Map::GetLandmarkPlayerSpawn("SpawnGiant", 0) == Null) MapValidated = False;
if (Map::GetLandmarkGauge("Checkpoint", 0) == Null) MapValidated = False;

// ---------------------------------- //
// Skip map if not valid
if (!MapValidated) GT_SkipInvalidMap();
***

// ---------------------------------- //
// Start map
// ---------------------------------- //
***Match_StartMap***
***
G_GiantPlayerId = NullId;
G_SpawnsList.clear();
G_LatestSpawnId = NullId;
G_CheckpointsList.clear();
G_TotalNbCpsCaptured = 0;
G_CurrentCheckpointId = NullId;
G_GoldCrystalObject = Null;
G_CurGoldItemSpawnId = 0;

// ---------------------------------- //
// Reset scores
foreach (Score in Scores) {
	declare Integer GiantDamageDealt for Score;
	GiantDamageDealt = 0;
}
UpdateScores();

// ---------------------------------- //
// Wait for enough players to start game
// while (!ServerShutdownRequested && !MatchEndRequested && Players.count < 2) GT_DoWarmUp();

// ---------------------------------- //
// Choose at random Checkpoints to capture by the Giant
declare Ident[] AvailableCheckpoints;
foreach (MapLandmark in MapLandmarks_Gauge)
	if (MapLandmark.Gate == Null && MapLandmark.Tag == "Checkpoint")
		AvailableCheckpoints.add(MapLandmark.Id);

G_NbCheckpointsToCap = ML::Clamp(S_G_NbCheckpointsToCap, 1, AvailableCheckpoints.count);
while (G_CheckpointsList.count < G_NbCheckpointsToCap) {
	declare NewCheckpointId = AvailableCheckpoints[ML::Rand(0, AvailableCheckpoints.count - 1)];
	G_CheckpointsList.add(NewCheckpointId);
	declare Removed = AvailableCheckpoints.remove(NewCheckpointId);
}

foreach (MapLandmarkId in G_CheckpointsList) {
	declare MapLandmark <=> MapLandmarks[MapLandmarkId];
	MapLandmark.Gauge.Max = ML::Max(S_GoalCaptureTime * 1000, 1);
}

// ---------------------------------- //
// Check if there are Gold crystals on the map
foreach (MapLandmark in MapLandmarks_ObjectAnchor) if (MapLandmark.Tag == "Gold") {
	MapCanSpawnGoldCrystal = True;
	break;
}

// ---------------------------------- //
// Reset players stats
foreach (Player in Players) {
	declare Boolean PlayerHasCustomWeapon for Player;
	declare Integer PlayerLastGoldSpawnId for Player;
	PlayerHasCustomWeapon = False;
	PlayerLastGoldSpawnId = 0;
	ActionBind(Player, ::EActionSlot::Slot_A, ::EActionInput::None);
}

// ---------------------------------- //
// Start match
StartTime = Now + S_RespawnTime;
UIManager.UIAll.CountdownEndTime = StartTime + C_SafePhaseDuration;
GoldNextSpawnTime = UIManager.UIAll.CountdownEndTime + C_GoldSpawningInterval / 2;

UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.UIAll.SendNotice("", CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::StartRound, 0);

Interfancy::SetModuleVisibility("Countdown", True);
InvasionUI::SetDisplayInterface(True);
***

// ---------------------------------- //
// On armor empty - Giant eliminated
// ---------------------------------- //
***OnArmorEmpty***
***
if (Event.Victim.Id == G_GiantPlayerId) {
	Message::SendBigMessage(
		TL::Compose(_("%1 has been eliminated."), "$<"^Event.Victim.Name^"$>"),
		3000, 3, CUIConfig::EUISound::VictoryPoint, 0
	);
	MB_StopMatch();
}
***

// ---------------------------------- //
// On hit
// ---------------------------------- //
***OnHit***
***
if (Event.Victim.Id == G_GiantPlayerId) {
	declare Integer GiantDamageDealt for Event.Shooter.Score;
	GiantDamageDealt += Event.Damage;
	UpdateScores();
}
***

// ---------------------------------- //
// Player picked up object
// ---------------------------------- //
***OnPlayerTouchesObject***
***
Discard(Event);
if (Event.Player.Id == G_GiantPlayerId) continue; ///< Giant is not supposed to pick up the Gold

declare Boolean PlayerHasCustomWeapon for Event.Player;
declare Integer PlayerLastGoldSpawnId for Event.Player;

if (PlayerHasCustomWeapon || PlayerLastGoldSpawnId == G_CurGoldItemSpawnId) continue;
PickUpObject(Event.Player, Event.Object);
***

// ---------------------------------- //
// Respawn Giant similar as in Hunger Games
// ---------------------------------- //
***OnPlayerRequestRespawn***
***
if (Event.Player.Id == G_GiantPlayerId) { Discard(Event); continue; } ///< TODO
***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***Match_PlayLoop***
***
// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// Action buttons press
	if (Event.Type == CSmModeEvent::EType::OnActionEvent) {
		// ---------------------------------- //
		// Drop Gold item weapon
		declare Boolean PlayerHasCustomWeapon for Event.Player;
		if (Event.ActionInput == CSmModeEvent::EActionInput::Consumable2 && PlayerHasCustomWeapon) {
			declare Integer PlayerWeaponExpiration for Event.Player;
			PlayerWeaponExpiration = Now;
			InvasionUI::SetPlayerWeaponData(Event.Player, 0, 0, 0);
		}
	}
	// ---------------------------------- //
	// Custom weapon hit
	else if (Event.Type == CSmModeEvent::EType::OnActionCustomEvent && Event.Param1 == "damage") {
		if (Event.Shooter == Null || Event.Victim == Null || Event.Shooter.CurrentClan == Event.Victim.CurrentClan) { Discard(Event); continue; }
		
		// Get the hit damage
		declare EventDamage = 100;
		declare Points = EventDamage / 100;

		RemovePlayerArmor(Event.Victim, EventDamage, Event.Shooter, Points);
		PassOn(Event);
	}
}

// ---------------------------------- //
// Force the mode to toss a new Giant if current one has left the game
if (G_GiantPlayerId != NullId && !Players.existskey(G_GiantPlayerId)) {
	G_GiantPlayerId = NullId;
	PrevGiantHasLeft = True;
}

// ---------------------------------- //
// Choose random player as new Giant
if (G_GiantPlayerId == NullId && Now >= UIManager.UIAll.CountdownEndTime) {
	UIManager.UIAll.CountdownEndTime = -1;
	if (S_TimeLimit > 0) GT_SetTimeLimit(StartTime + S_TimeLimit * 1000);
	else GT_DisableTimeLimit();

	declare Giant = Players[ML::Rand(0, Players.count - 1)];
	G_GiantPlayerId = Giant.Id;

	// Unspawn the player if necessary
	if (Giant.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) UnspawnPlayer(Giant);

	// Configure the Giant abilities
	Giant.ForceModelId = G_ObjectId["Giant"];
	Giant.ArmorMax = ML::Max(S_GiantArmorPoints, C_GiantArmorPointsMin) * 100;
	Giant.AmmoGain = 5.;
	Giant.StaminaMax = 3.;

	// Set the bases color
	Giant.ForceColor = Giant.User.Color;
	Teams[1].ColorPrimary = Giant.ForceColor;
	
	// ---------------------------------- //
	// Notify everyone about the new Giant
	if (PrevGiantHasLeft) Translations::SendStatusMessage("Previous Giant has left the game", 3000, 1);
	Translations::SendBigMessage(["$<%1$> becomes the Giant!", Giant.User.Name], 3000, 1);
	Sound::PlaySound(TL::Replace(C_ImgBase^"Sounds/GiantSpawned%1.ogg", "%1", TL::ToText(ML::Rand(1, 4))), -5.);

	// ---------------------------------- //
	// Spawn the Giant
	declare Ident[] GiantSpawnLandmarks;
	foreach (MapLandmark in MapLandmarks_PlayerSpawn) if (MapLandmark.Tag == "SpawnGiant") GiantSpawnLandmarks.add(MapLandmark.Id);
	declare GiantSpawnId = GiantSpawnLandmarks[ML::Rand(0, GiantSpawnLandmarks.count - 1)];

	SetPlayerClan(Giant, 2);
	SM::Spawn(Giant, 0, MapLandmarks_PlayerSpawn[GiantSpawnId].PlayerSpawn, Now + S_RespawnTime);

	// Restore previous Giant health, if changed
	Giant.Armor = LatestGiantHealth;

	// Choose a random Checkpoint
	if (G_CurrentCheckpointId == NullId) G_CurrentCheckpointId = GetNextCheckpointId();
}

// ---------------------------------- //
// Capture Checkpoint by the Giant
if (G_CurrentCheckpointId != NullId) {
	declare MapLandmark <=> MapLandmarks[G_CurrentCheckpointId];
	declare IsBeingCaptured = False;
	
	// TEMP
	declare Giant <=> Players[G_GiantPlayerId];
	log(ML::Distance(MapLandmark.Position, Giant.Position));

	// ---------------------------------- //
	// Set the capture speed
	foreach (PlayerId in MapLandmark.Sector.PlayersIds) {
		if (!Players.existskey(PlayerId)) continue;
 		declare Player <=> Players[PlayerId];

 		if (Player.Id == G_GiantPlayerId) IsBeingCaptured = True;
 		else {
 			IsBeingCaptured = False;
 			break;
 		}
	}

	// ---------------------------------- //
	// Capture the Checkpoint
	if (IsBeingCaptured) {
		if (MapLandmark.Gauge.Max <= 1) MapLandmark.Gauge.ValueReal = 1.;
		else MapLandmark.Gauge.Speed = 1;
	}
	else MapLandmark.Gauge.Speed = 0;

	// ---------------------------------- //
	// Check if the Checkpoint has been captured
	if (MapLandmark.Gauge.ValueReal >= 1) {
		G_TotalNbCpsCaptured += 1;
		G_CurrentCheckpointId = GetNextCheckpointId();
		UpdateScores();

		// ---------------------------------- //
		// Checkpoints before the last one
		if (G_TotalNbCpsCaptured < G_NbCheckpointsToCap) {
			declare Gap = G_NbCheckpointsToCap - G_TotalNbCpsCaptured;
			if (Gap <= 3) {
				declare Variant = 3 - Gap;
				declare Msg = "";
				if (Gap > 1) Msg = TL::Compose(_("$<%1$> is %2 points from victory!"), Giant.User.Name, TL::ToText(Gap));
				else Msg = TL::Compose(_("$<%1$> is 1 point from victory!"), Giant.User.Name);
				Message::SendBigMessage(Msg, 3000, 2, CUIConfig::EUISound::TieBreakPoint, Variant);
			}
			else Message::SendBigMessage(
				TL::Compose(_("$<%1$> captured %2 checkpoint"), Giant.User.Name, "#"^G_TotalNbCpsCaptured),
				3000, 2, CUIConfig::EUISound::Capture, 0
			);
		}
		// ---------------------------------- //
		// Last checkpoint captured
		else {
			Message::SendBigMessage(
				TL::Compose(_("$<%1$> gets the final hit!"), Giant.User.Name),
				3000, 2, CUIConfig::EUISound::VictoryPoint, 0
			);
			MB_StopMatch();
		}
	}
}

// ---------------------------------- //
// Manage players funstiuons
foreach (Player in Players) {
	// ---------------------------------- //
	// Spawn players
	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !Player.RequestsSpectate && Player.Id != G_GiantPlayerId) {
		GT_InitPlayer(Player);
		SetPlayerClan(Player, 1);

		// Configure the player
		Player.ForceModelId = NullId;
		Player.AmmoGain = 5.;
		Player.ForceColor = Player.User.Color;

		// ---------------------------------- //
		// Configure ultra-aggressive bots
		if (Player.Driver != Null) {
			Player.Driver.ShootPeriodMin = 0;
			Player.Driver.ShootPeriodMax = 0;
			Player.Driver.AggroRadius = 64.;
			Player.Driver.ShootRadius = Player.Driver.AggroRadius;
		}

		// Spawn the player
		GH_SpawnPlayer(Player);
	}

	// ---------------------------------- //
	// Reset custom weapon buff
	declare Boolean PlayerHasCustomWeapon for Player;
	declare Integer PlayerWeaponExpiration for Player;
	
	if (PlayerHasCustomWeapon && Now >= PlayerWeaponExpiration) {
		PlayerHasCustomWeapon = False;
		ActionBind(Player, ::EActionSlot::Slot_A, ::EActionInput::None);
		
		Interfancy::SetPlayerCustomWeapon(Player, "");
		Sound::PlaySound(C_ImgBase^"Sounds/GoldWeaponExpired.ogg", Player);
	}
}

// ---------------------------------- //
// On Giant player change
if (PrevGiantId != G_GiantPlayerId) {
	PrevGiantId = G_GiantPlayerId;
	UpdateScores();

	// There is no Giant
	if (G_GiantPlayerId == NullId) InvasionUI::SetBossesHealth(Integer[][]);

	// ---------------------------------- //
	// Colorize the map according to the Giant's color
	else foreach (MapLandmark in MapLandmarks) {
		if (MapLandmark.Gate != Null || MapLandmark.Gauge == Null) continue;
		if (MapLandmark.Base != Null) MapLandmark.Base.Clan = 2;
		MapLandmark.Gauge.Clan = 2;
	}
}

// ---------------------------------- //
// Display the Giant health on the interface
if (G_GiantPlayerId != NullId && Players.existskey(G_GiantPlayerId)) {
	declare Giant <=> Players[G_GiantPlayerId];
	LatestGiantHealth = Giant.Armor;

	declare Integer[][] BossesHealth;
	if (Giant.Armor > 0) BossesHealth = [[Giant.Armor, Giant.ArmorMax]];
	InvasionUI::SetBossesHealth(BossesHealth);
}

// ---------------------------------- //
// Update time limit
if (CurrentTimeLimit != S_TimeLimit && UIManager.UIAll.CountdownEndTime <= 0) {
	CurrentTimeLimit = S_TimeLimit;
	if (S_TimeLimit > 0) GT_SetTimeLimit(StartTime + S_TimeLimit * 1000);
	else GT_DisableTimeLimit();
}

// ---------------------------------- //
// Update the Giant Armor
if (PrevGiantArmorPoints != S_GiantArmorPoints) {
	PrevGiantArmorPoints = S_GiantArmorPoints;

	if (Players.existskey(G_GiantPlayerId)) {
		declare Giant <=> Players[G_GiantPlayerId];
		declare NewArmorMax = ML::Max(S_GiantArmorPoints, C_GiantArmorPointsMin) * 100;
		declare ArmorDelta = NewArmorMax - Giant.ArmorMax;

		Giant.ArmorMax = NewArmorMax;
		if (ArmorDelta > 0) GalaxyTitles::GivePlayerArmor(Giant, ArmorDelta);
	}
}

// ---------------------------------- //
// Update Checkpoints capture time
if (PrevGoalCaptureTime != S_GoalCaptureTime) {
	PrevGoalCaptureTime = S_GoalCaptureTime;

	foreach (MapLandmarkId in G_CheckpointsList) {
		declare MapLandmark <=> MapLandmarks[MapLandmarkId];

		declare ValueRealCache = MapLandmark.Gauge.ValueReal;
		MapLandmark.Gauge.Max = ML::Max(S_GoalCaptureTime * 1000, 1);
		MapLandmark.Gauge.ValueReal = ValueRealCache;
	}
}

// ---------------------------------- //
// Spawn Gold item
if (MapCanSpawnGoldCrystal && Now >= GoldNextSpawnTime) {
	GoldNextSpawnTime = Now + C_GoldSpawningInterval;
	GoldCrystalUnspawnTime = Now + C_GoldLifeDuration;
	G_CurGoldItemSpawnId += 1;
	
	// ---------------------------------- //
	// Compute weighted center of the players group
	declare Vec3 PlayersPositionCenter;
	declare Vec3 PlayerPositionMin;
	declare Vec3 PlayerPositionMax;

	foreach (Player in Players) {
		if (Player.Position == <0., 0., 0.>) continue;
		for (I, 0, 2) {
			if (PlayerPositionMin[I] == 0 || Player.Position[I] < PlayerPositionMin[I]) PlayerPositionMin[I] = Player.Position[I];
			if (PlayerPositionMax[I] == 0 || Player.Position[I] > PlayerPositionMax[I]) PlayerPositionMax[I] = Player.Position[I];
		}
	}

	if (PlayerPositionMin == PlayerPositionMax) PlayersPositionCenter = PlayerPositionMin;
	else {
		PlayersPositionCenter = PlayerPositionMin + PlayerPositionMax;
		for (I, 0, 2) PlayersPositionCenter[I] /= 2;
	}
	
	// ---------------------------------- //
	// Select landmark near the center of players group
	declare Real[Ident] LandmarkDistances;

	foreach (MapLandmark in MapLandmarks_ObjectAnchor) {
		if (MapLandmark.Tag != "Gold") continue;
		LandmarkDistances[MapLandmark.Id] = ML::Distance(MapLandmark.Position, PlayersPositionCenter);
	}
	
	// ---------------------------------- //
	// Create item
	LandmarkDistances = LandmarkDistances.sort();

	foreach (MapLandmarkId => Distance in LandmarkDistances) {
		if (!MapLandmarks_ObjectAnchor.existskey(MapLandmarkId)) continue;
		declare MapLandmark <=> MapLandmarks_ObjectAnchor[MapLandmarkId];

		InvasionUI::UpdateGoldMarker(MapLandmark.Position, Now, C_GoldLifeDuration, G_CurGoldItemSpawnId);
		G_GoldCrystalObject = ObjectCreate(G_ObjectId["Gold"]);
		G_GoldCrystalObject.SetPosition(MapLandmark.Position);
		declare Tag for G_GoldCrystalObject = "Gold";

		// Break the loop
		break;
	}
}

// ---------------------------------- //
// Destroy Gold object
if (G_GoldCrystalObject != Null && Now >= GoldCrystalUnspawnTime) {
	G_GoldCrystalObject.SetUnspawned();
	ObjectDestroy(G_GoldCrystalObject);
	G_GoldCrystalObject = Null;
}

// Victory conditions
if (GT_TimeReachedLimit() || Players.count <= 0) MB_StopMatch();
***

// ---------------------------------- //
// Map end
// ---------------------------------- //
***Match_EndMap***
***
UpdateScores();

// Unspawn everyone except the winner
foreach (I => Player in Players) if (I > 0) UnspawnPlayer(Player);

// Disallow the winner to move after match end
UIManager.UIAll.UISequence = CUIConfig::EUISequence::UIInteraction;
MB_Sleep(1500);

// Cinematic round end
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
Interfancy::SetModuleVisibility("Countdown", False);
InvasionUI::SetBossesHealth(Integer[][]);
InvasionUI::SetDisplayInterface(False);
MB_Sleep(1500);

Message::CleanBigMessages();
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Spawn a player.
 *
 *	@param	_Player		The player to spawn.
 */
Void GH_SpawnPlayer(CSmPlayer _Player) {
	if (_Player == Null) return;
	
	// Fill the spawns lists
	if (G_SpawnsList.count == 0)
		foreach (MapLandmark in MapLandmarks_PlayerSpawn)
			if (MapLandmark.Tag == "SpawnHunters") G_SpawnsList.add(MapLandmark.Id);
	
	// ---------------------------------- //
	// Get new spawn
	declare SpawnId = NullId;
	while (True) {
		SpawnId = G_SpawnsList[ML::Rand(0, G_SpawnsList.count - 1)];
		if (SpawnId != G_LatestSpawnId || G_SpawnsList.count == 1) break;
	}
	G_LatestSpawnId = SpawnId;
	
	// Spawn player
	SM::Spawn(_Player, _Player.CurrentClan, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, Now + S_RespawnTime);
	declare Removed = G_SpawnsList.remove(SpawnId);
}


// ---------------------------------- //
/** Select random next Checkpoint.
 *
 *	@return		Id of the next Checkpoint.
 */
Ident GetNextCheckpointId() {
	if (G_CheckpointsList.count <= 0) return NullId;
	if (G_CheckpointsList.count == 1) return G_CheckpointsList[0];
	declare NextCheckpointId = NullId;

	// ---------------------------------- //
	// Get the furthest Checkpoint from the Giant
	if (Players.existskey(G_GiantPlayerId)) {
		declare Giant <=> Players[G_GiantPlayerId];
		if (Giant.Position != <0., 0., 0.>) {
			declare Real[Ident] CheckpointsDistances;
			foreach (MapLandmarkId in G_CheckpointsList) {
				declare MapLandmark <=> MapLandmarks[MapLandmarkId];
				CheckpointsDistances[MapLandmarkId] = -ML::Distance(Giant.Position, MapLandmark.Position);
			}
			CheckpointsDistances = CheckpointsDistances.sort();
			foreach (MapLandmarkId => Distance in CheckpointsDistances) {
				NextCheckpointId = MapLandmarkId;
				declare Removed = G_CheckpointsList.remove(NextCheckpointId);
				break;
			}
		}
	}

	if (NextCheckpointId != NullId) return NextCheckpointId;

	// ---------------------------------- //
	// Get a random Checkpoint if for some magical reasons Giant is not spawned
	NextCheckpointId = G_CheckpointsList[ML::Rand(0, G_CheckpointsList.count - 1)];
	declare Removed = G_CheckpointsList.remove(NextCheckpointId);
	return NextCheckpointId;
}

// ---------------------------------- //
/// Update the scores.
Void UpdateScores() {
	// ---------------------------------- //
	// Get the Giant score Id
	declare Ident GiantScoreId;
	if (AllPlayers.existskey(G_GiantPlayerId)) GiantScoreId = AllPlayers[G_GiantPlayerId].Score.Id;

	// ---------------------------------- //
	// Get the amount of damage dealt by all players
	declare Integer[Ident] ScoresGiantDamage;
	declare TotalGiantDamage = 0;

	foreach (Score in Scores) {
		declare Integer GiantDamageDealt for Score;
		if (GiantDamageDealt <= 0) continue; 
		ScoresGiantDamage[Score.Id] = GiantDamageDealt;
		TotalGiantDamage += GiantDamageDealt;
	}

	// Get damage ratios of the players
	declare Real[Ident] GiantDamageRatios;
	foreach (ScoreId => Damage in ScoresGiantDamage) GiantDamageRatios[ScoreId] = -ML::ToReal(Damage) / TotalGiantDamage;
	GiantDamageRatios = GiantDamageRatios.sort();

	// ---------------------------------- //
	// Sort all scores
	declare Ident[] AllScoresInOrder;
	if (GiantScoreId != NullId) AllScoresInOrder.add(GiantScoreId);
	foreach (ScoreId => Ratio in GiantDamageRatios) {
		if (ScoreId == GiantScoreId) continue;
		AllScoresInOrder.add(ScoreId);
	}
	foreach (Score in Scores) if (!AllScoresInOrder.exists(Score.Id)) AllScoresInOrder.add(Score.Id);

	// Force custom sorting by setting Points descanding
	foreach (I => ScoreId in AllScoresInOrder) Scores[ScoreId].Points = AllScoresInOrder.count - I;
	
	// ---------------------------------- //
	// Set values of the "Damage" columns
	foreach (Score in Scores) {
		declare GiantHuntColValue = "0.00%";
		if (Score.Id == GiantScoreId) GiantHuntColValue = G_TotalNbCpsCaptured^"/"^G_NbCheckpointsToCap;
		else if (GiantDamageRatios.existskey(Score.Id)) {
			declare DamageRatio = -GiantDamageRatios[Score.Id];
			GiantHuntColValue = TL::FormatReal(DamageRatio * 100, 2, False, False)^"%";
		}
		ST2::SetColValue("GiantHunt", Score, GiantHuntColValue);
	}
}

// ---------------------------------- //
/** Pick up object.
 *
 *	@param	_Player		The player who picked up the item.
 *	@param	_Object		The item picked up by the player.
 */
Void PickUpObject(CSmPlayer _Player, CSmObject _Object) {
	if (_Player == Null || _Object == Null || _Player.IsBot) return;
	
	declare Text Tag for _Object;
	if (Tag != "Gold") return;
	
	declare Text[] PlayerActionsList for _Player;
	declare Text PlayerLatestActionName for _Player;
	declare Text NewAction = "";
	
	// ---------------------------------- //
	// Select random action (Melee-like)
	if (PlayerActionsList.count <= 0) PlayerActionsList = C_CustomWeaponActions;
	while (NewAction == "") {
		NewAction = PlayerActionsList[ML::Rand(0, PlayerActionsList.count - 1)];
		if (NewAction != PlayerLatestActionName) break;
	}
	PlayerLatestActionName = NewAction;
	declare Removed = PlayerActionsList.remove(NewAction);
	
	// ---------------------------------- //
	// Apply custom weapon
	ActionLoad(_Player, ::EActionSlot::Slot_A, G_ActionId[NewAction]);
	ActionBind(_Player, ::EActionSlot::Slot_A, ::EActionInput::Weapon);
	
	// ---------------------------------- //
	// Set variables
	declare Boolean PlayerHasCustomWeapon for _Player;
	declare Integer PlayerWeaponExpiration for _Player;
	declare Integer PlayerLastGoldSpawnId for _Player;
	declare Integer PlayerEvolutionLevel for _Player;
	
	PlayerHasCustomWeapon = True;
	PlayerLastGoldSpawnId = G_CurGoldItemSpawnId;
	PlayerWeaponExpiration = Now + C_GoldBuffBaseDuration;
	
	// Send interface data
	InvasionUI::SetPlayerGoldSpawnId(_Player, G_CurGoldItemSpawnId);
	InvasionUI::SetPlayerWeaponData(_Player, Now, C_GoldBuffBaseDuration, 0);
	
	// Weapon name
	declare WeaponName = NewAction;
	if (C_CustomWeaponsNames.existskey(NewAction)) WeaponName = C_CustomWeaponsNames[NewAction];
	
	InvasionUI::SetPlayerWeaponName(_Player, WeaponName);
	Interfancy::SetPlayerCustomWeapon(_Player, WeaponName);
	Statistics::TrackEvent(_Player, "GoldWeaponsAcquired", 1);
	
	// Play sound
	Sound::PlaySound(C_ImgBase^"Sounds/GoldPickUp.ogg", _Player);
}
