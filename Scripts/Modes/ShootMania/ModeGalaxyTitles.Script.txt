// -------------------------------------- //
//  GALAXYTITLES MODE BASE by domino54    //
//  script version: 2017-02-15            //
// -------------------------------------- //

/**
 *	Base for the game modes in the GalaxyTitles title pack.
 */

#Extends "Modes/ShootMania/ModeMatchmaking.Script.txt"

#Const BaseVersion		"2017-02-15"
#Const BaseScriptName	"ModeGalaxyTitles.Script.txt"

#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/WarmUp2.Script.txt" as WarmUp2
// Custom libraries
#Include "Libs/domino54/Blacklist.Script.txt" as Blacklist
#Include "Libs/domino54/CupAdmin.Script.txt" as CupAdmin
#Include "Libs/domino54/FakeUsers.Script.txt" as FakeUsers
#Include "Libs/domino54/FancyMessages.Script.txt" as FancyMessages
#Include "Libs/domino54/Killfeed.Script.txt" as Killfeed
#Include "Libs/domino54/ManialinkTools.Script.txt" as ManialinkTools
#Include "Libs/domino54/Statistics.Script.txt" as Statistics
#Include "Libs/domino54/StoragePlayer.Script.txt" as StoragePlayer
#Include "Libs/domino54/TopScores.Script.txt" as TopScores
#Include "Libs/domino54/Translations.Script.txt" as Translations
#Include "Libs/domino54/WebLayers.Script.txt" as WebLayers
#Include "Libs/domino54/ShootMania/GalaxyTitles.Script.txt" as GalaxyTitles
#Include "Libs/domino54/ShootMania/Interfancy.Script.txt" as Interfancy
#Include "Libs/domino54/ShootMania/Inventory.Script.txt" as Inventory
#Include "Libs/domino54/ShootMania/MiniMap.Script.txt" as MiniMap
#Include "Libs/domino54/ShootMania/PauseMenu.Script.txt" as PauseMenu
#Include "Libs/domino54/ShootMania/Streaks.Script.txt" as Streaks

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_UseComboWeapons		True	as _("Use Weapons pick-ups (if available on map)")
#Setting S_PlayerArmorPoints	3		as _("Amount of players Armor points (1 min, 10 max)")
#Setting S_NbFakeUsers			0		as _("Number of fake players")	///< Amount of fake players (bots)
#Setting S_UseAutoBalance		False	as _("Balance teams on round start")
#Setting S_MaximumNbWeapons		2		as _("Max. slots amount of every Weapon")
#Setting S_MaximumNbReplies		3		as _("Max. amount of Replies held")
#Setting S_ObjectsRespawnTime	15		as _("Items respawn time (0 = don't spawn)")
#Setting S_ToadsRespawnTime		60		as _("Toads respawn time (0 = don't spawn)")
#Setting S_ToadsSpawnRatio		.5		as "<hidden>" //_("Percentage amount of Toads to spawn on landmarks")
#Setting S_WeaponsDropLifetime	0		as "<hidden>" ///< Duration before bropped weapons reappear on landmarks
#Setting S_WarmUpDuration		300		as "<hidden>" ///< Duration of the warm up round (0 = no warmup)
#Setting S_RespawnTime			3000	as "<hidden>" ///< Time before respawn
#Setting S_NbPlayersPerTeamMax	0		as "<hidden>" ///< Maximum number of players per team (0: no max)
#Setting S_NbPlayersPerTeamMin	1		as "<hidden>" ///< Minumum number of players per team
#Setting S_CustomLayersURLs		""		as "<hidden>" ///< Try to load custom layers from an URL
#Setting S_CustomBlacklistURL	""		as "<hidden>" ///< URL of the custom blacklist file
#Setting S_KillfeedOffsetY		0.		as "<hidden>" ///< For server hosters: killfeed Y offset
#Setting S_MusicPlaylistURL		""		as "<hidden>" ///< URL of the server custom music playlist file

/// Clublinks settings
#Setting S_UsePlayerClublinks	True	as _("Use players clublinks")
#Setting S_ForceClublinkTeam1	""		as "<hidden>"	///< Force the Clublink of team 1
#Setting S_ForceClublinkTeam2	""		as "<hidden>"	///< Force the Clublink of team 2

/// Competition settings
#Setting S_AdminEnableCupMode		False	as "<hidden>"
#Setting S_AdminCupModeNbMaps		3		as "<hidden>"
#Setting S_AdminPauseCompetition	False	as "<hidden>"
#Setting S_AdminCupName				""		as "<hidden>"

/// Enable AFK management by default
#Setting S_AutoManageAFK	True

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ImgBase "file://Media/Manialinks/ShootMania/GalaxyTitles/"
#Const C_DefaultMusicPlaylist	"file://Media/Musics/Invasion/playlist.xml"
#Const C_OfflineTranslationsURL	"file://Media/Translations/Default.xml"
#Const C_OnlineTranslationsURL	""
#Const C_ScriptTicksPerSecond	100		///< The amount of script ticks per second
#Const C_DefaultKillfeedPosn	<159., 89., -5.>	///< Default position of the Killfeed layer
#Const C_NoCollisionsDuration	6000	///< No collision duration at the beginning of the round
#Const C_EnviroKillTimeOut		7500	///< Time after which environmental elimination won't be performed

#Const C_EventMaxDamage		100		///< Maximum damage amount inflicted by weapons
#Const C_PlayerStaminaMax	1.25	///< Amount of player stamina

// ---------------------------------- //
// Global variables
// ---------------------------------- //
declare Text[] GT_KillfeedTranslations;		///< Translations to be loaded with the Killfeed library
declare Text GT_SpawnScreenModeName;		///< Name of the mode displayed in the spawn screen
declare Text GT_SpawnScreenModeType;		///< Spawn screen mode type (free for all, teams, cooperation)
declare Text GT_SpawnScreenObjectives;		///< Rules of the game mode displayed in the spawn screen

// ---------------------------------- //
// Developer settings
// ---------------------------------- //
declare Boolean GT_UseNoCollisionsStart;	///< Use the no-collisions round start
declare Boolean GT_UseAutoEndSequence;		///< Use the automatic End Map sequence
declare Boolean GT_UseAutospawnObjects;		///< Use automatically spawned objects
declare Boolean GT_UseComboWeapons;			///< Use Combo weapon items
declare Boolean GT_UseRepliePickups;		///< Use Replie pickup items
declare Boolean GT_UseRandomToads;			///< Spawn Toads on random bot path landmarks
declare Boolean GT_AutoManageOnHit;			///< Automatically manage OnHit events
declare Boolean GT_AutoManageOnShoot;		///< Automatically manage OnShoot events
declare Boolean GT_AutoManageOnArmorEmpty;	///< Automatically manage OnArmorEmpty events
declare Boolean GT_AutoManageOnNearMiss;	///< Automatically manage OnNearMiss events
declare Boolean GT_AutoManageOnRespawn;		///< Automatically manage OnPlayerRequestRespawn event
declare Boolean GT_AutoManageOnObjectTouch;	///< Automatically manage OnPlayerTouchesObject events
declare Boolean GT_AllowMatchmakingMode;	///< Defines if the mode can use matchmaking feature
declare Boolean GT_DisableOffZoneDamage;	///< Disable OffZone eliminations (Tornado may stil leliminate players)
declare Boolean GT_DisableTornadoDamage;	///< Disable Tornado eliminations (only if OffZone is disabled)

// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
MB_LogVersion(BaseScriptName, BaseVersion);
MB_LogVersion(WarmUp2::GetScriptName(), WarmUp2::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(Blacklist::GetScriptName(), Blacklist::GetScriptVersion());
MB_LogVersion(CupAdmin::GetScriptName(), CupAdmin::GetScriptVersion());
MB_LogVersion(FakeUsers::GetScriptName(), FakeUsers::GetScriptVersion());
MB_LogVersion(FancyMessages::GetScriptName(), FancyMessages::GetScriptVersion());
MB_LogVersion(GalaxyTitles::GetScriptName(), GalaxyTitles::GetScriptVersion());
MB_LogVersion(Interfancy::GetScriptName(), Interfancy::GetScriptVersion());
MB_LogVersion(Inventory::GetScriptName(), Inventory::GetScriptVersion());
MB_LogVersion(Killfeed::GetScriptName(), Killfeed::GetScriptVersion());
MB_LogVersion(ManialinkTools::GetScriptName(), ManialinkTools::GetScriptVersion());
MB_LogVersion(MiniMap::GetScriptName(), MiniMap::GetScriptVersion());
MB_LogVersion(PauseMenu::GetScriptName(), PauseMenu::GetScriptVersion());
MB_LogVersion(Statistics::GetScriptName(), Statistics::GetScriptVersion());
MB_LogVersion(Streaks::GetScriptName(), Streaks::GetScriptVersion());
MB_LogVersion(TopScores::GetScriptName(), TopScores::GetScriptVersion());
MB_LogVersion(Translations::GetScriptName(), Translations::GetScriptVersion());
MB_LogVersion(WebLayers::GetScriptName(), WebLayers::GetScriptVersion());
***

// ---------------------------------- //
// Initialize matchmaking lobby
// ---------------------------------- //
***LobbyStartServer***
***
MM_SetFormat([S_NbPlayersPerTeamMax, S_NbPlayersPerTeamMax]);
if (S_NbPlayersPerTeamMax > S_NbPlayersPerTeamMin) {
	declare Formats = Integer[][];
	for (I, S_NbPlayersPerTeamMin, S_NbPlayersPerTeamMax-1) if (I > 0) Formats.add([I, I]);
	MM_SetProgressiveFormats(Formats);
}
***

// ---------------------------------- //
// Set the rules in the spawn screen
// ---------------------------------- //
***Rules***
***
SpawnScreen::ResetRulesSection();
SpawnScreen::AddSubsection(_("Type"), GT_SpawnScreenModeType, 0.);
SpawnScreen::AddSubsection(_("Objectives"), GT_SpawnScreenObjectives, 25.);

SpawnScreen::SetModeName(GT_SpawnScreenModeName);
SpawnScreen::CreatePrettyRules(GT_SpawnScreenModeName);
SpawnScreen::CreateMapInfo();
SpawnScreen::CreateScores("Score.Points + Score.RoundPoints");
***

// ---------------------------------- //
// Set default scores table format
// ---------------------------------- //
***ScoresTable***
***
// ---------------------------------- //
// Global settings
ST2::SetSize(<164.5, 10.5>, <161., 60.5>, <160., 15.>);
ST2::SetFormat(2, 8);
ST2::SetTextScale(.875);
ST2::SetBackgroundProperties(<0., 5.>, <200., 100.>);

// ---------------------------------- //
// Columns
ST2::SetColWidth("LibST_Avatar", 2.5);
ST2::SetColWidth("LibST_ManiaStars", 2.);
ST2::SetColWidth("LibST_Tools", 1.5);
ST2::SetColWidth("LibST_SMPoints", 4.);
ST2::SetColWidth("LibST_SMRoundPoints", 4.);
ST2::SetColLegend("LibST_SMPoints", _("Total"));
ST2::DestroyCol("LibST_Tags");
// Custom
TopScores::AddCategory("Support", "Sp", 2.25, 70.);
TopScores::AddCategory("Hit", "Hit", 2.25, 80.);

// ---------------------------------- //
// Teams mode
ST2::SetTeamsMode(UseClans);
if (UseClans) {
	ST2::SetTeamImage(1, "file://Media/Manialinks/ShootMania/ScoresTable/teamversus-left.dds", <0., 3.5>, <100., 25.>);
	ST2::SetTeamImage(2, "file://Media/Manialinks/ShootMania/ScoresTable/teamversus-right.dds", <0., 3.5>, <100., 25.>);
}
***

// ---------------------------------- //
// Initialize server
// ---------------------------------- //
***InitServer***
***
// ---------------------------------- //
// Set mode options
UseClans = False; ///< Disable clans by default
ForceNavMapsComputation = True; ///< Lets the bots move around
UseAutoSpawnBots = False; ///< Disable bots items placed on map by user

MB_UseSectionRound = True;
MB_UsePlayerClublinks = S_UsePlayerClublinks;
MB_UseIntro = !MM_IsMatchServer();

/**
 *	Enable all options by default
 *
 *	If you wish to disable these features, do it in the ***InitServer***
 *	label of your game mode!
 */
GT_UseNoCollisionsStart = True;
GT_UseAutoEndSequence = True;
GT_UseAutospawnObjects = True;
GT_UseComboWeapons = True;
GT_UseRepliePickups = True;
GT_UseRandomToads = True;
GT_AutoManageOnHit = True;
GT_AutoManageOnShoot = True;
GT_AutoManageOnArmorEmpty = True;
GT_AutoManageOnNearMiss = True;
GT_AutoManageOnRespawn = True;
GT_AutoManageOnObjectTouch = True;
GT_AllowMatchmakingMode = True;

// Variables
declare Integer GT_NoCollisionsEndTime;
declare PrevMaximumNbWeapons = S_MaximumNbWeapons;
declare PrevMaximumNbReplies = S_MaximumNbReplies;
***

// ---------------------------------- //
// Server start
// ---------------------------------- //
***StartServer***
***
// ---------------------------------- //
// Stop the script if server is in matchmaking mode and mode doesn't support it
assert(!(MM_IsMatchmakingServer() && !GT_AllowMatchmakingMode), "This game mode does not support matchmaking mode!");

---Rules---

// ---------------------------------- //
// Download translations
declare TranslationsFilesURLs = [C_OfflineTranslationsURL, C_OnlineTranslationsURL];

Translations::Load(TranslationsFilesURLs);
while (!Translations::LoadingLoop()) MB_Yield();

// ---------------------------------- //
// Matchmaking mode
declare IsRematch = False;	///< Do the players want a rematch?
declare RematchNb = 0;		///< Number of consecutive rematch
if (MM_IsMatchServer()) MM_Init([S_NbPlayersPerTeamMax, S_NbPlayersPerTeamMax]);

// ---------------------------------- //
// Load warm-up
WarmUp2::Load();
WarmUp2::SetLayerPosition(<0., -58.>);

// ---------------------------------- //
// Create the scores table
ST2::SetStyle("LibST_SMBaseSolo");
ST2::SetStyle("LibST_SMBasePoints");
+++ScoresTable+++
MB_SetScoresTableStyleFromXml(S_ScoresTableStylePath);
ST2::Build("SM");

// ---------------------------------- //
// Create custom interface
Interfancy::Load(["Gauges", "Countdown", "SpecInfo", "Crosshair", "ScoreSummary"]);
Interfancy::SetModuleVisibility("ScoreSummary", UseClans && !UseForcedClans);
PauseMenu::Load();
SM::SetupDefaultVisibility();

UIManager.UIAll.OverlayHide321Go = True;
UIManager.UIAll.OpposingTeamLabelsShowGauges = CUIConfig::EVisibility::ForcedVisible;

// ---------------------------------- //
// Load the Storage Music Player
StoragePlayer::Load(C_ImgBase, "Eurostile", "Eurostile_Bold");
StoragePlayer::SetDefaultPlaylistURL(C_DefaultMusicPlaylist);

// ---------------------------------- //
// Load Statistics and Streaks
Statistics::Load();
Streaks::Load();

// ---------------------------------- //
// Load Killfeed library
Killfeed::Load();
Killfeed::SetPosition(C_DefaultKillfeedPosn + <0., S_KillfeedOffsetY, 0.>);
Killfeed::AddTranslations(GT_KillfeedTranslations);
Killfeed::SetTextFont("Eurostile");
Killfeed::SetWeaponsIcons([
	0 => C_ImgBase^"Icons/Shield.png", 1 => C_ImgBase^"Icons/Laser.png", 2 => C_ImgBase^"Icons/Rocket.png",
	3 => C_ImgBase^"Icons/Nucleus.png", 5 => C_ImgBase^"Icons/Arrow.png"
]);
Killfeed::Build();

// ---------------------------------- //
// Load minimap
MiniMap::Load();
MiniMap::SetOpponentsVisibility(!MM_IsMatchServer());

// ---------------------------------- //
// Load Fancy Messages
FancyMessages::Load();
FancyMessages::FormatBigMessage(<0., 54., 0.>, "Eurostile_Bold", 8);
FancyMessages::FormatStatusMessage(<0., 62., 0.>, "Eurostile_Bold", 3);

// ---------------------------------- //
// Load GalaxyTitles library
GalaxyTitles::Load();
***

// ---------------------------------- //
// Update players clublinks
// ---------------------------------- //
***UpdateClublinks***
***
if (UseClans && !UseForcedClans) {
	Clublink::ResetAll();
	if (S_ForceClublinkTeam1 == "" && S_ForceClublinkTeam2 == "") Clublink::DefineTeamAuto();
	else Clublink::DefineTeamFromUrl(S_ForceClublinkTeam1, S_ForceClublinkTeam2);
}
***

// ---------------------------------- //
// Initialize map
// ---------------------------------- //
***InitMap***
***
Score::MatchBegin();
TopScores::MatchBegin();
Interfancy::ClearData();
GalaxyTitles::ResetAll();
CupAdmin::StartMap();

// Warm-up
if (UseClans) GT_InitWarmUp();

// ---------------------------------- //
// Reset clan scores
ClanScores[1] = 0;
ClanScores[2] = 0;
MM_SetScores([ClanScores[1], ClanScores[2]]);

// ---------------------------------- //
// Init bases
foreach (MapLandmark in MapLandmarks) {
	if (MapLandmark.Base == Null) continue;
	MapLandmark.Base.Clan = 0;
	MapLandmark.Base.IsActive = True;
}

// ---------------------------------- //
// Wait players when using matchmaking
if (MM_IsMatchServer()) {
	if (!IsRematch) {
		MM_MatchWait();
		MM_VoteForNextMap(True);
	}
	else MM_WaitPlayers(15000);
} else if (S_WarmUpDuration > 0 && S_NbPlayersPerTeamMax > 0) {
	MB_CurrentSection = "WarmUp";
	GT_DoWarmUp();
	MB_CurrentSection = "StartMap";
}
IsRematch = False;

// ---------------------------------- //
// Matchmaking: allow substitutes
if (MM_IsMatchServer()) MM_AllowSubstitutes(True);
***

// ---------------------------------- //
// Initialize round
// ---------------------------------- //
***InitRound***
***
Score::RoundBegin();
TopScores::RoundBegin();
MiniMap::Show();

// ---------------------------------- //
// Init players clans
GT_AutoBalance();
foreach (Player in Players) SetPlayerClan(Player, GT_GetRequestedClan(Player));

// ---------------------------------- //
// Init GalaxyTitles functions
declare ToadsSpawnRatio = 0.;
if (GT_UseRandomToads) ToadsSpawnRatio = S_ToadsSpawnRatio;

GalaxyTitles::SetDroppedWeaponsLifetime(S_WeaponsDropLifetime * 1000);
GalaxyTitles::SetMaxWeapons(S_MaximumNbWeapons);
GalaxyTitles::SetMaxReplies(S_MaximumNbReplies);

GalaxyTitles::Init(
	GT_UseComboWeapons && S_UseComboWeapons && S_MaximumNbWeapons != 0,
	GT_UseRepliePickups && S_MaximumNbReplies != 0,
	ToadsSpawnRatio
);

// Update the rules now, if a change occured in the settings
---Rules---
***

// ---------------------------------- //
// Round start
// ---------------------------------- //
***StartRound***
***
// No collisions at the beginning of the round
if (GT_UseNoCollisionsStart) UsePvPCollisions = False;
if (!UsePvPCollisions) GT_NoCollisionsEndTime = StartTime + C_NoCollisionsDuration;

---UpdateClublinks---
***

// ---------------------------------- //
// Mode global loop
// ---------------------------------- //
***Yield***
***
FakeUsers::Loop(S_NbFakeUsers);
WebLayers::Update(S_CustomLayersURLs);
Blacklist::Loop(S_CustomBlacklistURL);
StoragePlayer::UpdatePlaylistURL(S_MusicPlaylistURL);
CupAdmin::Loop(S_AdminEnableCupMode, S_AdminPauseCompetition, S_AdminCupModeNbMaps, S_AdminCupName);
Interfancy::Loop();
Inventory::Loop();
Message::Loop();
Killfeed::Loop();
FancyMessages::Loop();
Statistics::Loop();
Streaks::Loop();
***

// ---------------------------------- //
// Update clublinks on new player connection
// ---------------------------------- //
***OnNewPlayer***
***
---UpdateClublinks---
***

// ---------------------------------- //
// Premade on armor empty event manager
// ---------------------------------- //
***PremadeOnArmorEmpty***
***
declare Ident[] GT_VictimShootHistory for Event.Victim;
declare Ident GT_VictimLastShooter for Event.Victim;
declare Integer GT_VictimLastHitTime for Event.Victim;
declare Integer GT_LastFakeHitTime for Event.Victim;

// ---------------------------------- //
// Normal hit elimination
if (Event.Shooter != Null) {
	+++OnArmorEmpty+++
	
	// ---------------------------------- //
	// Elimination assistance
	declare CSmPlayer EventAssistant;
	
	// Get the elimination assistant
	if (GT_VictimShootHistory.count > 0) for (I, 0, GT_VictimShootHistory.count - 1) {
		declare PlayerId = GT_VictimShootHistory[GT_VictimShootHistory.count - 1 - I];
		if (AllPlayers.existskey(PlayerId) && PlayerId != Event.Shooter.Id) {
			EventAssistant = AllPlayers[PlayerId];
			break;
		}
	}
	
	GT_VictimLastShooter = NullId;
	GT_VictimShootHistory.clear();
	GT_LastFakeHitTime = Now;
	
	if (GT_IsValidForCallbacks(Event)) XmlRpc::OnArmorEmpty(Event);
	Killfeed::OnArmorEmpty(Event, EventAssistant);
	Streaks::OnArmorEmpty(Event);
	
	// Statistics tracking
	Statistics::OnArmorEmpty(Event);
	Statistics::TrackEvent(EventAssistant, "EliminationAssists", 1);
	
	PassOn(Event);
}
// ---------------------------------- //
// Environmental elimination
else {
	// ---------------------------------- //
	// Someone performed environmental elimination
	if (
		Now <= GT_VictimLastHitTime + C_EnviroKillTimeOut &&
		GT_VictimLastShooter != NullId && AllPlayers.existskey(GT_VictimLastShooter)
	) {
		declare Shooter = AllPlayers[GT_VictimLastShooter];
		declare Points = Event.Victim.Armor / 100;
		GT_VictimLastShooter = NullId;
		
		Score::AddPoints(Shooter, Points);
		TopScores::AddPoints(Shooter.Score, "Hit", Points);
		
		RemovePlayerArmor(Event.Victim, Event.Victim.Armor, Shooter, Points);
		Discard(Event);
	}
	// ---------------------------------- //
	// Normal environmental elimination
	else if (Now > GT_LastFakeHitTime + 500) {
		Score::RemovePoints(Event.Victim, 1);
		
		+++OnArmorEmpty+++
		
		GT_VictimLastShooter = NullId;
		GT_VictimShootHistory.clear();
		
		if (GT_IsValidForCallbacks(Event)) XmlRpc::OnArmorEmpty(Event);
		Killfeed::OnArmorEmpty(Event, Null);
		Statistics::OnArmorEmpty(Event);
		PassOn(Event);
	}
	else Discard(Event);
}
***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***PlayLoop***
***
// ---------------------------------- //
// Extended events management
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// On armor empty
	if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
		if (GT_AutoManageOnArmorEmpty) {
			declare PassOnEvent = True;
			
			// ---------------------------------- //
			// OffZone damage is disabled
			if (Event.Shooter == Null && GT_DisableOffZoneDamage) {
				PassOnEvent = False;
				
				// ---------------------------------- //
				// Tornado is enabled even if OffZone is not active
				if (!GT_DisableTornadoDamage && OffZoneRadius > 0) {
					declare Vec3 MapLandmarkPosition;
					foreach (MapLandmark in MapLandmarks) {
						if (MapLandmark.Id != OffZoneCenterLandmarkId) continue;
						MapLandmarkPosition = MapLandmark.Position;
						break;
					}
					PassOnEvent = GT_Distance2D(Event.Victim.Position, MapLandmarkPosition) >= OffZoneRadius;
				}
			}
			
			// ---------------------------------- //
			// Manage the event
			if (PassOnEvent) { ---PremadeOnArmorEmpty--- }
			else Discard(Event);
		}
	}
	// ---------------------------------- //
	// On hit
	else if (Event.Type == CSmModeEvent::EType::OnHit) {
		// ---------------------------------- //
		// Automatic hit management
		if (GT_AutoManageOnHit) {
			// ---------------------------------- //
			// Discard invalid events
			if (Event.Shooter == Null || Event.Victim == Null || Event.Shooter == Event.Victim) Discard(Event);
			
			// ---------------------------------- //
			// Teammate hit
			else if (Event.Shooter.CurrentClan != 0 && Event.Shooter.CurrentClan == Event.Victim.CurrentClan) Discard(Event);
			
			// ---------------------------------- //
			// A bot has hit someone
			else if (Event.Shooter.IsBot) {
				if (Event.Victim.IsBot && Event.Victim.CurrentClan == 0) Discard(Event);
				else PassOn(Event);
			}
			
			// ---------------------------------- //
			// Enemy hit
			else {
				// Reduce Laser damage
				if (Event.Damage > C_EventMaxDamage) Event.Damage = C_EventMaxDamage;
				
				declare Points = ML::Min(Event.Damage, Event.Victim.Armor) / 100;
				Score::AddPoints(Event.Shooter, Points);
				TopScores::AddPoints(Event.Shooter.Score, "Hit", Points);
				Event.ShooterPoints = Points;
				
				+++OnHit+++
				
				// ---------------------------------- //
				// Environmental eliminations
				declare Ident GT_VictimLastShooter for Event.Victim;
				declare Integer GT_VictimLastHitTime for Event.Victim;
				GT_VictimLastShooter = Event.Shooter.Id;
				GT_VictimLastHitTime = Now;
				
				// ---------------------------------- //
				// Elimination assists
				declare Ident[] GT_VictimShootHistory for Event.Victim;
				GT_VictimShootHistory.add(Event.Shooter.Id);
				
				if (GT_IsValidForCallbacks(Event)) XmlRpc::OnHit(Event);
				Statistics::OnHit(Event);
				PassOn(Event);
			}
		}
		// ---------------------------------- //
		// Manual event management
		else {
			+++OnHit+++
		}
	}
	// ---------------------------------- //
	// On shoot
	else if (Event.Type == CSmModeEvent::EType::OnShoot) {
		if (GT_AutoManageOnShoot) {
			if (GT_IsValidForCallbacks(Event)) XmlRpc::OnShoot(Event);
			Statistics::OnShoot(Event);
		}
		+++OnShoot+++
	}
	// ---------------------------------- //
	// On player request respawn
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
		declare Ident[] GT_VictimShootHistory for Event.Player;
		declare Ident GT_VictimLastShooter for Event.Player;
		GT_VictimShootHistory.clear();
		GT_VictimLastShooter = NullId;
		
		if (GT_AutoManageOnRespawn) {
			Score::RemovePoints(Event.Player, 1);
			+++OnPlayerRequestRespawn+++
			if (GT_IsValidForCallbacks(Event)) XmlRpc::OnPlayerRequestRespawn(Event);
			Statistics::OnPlayerRequestRespawn(Event);
			PassOn(Event);
		}
		else {
			+++OnPlayerRequestRespawn+++
		}
	}
	// ---------------------------------- //
	// Player picked up item
	else if (Event.Type == CSmModeEvent::EType::OnPlayerTouchesObject) {
		if (Event.Object == Null || Event.Player == Null || Event.Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
			Discard(Event);
			continue;
		}
		
		// Pick up object handled by the mode base
		if (GT_AutoManageOnObjectTouch) if (GalaxyTitles::PickUpObject(Event, S_ObjectsRespawnTime * 1000)) continue;
		
		+++OnPlayerTouchesObject+++
	}
	// ---------------------------------- //
	// On player switch weapon
	else if (Event.Type == CSmModeEvent::EType::OnActionEvent) {
		declare Switched = Inventory::SwitchWeapon(Event.Player, Event.ActionInput);
		GalaxyTitles::UseConsumableItems(Event);
		+++OnActionEvent+++
	}
	// ---------------------------------- //
	// On player cycle weapon
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestActionChange) {
		Inventory::ScrollWeapons(Event.Player, Event.ActionChange);
		+++OnPlayerRequestActionChange+++
	}
	// ---------------------------------- //
	// Near miss event
	else if (Event.Type == CSmModeEvent::EType::OnNearMiss) {
		// ---------------------------------- //
		// Display near miss message
		if (
			GT_AutoManageOnNearMiss && !Event.Shooter.IsBot && Event.Victim != Null && Event.WeaponNum == 1 &&
			(Event.Shooter.CurrentClan == 0 || Event.Shooter.CurrentClan != Event.Victim.CurrentClan)
		) {
			Interfancy::DisplayNearMiss(Event.Shooter, Event.MissDist);
			if (GT_IsValidForCallbacks(Event)) XmlRpc::OnNearMiss(Event);
		}
		Statistics::OnNearMiss(Event);
		+++OnNearMiss+++
	}
	// ---------------------------------- //
	// On shot deny
	else if (Event.Type == CSmModeEvent::EType::OnShotDeny)
		Statistics::OnShotDeny(Event);
	
	// ---------------------------------- //
	// Update clublinks on player removal
	else if (Event.Type == CSmModeEvent::EType::OnPlayerRemoved) {
		---UpdateClublinks---
	}
}

// ---------------------------------- //
// Galaxy Titles features
GT_UnspawnPlayersChangingClan();
GalaxyTitles::Loop(GT_UseAutospawnObjects && S_ObjectsRespawnTime > 0, S_ToadsRespawnTime * 1000);

// ---------------------------------- //
// Stop the no-collisions phase
if (GT_UseNoCollisionsStart && GT_NoCollisionsEndTime > 0 && GT_NoCollisionsEndTime <= Now) {
	GT_NoCollisionsEndTime = -1;
	UsePvPCollisions = True;
}

// ---------------------------------- //
// Update maximum weapons slots setting
if (PrevMaximumNbWeapons != S_MaximumNbWeapons) {
	PrevMaximumNbWeapons = S_MaximumNbWeapons;
	GalaxyTitles::SetMaxWeapons(S_MaximumNbWeapons);
}

// ---------------------------------- //
// Update maximum Replies setting
if (PrevMaximumNbReplies != S_MaximumNbReplies) {
	PrevMaximumNbReplies = S_MaximumNbReplies;
	GalaxyTitles::SetMaxReplies(S_MaximumNbReplies);
}

// Stop match if there's not enough players left in matchmaking
if (MM_IsMatchServer() && MM_RestartMatchmaking) MB_StopMatch = True;
***

// ---------------------------------- //
// End round
// ---------------------------------- //
***EndRound***
***
+++EndRoundBeforeSetScores+++
Score::RoundEnd();
TopScores::RoundEnd();
MiniMap::Hide();
GalaxyTitles::ResetAll();
EndTime = -1;
***

// ---------------------------------- //
// End map
// ---------------------------------- //
***EndMap***
***
+++EndMapBeforeCloseLadder+++
// ---------------------------------- //
// Force LadderClan to a value different than 0, can't win LP otherwise
if (!UseClans) foreach (I => Score in Scores) Score.LadderClan = 1 + I % 2;

Score::MatchEnd(True);
TopScores::MatchEnd();
GalaxyTitles::ResetAll();

// ---------------------------------- //
// Custom competitions
CupAdmin::EndMap();
while (CupAdmin::IsCupEnd()) MB_Yield();

// ---------------------------------- //
// Set matchmaking match master
declare MasterLogin = "";
declare MasterPoints = 0;

if (MM_IsMatchServer()) {
	MM_SetLadderMatchId();
	if (ClansNbPlayers[1] != 0 && ClansNbPlayers[2] != 0 && !MM_RestartMatchmaking && Scores.existskey(0)) {
		MasterPoints = Scores[0].Points;
		MasterLogin = Scores[0].User.Login;
	}
}

+++EndMapBeforePodium+++

// ---------------------------------- //
// End match sequence
if (GT_UseAutoEndSequence) {
	// ---------------------------------- //
	// Set the map winner
	declare Text WinnerName;
	if (UseClans && !UseForcedClans) {
		foreach (Clan => Points in ClanScores)
			if (Clan != 0 && Points > ClanScores[3 - Clan]) WinnerName = Teams[Clan - 1].ColorizedName;
	}
	else if (Scores.existskey(0)) WinnerName = Scores[0].User.Name;
	
	// ---------------------------------- //
	// Display the round winner
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
	UIManager.UIAll.BigMessageSoundVariant = 0;
	
	if (WinnerName == "") UIManager.UIAll.BigMessage = _("|Match|Draw");
	else UIManager.UIAll.BigMessage = TL::Compose(_("$<%1$> wins the match!"), WinnerName);
	
	MB_Sleep(6000);
	
	// ---------------------------------- //
	// Podium
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
	while(!UIManager.UIAll.UISequenceIsCompleted) MB_Yield();
	
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
	UIManager.UIAll.BigMessage = "";
}

// ---------------------------------- //
// Send match result and transfer players back to the lobby
if (MM_IsMatchServer()) {
	if (!MM_RestartMatchmaking && ClansNbPlayers[1] > 0 && ClansNbPlayers[2] > 0) {
		if (MB_StopMatch) {
			if (RematchNb < S_MatchmakingRematchNbMax) {
				IsRematch = MM_VoteForRematch();
				RematchNb += 1;
			}
			if (!IsRematch) {
				RematchNb = 0;
				MM_MatchEnd(MasterLogin);
				MM_MatchToLobby();
			}
			else MM_VoteForNextMap(False);
		}
		else MM_VoteForNextMap(False);
	} else {
		RematchNb = 0;
		MM_MatchEnd(MasterLogin);
		MM_MatchToLobby();
	}
}
***

// ---------------------------------- //
// Server end
// ---------------------------------- //
***EndServer***
***
GalaxyTitles::Unload();
Interfancy::Unload();
Killfeed::Unload();
MiniMap::Unload();
PauseMenu::Unload();
Statistics::Unload();
StoragePlayer::Unload();
Streaks::Unload();
FancyMessages::Unload();

SpawnScreen::DestroyRules();
SpawnScreen::DestroyScores();
SpawnScreen::DestroyMapInfo();
WarmUp2::Unload();
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Get the requested clan of a player
 *
 *	@param	_Player		The player to check
 *
 *	@return		The requested clan of the player
 */
Integer GT_GetRequestedClan(CSmPlayer _Player) {
	if (_Player == Null || !UseClans || UseForcedClans) return 0;
	
	// Get the clan in matchmaking
	if (MM_IsMatchServer()) return MM_GetRequestedClan(_Player);
	
	// Get the clan from automatic team balance
	if (S_UseAutoBalance) {
		declare Integer GT_AutoBalanceClan for _Player;
		if (GT_AutoBalanceClan >= 1 && GT_AutoBalanceClan <= 2) return GT_AutoBalanceClan;
	}
	
	// Get the user requested clan
	return _Player.User.RequestedClan;
}

// ---------------------------------- //
/// Teams balance based on players total points
Void GT_AutoBalance() {
	foreach (I => Player in Players) {
		declare Integer GT_AutoBalanceClan for Player;
		GT_AutoBalanceClan = I % 2 + 1;
	}
}

// ---------------------------------- //
/** Check if specific event is valid for sending XMLRPC callbacks
 *
 *	@param	_Event		The event to check
 *
 *	@return		True, if event can be sent via XMLRPC
 */
Boolean GT_IsValidForCallbacks(CSmModeEvent _Event) {
	if (_Event == Null) return False;
	declare EventPlayers = [_Event.Player, _Event.Shooter, _Event.Victim];
	foreach (Player in EventPlayers) if (Player != Null && (Player.IsBot || Player.IsFakePlayer)) return False;
	return True;
}

// ---------------------------------- //
/// Unspawn the players requesting a clan change
Void GT_UnspawnPlayersChangingClan() {
	if (!UseClans || UseForcedClans) return;
	foreach (Player in Players) {
		if (
			Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned &&
			Player.CurrentClan != 0 && Player.CurrentClan != GT_GetRequestedClan(Player)
		)
			UnspawnPlayer(Player);
	}
}

// ---------------------------------- //
/** Check if the spawns of the players are limited to a specific list
 *
 *	@return		True if the player spawns are limited, False otherwise
 */
Boolean GT_SpawnIsLimited() {
	if (!UseClans) return False;
	if (WarmUp2::GroupExists("Clan1") && WarmUp2::GroupExists("Clan2")) return True;
	return False;
}

// ---------------------------------- //
/** Check if a player is spawnable
 *
 *	@param	_Player		The player to check
 *
 *	@return		True if the player is spawnable, false otherwise
 */
Boolean GT_IsSpawnable(CSmPlayer _Player) {
	if (_Player == Null || _Player.User.RequestsSpectate) return False;
	if (!GT_SpawnIsLimited()) return True;
	
	if (WarmUp2::GetPlayerSlot(_Player) <= 0) return False;
	for (I, 1, 2) if (_Player.CurrentClan == I && WarmUp2::GetPlayerGroup(_Player) == "Clan"^I) return True;
	
	return False;
}

// ---------------------------------- //
/** Check if a player is valid to be spawned in mode
 *
 *	@param	_Player		The player to check
 *
 *	@return		True if the player is valid, false otherwise
 */
Boolean GT_IsValidPlayer(CSmPlayer _Player) {
	if (_Player == Null) return False;
	
	// Skip invalid player in matchmaking
	if (MM_IsMatchServer() && !MM_PlayerIsValid(_Player)) return False;
	
	// ---------------------------------- //
	// Set player clan
	SetPlayerClan(_Player, GT_GetRequestedClan(_Player));
	if (GT_SpawnIsLimited()) {
		WarmUp2::Clean();
		if (_Player.CurrentClan != 0) WarmUp2::SetPlayerGroup(_Player, "Clan"^_Player.CurrentClan);
		WarmUp2::Fill();
	}
	if (!GT_IsSpawnable(_Player)) return False;
	return True;
}

// ---------------------------------- //
/** Initialize player to be spawned
 *
 *	@param	_Player		The player to initialize
 */
Void GT_InitPlayer(CSmPlayer _Player) {
	if (_Player == Null) return;
	
	if (UseClans && !UseForcedClans) SetPlayerClan(_Player, GT_GetRequestedClan(_Player));
	GalaxyTitles::InitPlayer(_Player);
	Interfancy::ForceColor(_Player, _Player.User.Color);
	SetPlayerReloadAllWeapons(_Player, True);
	
	_Player.ArmorMax = ML::Max(1, ML::Min(S_PlayerArmorPoints, 10)) * 100;
	_Player.StaminaMax = C_PlayerStaminaMax;
}

// ---------------------------------- //
/// Initialize the warm up properties
Void GT_InitWarmUp() {
	if (S_NbPlayersPerTeamMax > 0) {
		if (WarmUp2::GroupExists("Clan1")) WarmUp2::SetSlotsNb("Clan1", S_NbPlayersPerTeamMax);
		else WarmUp2::CreateGroup("Clan1", S_NbPlayersPerTeamMax);
		if (WarmUp2::GroupExists("Clan2")) WarmUp2::SetSlotsNb("Clan2", S_NbPlayersPerTeamMax);
		else WarmUp2::CreateGroup("Clan2", S_NbPlayersPerTeamMax);
		WarmUp2::DisplayClanSelection(True);
	} else {
		WarmUp2::DestroyGroup("Clan1");
		WarmUp2::DestroyGroup("Clan2");
		WarmUp2::DisplayClanSelection(False);
	}
}

// ---------------------------------- //
/** Compute distance between points excluding Y axis
 *
 *	@param	_Pos1	Starting point
 *	@param	_Pos2	Ending point
 *
 *	@return		Distance between points
 */
Real GT_Distance2D(Vec3 _Pos1, Vec3 _Pos2) {
	declare Pos1 = <_Pos1.X, _Pos1.Z>;
	declare Pos2 = <_Pos2.X, _Pos2.Z>;
	if (Pos1 == Pos2) return 0.;
	return ML::Sqrt(ML::Pow(Pos1.X - Pos2.X, 2.) + ML::Pow(Pos1.Y - Pos2.Y, 2.));
}

// ---------------------------------- //
/// Skip the map if it's not valid
Void GT_SkipInvalidMap() {
	Translations::SendChat("This map is not valid, moving to the next one.");
	if (!ServerShutdownRequested) MB_Sleep(10000);
	MB_StopMap = True;
}

// ---------------------------------- //
/// Do the warm-up
Void GT_DoWarmUp() {
	XmlRpc::BeginWarmUp();
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::PhaseChange;
	UIManager.UIAll.BigMessageSoundVariant = 0;
	UIManager.UIAll.StatusMessage = _("Press F6 once you're ready.");
	UIManager.UIAll.BigMessage = TL::Compose("$f90%1", _("Warm-up"));
	
	// ---------------------------------- //
	// Synchronize players
	Mode::Synchro_DoBarrier();
	SM::UnspawnAllPlayers();
	
	// ---------------------------------- //
	// Set players clan
	if (UseClans) foreach (Player in AllPlayers) {
		SetPlayerClan(Player, GT_GetRequestedClan(Player));
		WarmUp2::SetPlayerGroup(Player, "Clan"^Player.CurrentClan);
	}
	
	WarmUp2::Clean();
	WarmUp2::Begin();
	WarmUp2::Fill();
	
	// ---------------------------------- //
	// Initialize warm-up
	GalaxyTitles::ResetAll();
	GalaxyTitles::InitObjects();
	MiniMap::Show();
	
	declare PrevWarmUpDuration = S_WarmUpDuration - 1;
	declare Ident[] SpawnsList;
	declare Ident LatestSpawnId;
	
	// ---------------------------------- //
	// Warm-up sequence loop
	while (!WarmUp2::Stop()) {
		MB_Yield();
		
		// Let the server sleep if there are no players
		if (PlayersNbTotal <= 0) continue;
		
		GalaxyTitles::SpawnObjects(GT_UseAutospawnObjects);
		if (UseClans) GT_UnspawnPlayersChangingClan();
		
		// ---------------------------------- //
		// Update warm-up duration
		if (PrevWarmUpDuration != S_WarmUpDuration) {
			PrevWarmUpDuration = S_WarmUpDuration;
			
			declare LongTimer = S_WarmUpDuration * 1000;
			declare ShortTimer = 5000;
			if (LongTimer <= 0) { LongTimer = 0; ShortTimer = 0; }
			for (I, 1, 2) WarmUp2::SetGroupTimers("Clan"^I, [ShortTimer => [-1, S_NbPlayersPerTeamMin], LongTimer => [1, S_NbPlayersPerTeamMin]]);
		}
		
		WarmUp2::Fill();
		WarmUp2::Loop();
		WarmUp2::ManageEvents();
		
		// ---------------------------------- //
		// Spawn players
		foreach (Player in Players) {
			if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
				// ---------------------------------- //
				// Set player clan
				if (UseClans) SetPlayerClan(Player, GT_GetRequestedClan(Player));
				
				// Init player settings
				Player.ArmorMax = ML::Max(1, ML::Min(S_PlayerArmorPoints, 10)) * 100;
				Player.StaminaMax = C_PlayerStaminaMax;
				
				// ---------------------------------- //
				// Select random spawn
				if (SpawnsList.count == 0) foreach (MapLandmark in MapLandmarks_PlayerSpawn) SpawnsList.add(MapLandmark.Id);
				
				declare SpawnId = NullId;
				while (True) {
					SpawnId = SpawnsList[ML::Rand(0, SpawnsList.count - 1)];
					if (SpawnId != LatestSpawnId) break;
					if (SpawnsList.count == 1) break;
				}
				
				LatestSpawnId = SpawnId;
				SM::SpawnPlayer(Player, Player.CurrentClan, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, Now + S_RespawnTime);
				declare Removed = SpawnsList.remove(SpawnId);
			}
		}
	}
	
	// ---------------------------------- //
	// End the warm-up
	WarmUp2::End();
	XmlRpc::EndWarmUp();
	
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	UIManager.UIAll.StatusMessage = "";
	UIManager.UIAll.BigMessage = "";
	SM::UnspawnAllPlayers();
	GalaxyTitles::ResetAll();
	MiniMap::Hide();
}

// ---------------------------------- //
/** Play the Sudden Death mode to determine match winner
 *
 *	@param	_Team1Spawn		First team spawn
 *	@param	_Team2Spawn		Second team spawn
 *
 *	@return		Match winner
 */
Integer GT_SuddenDeath(CSmMapLandmark _Team1Spawn, CSmMapLandmark _Team2Spawn) {
	if (_Team1Spawn == Null || _Team1Spawn.PlayerSpawn == Null) return 0;
	if (_Team2Spawn == Null || _Team2Spawn.PlayerSpawn == Null) return 0;
	
	// ---------------------------------- //
	// Initialize Sudden Death mode
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	declare TeamsPoints = [1 => 0, 2 => 0];
	GalaxyTitles::ResetAll();
	MiniMap::Show();
	UseClans = True;
	EndTime = -1;
	StartTime = Now;
	
	// ---------------------------------- //
	// Colorize bases
	foreach (MapLandmark in MapLandmarks) {
		if (MapLandmark.Base == Null) continue;
		MapLandmark.Base.IsActive = True;
		if (MapLandmark == _Team1Spawn) MapLandmark.Base.Clan = 1;
		if (MapLandmark == _Team2Spawn) MapLandmark.Base.Clan = 2;
		else MapLandmark.Base.Clan = 0;
	}
	
	// Mode start sound
	Translations::SendBigMessage(
		["$<%1$> captured the last pole.", TL::ToText(3)],
		3000, 0, CUIConfig::EUISound::StartRound, 0
	);
	
	// ---------------------------------- //
	// Sudden Death loop
	while (!ServerShutdownRequested && !MatchEndRequested) {
		MB_Yield();
		
		// ---------------------------------- //
		// Events management
		foreach (Event in PendingEvents) {
			// ---------------------------------- //
			// On armor empty
			if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
				if (GT_IsValidForCallbacks(Event)) XmlRpc::OnArmorEmpty(Event);
				Killfeed::OnArmorEmpty(Event, Null);
				Statistics::OnArmorEmpty(Event);
				PassOn(Event);
			}
			// ---------------------------------- //
			// On hit
			else if (Event.Type == CSmModeEvent::EType::OnHit) {
				if (Event.Victim == Null || Event.Shooter == Event.Victim) Discard(Event);
				else if (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) Discard(Event);
				else {
					// Reduce Laser damage
					if (Event.Damage > C_EventMaxDamage) Event.Damage = C_EventMaxDamage;
					
					declare Points = ML::Min(Event.Damage, Event.Victim.Armor) / 100;
					Score::AddPoints(Event.Shooter, Points);
					TopScores::AddPoints(Event.Shooter.Score, "Hit", Points);
					Event.ShooterPoints = Points;
					
					TeamsPoints[Event.Shooter.CurrentClan] += Points;
					if (TeamsPoints[Event.Shooter.CurrentClan] - TeamsPoints[3 - Event.Shooter.CurrentClan] >= 3) break;
					
					if (GT_IsValidForCallbacks(Event)) XmlRpc::OnHit(Event);
					Statistics::OnHit(Event);
					PassOn(Event);
				}
			}
			// ---------------------------------- //
			// On shoot
			else if (Event.Type == CSmModeEvent::EType::OnShoot) {
				if (!GT_AutoManageOnShoot) continue;
				if (GT_IsValidForCallbacks(Event)) XmlRpc::OnShoot(Event);
				Statistics::OnShoot(Event);
			}
			// ---------------------------------- //
			// On player request respawn
			else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) Discard(Event);
			
			// ---------------------------------- //
			// Player picked up item
			else if (Event.Type == CSmModeEvent::EType::OnPlayerTouchesObject) Discard(Event);
			
			// Others
			else PassOn(Event);
		}
		
		// ---------------------------------- //
		// Spawn players
		foreach (Player in Players) {
			if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned || Player.RequestsSpectate || !GT_IsValidPlayer(Player)) continue;
			
			GT_InitPlayer(Player);
			Inventory::ResetInventory(Player);
			SetPlayerWeapon(Player, CSmMode::EWeapon::Laser, False);
			Player.ArmorMax = 100;
			Player.AmmoGain = 2.;
			
			// Spawn player
			declare CSmMapPlayerSpawn PlayerSpawn;
			switch (Player.CurrentClan) {
				case 1 : PlayerSpawn <=> _Team1Spawn.PlayerSpawn;
				case 2 : PlayerSpawn <=> _Team2Spawn.PlayerSpawn;
			}
			SM::SpawnPlayer(Player, Player.CurrentClan, PlayerSpawn, Now + S_RespawnTime);
		}
	}
	
	// ---------------------------------- //
	// Stop the Sudden Death mode
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::None;
	UIManager.UIAll.SendNotice(
		"", CUIConfig::ENoticeLevel::PlayerInfo,
		Null, CUIConfig::EAvatarVariant::Default, 
		CUIConfig::EUISound::VictoryPoint, 0
	);
	MB_Sleep(3000);
	MiniMap::Hide();
	
	// ---------------------------------- //
	// Return the winner
	for (Clan, 1, 2) if (TeamsPoints[Clan] > TeamsPoints[3 - Clan]) return Clan;
	return 0;
}