<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<manialink version="2" name="FindMe" background="0">
<stylesheet>
	<style class="main-font" textsize="1" textcolor="333"/>
	<style class="shadow" style="Bgs1InRace" substyle="BgButtonShadow" opacity=".25"/>
	<style class="separator-text" style="TextButtonNav" scale=".65" textcolor="666"/>
	
	<style id="Label_ResultCardTitle" scale=".7" textcolor="333"/>
	<style id="Label_ResultCardURL" scale=".5" textcolor="070"/>
	<style id="Label_ResultCardDesc" scale=".55" textcolor="777"/>
	
	<style id="Entry_Omnibox" focusareacolor1="0000" focusareacolor2="0002" textsize="2" textemboss="1" textcolor="FFF"/>
	<style id="Quad_ClearOmnibox" image="file://Media/Manialinks/Common/Chat/buddy-search-clear-off.dds"
		imagefocus="file://Media/Manialinks/Common/Chat/buddy-search-clear-focus.dds"/>
	
	<style id="Quad_LogoIcon" style="ManiaPlanetLogos" substyle="IconPlanets"/>
	<style id="Label_LogoMainTitle" style="TextButtonNav" textsize="8" textcolor="222" textprefix="$n"/>
	<style id="Label_AddressText" textsize="1" textemboss="1" textcolor="FFF"/>
	
	<style id="Quad_PreviewArrow" style="Icons128x32_1" substyle="ArrowUp" colorize="DDD"/>
</stylesheet>

<quad posn="0 0 -10" sizen="320 180" halign="center" valign="center" bgcolor="000"/>

<framemodel id="Frame_ResultCardModel">
	<quad posn="-4 4 -1" sizen="128 19" class="shadow"/>
	<quad sizen="120 11" class="result highlight focus-0 valid-1" bgcolor="EEE" id="Quad_ResultCardBG" ScriptEvents="1"/>
	<label posn="2 -2.6 1" sizen="140 6" valign="center2" id="Label_ResultCardTitle"/>
	<label posn="2 -5.75 1" sizen="197 6" valign="center2" id="Label_ResultCardURL"/>
	<label posn="2 -8.75 1" sizen="179 6" valign="center2" id="Label_ResultCardDesc"/>
	<quad posn="102 -1 1" sizen="16 9" id="Quad_ResultCardPreview"/>
</framemodel>

<framemodel id="Frame_QuickCardModel">
	<quad posn="-4 4 -1" sizen="26 28" class="shadow"/>
	<quad sizen="18 20" class="quick highlight focus-0 valid-1" bgcolor="EEE" id="Quad_ResultCardBG" ScriptEvents="1"/>
	<label posn="9 -16 1" sizen="24 6" halign="center" valign="center2" id="Label_ResultCardTitle"/>
	<quad posn="4 -3 1" sizen="10 10" id="Quad_QuickCardIcon"/>
</framemodel>

<frame id="Frame_Global">

<quad posn="0 0 -9" sizen="320 180" halign="center" valign="center" image="http://blog.maniaplanet.com/wp-content/uploads/2014/04/StayFrosty.jpg"/>
<quad posn="-160 90 10" sizen="320 6" bgcolor="000" opacity=".75"/>

<frame id="Frame_AddressTooltip" posn="160 -90" hidden="1">
	<label posn="-4 2" valign="center2" halign="right" id="Label_AddressText"/>
	<quad posn="-2 2" sizen="5 5" halign="center" valign="center" style="UIConstruction_Buttons" substyle="Right"/>
</frame>

<frame id="Frame_PreviewWindow" posn="110.5 -50">
	<quad posn="0 0 -1" sizen="82 47" halign="center" valign="center" bgcolor="DDD" opacity="0" id="Quad_PreviewBackground"/>
	<quad sizen="80 45" halign="center" valign="center" opacity="0" id="Quad_ManialinkPreview"/>
	<quad posn="-41 -18" sizen="5 5" rot="-90" halign="center" valign="bottom" opacity="0" id="Quad_PreviewArrow"/>
</frame>

<frame posn="-60 90">
	<quad posn="-1 0 -6" sizen="3 180" halign="right" style="Bgs1InRace" substyle="BgGradRight" opacity=".5"/>
	<quad posn="121 0 -6" sizen="3 180" style="Bgs1InRace" substyle="BgGradLeft" opacity=".5"/>
	<quad posn="-2 0 -5" sizen="124 180" bgcolor="DDD"/>
	
	<frame id="Frame_LogoArea" posn="-2 -6 -2">
		<quad sizen="124 30" image="http://dominolink.aq.pl/findme/header.png" id="Quad_BG"/>
		<quad posn="52 -15 1" sizen="20 20" halign="right" valign="center" id="Quad_LogoIcon"/>
		<label posn="53 -14 2" valign="center2" text="FindMe" id="Label_LogoMainTitle"/>
		<label posn="53.5 -19 2" valign="center2" class="main-font" text="The manialink search engine"/>
	</frame>
	
	<frame id="Frame_MainToolbar" posn="-2 -36 10">
		<quad posn="-.1 -7 -1" sizen="124.1 3" style="Bgs1InRace" substyle="BgGradTop" opacity=".5"/>
		<quad sizen="124 8" bgcolor="36A" id="Quad_MenuBarColorBg"/>
		<quad posn="-.1 0 .1" sizen="124.1 8" style="Bgs1InRace" substyle="BgGradBottom" opacity=".2"/>
		<quad posn="5 -4 1" sizen="5 5" halign="center" valign="center" image="file://Media/Manialinks/Common/Chat/buddy-search-go-off.dds"/>
		<entry posn="9 -4 1" sizen="106 6" valign="center2" selecttext="1" id="Entry_Omnibox"/>
		<quad posn="119 -4 1" sizen="5 5" halign="center" valign="center" class="focus-1 valid-1" id="Quad_ClearOmnibox" ScriptEvents="1" hidden="1"/>
	</frame>
	
	<frame id="Frame_PageHome" hidden="1">
		<frame posn="0 -47">
			<label valign="center2" class="separator-text" style="TextButtonNav" scale=".65" textcolor="666" text="Welcome in FindMe!"/>
			<label posn="0 -2.5" sizen="120 8" class="main-font" autonewline="1" text="On this manialink you can search other manialinks made by community. To search the things, just type what you're looking for in the field above or choose one quick question below."/>
		</frame>
		
		<frame posn="0 -55">
			<frameinstance posn="0 -3" modelid="Frame_QuickCardModel" id="Frame_QuickCard#0" hidden="0"/>
			<frameinstance posn="20.4 -3" modelid="Frame_QuickCardModel" id="Frame_QuickCard#1" hidden="0"/>
			<frameinstance posn="40.8 -3" modelid="Frame_QuickCardModel" id="Frame_QuickCard#2" hidden="0"/>
			<frameinstance posn="61.2 -3" modelid="Frame_QuickCardModel" id="Frame_QuickCard#3" hidden="0"/>
			<frameinstance posn="81.6 -3" modelid="Frame_QuickCardModel" id="Frame_QuickCard#4" hidden="0"/>
			<frameinstance posn="102 -3" modelid="Frame_QuickCardModel" id="Frame_QuickCard#5" hidden="0"/>
		</frame>
		
		<frame posn="0 -80">
			<quad posn="-4 4 -1" sizen="128 16" class="shadow"/>
			<quad sizen="120 8" bgcolor="EEE" class="highlight focus-0 valid-1" id="Quad_ButtonShowAll" ScriptEvents="1"/>
			<quad posn="0 0 1" sizen="1 8" bgcolor="393"/>
			<quad posn="3 -2 1" sizen="4 4" style="Icons64x64_1" substyle="TrackInfo" colorize="393"/>
			<label posn="9 -4 1" valign="center2" class="main-font" text="We currently have             manialinks in our database. Click here to show them."/>
			<label posn="36.25 -4.1 1" halign="center" valign="center2" style="TextButtonNav" textsize="3" textcolor="070" id="Label_DataLinksCount"/>
		</frame>
		
		<frame posn="0 -91">
			<label valign="center2" class="separator-text" text="Settings"/>
			<frame posn="0 -3">
				<quad posn="-4 4 -1" sizen="67 16" class="shadow"/>
				<quad sizen="59 8" bgcolor="EEE" class="highlight ignore focus-0 valid-1" id="Quad_SetThumbnailButton" ScriptEvents="1"/>
				<quad posn="2 -2 1" sizen="4 4" style="Icons64x64_1" substyle="Check" id="Quad_SetThumbnailChk"/>
				<label posn="8 -4 1" valign="center2" class="main-font" text="Display manialink thumbnails"/>
			</frame>
			<frame posn="61 -3">
				<quad posn="-4 4 -1" sizen="67 16" class="shadow"/>
				<quad sizen="59 8" bgcolor="EEE" class="highlight ignore focus-0 valid-1" id="Quad_SetDynamicButton" ScriptEvents="1"/>
				<quad posn="2 -2 1" sizen="4 4" style="Icons64x64_1" substyle="Check" id="Quad_SetDynamicChk"/>
				<label posn="8 -4 1" valign="center2" class="main-font" text="Dynamic text input"/>
			</frame>
			<frame posn="0 -13">
				<quad posn="-4 4 -1" sizen="67 16" class="shadow"/>
				<quad sizen="59 8" bgcolor="EEE" class="highlight ignore focus-0 valid-1" id="Quad_SetPreviewButton" ScriptEvents="1"/>
				<quad posn="2 -2 1" sizen="4 4" style="Icons64x64_1" substyle="Check" id="Quad_SetPreviewChk"/>
				<label posn="8 -4 1" valign="center2" class="main-font" text="Show manialink preview image"/>
			</frame>
		</frame>
	</frame>
	
	<frame id="Frame_PageResults" hidden="1">
		<label posn="0 -47" valign="center2" class="separator-text" id="Label_ResultsHeader"/>
		
		<frame id="Frame_ResultCards" posn="0 -50">
			<frameinstance posn="0 0" modelid="Frame_ResultCardModel" id="Frame_ResultCard#0" hidden="1"/>
			<frameinstance posn="0 -12" modelid="Frame_ResultCardModel" id="Frame_ResultCard#1" hidden="1"/>
			<frameinstance posn="0 -24" modelid="Frame_ResultCardModel" id="Frame_ResultCard#2" hidden="1"/>
			<frameinstance posn="0 -36" modelid="Frame_ResultCardModel" id="Frame_ResultCard#3" hidden="1"/>
			<frameinstance posn="0 -48" modelid="Frame_ResultCardModel" id="Frame_ResultCard#4" hidden="1"/>
			<frameinstance posn="0 -60" modelid="Frame_ResultCardModel" id="Frame_ResultCard#5" hidden="1"/>
			<frameinstance posn="0 -72" modelid="Frame_ResultCardModel" id="Frame_ResultCard#6" hidden="1"/>
			<frameinstance posn="0 -84" modelid="Frame_ResultCardModel" id="Frame_ResultCard#7" hidden="1"/>
			<frameinstance posn="0 -96" modelid="Frame_ResultCardModel" id="Frame_ResultCard#8" hidden="1"/>
			<frameinstance posn="0 -108" modelid="Frame_ResultCardModel" id="Frame_ResultCard#9" hidden="1"/>
		</frame>
		
		<frame id="Frame_PageNavigation" posn="60 -171.5" hidden="1">
			<quad posn="-20 4 -1" sizen="40 14" class="shadow"/>
			
			<frame id="Frame_NavButtonPrev" hidden="1">
				<quad posn="-11" sizen="12 6" halign="center" bgcolor="EEE" class="highlight focus-1 valid-1 nav" id="Quad_NavButtonPrev" ScriptEvents="1"/>
				<label posn="-11 -3" halign="center" valign="center2" class="main-font" text="<<<"/>
			</frame>
			
			<quad posn="0" sizen="34 6" halign="center" bgcolor="EEE"/>
			<label posn="0 -3" scale="1.2" halign="center" valign="center2" class="main-font" id="Label_NavPageCounter"/>
			
			<frame id="Frame_NavButtonNext" hidden="1">
				<quad posn="11" sizen="12 6" halign="center" bgcolor="EEE" class="highlight focus-1 valid-1 nav" id="Quad_NavButtonNext" ScriptEvents="1"/>
				<label posn="11 -3" halign="center" valign="center2" class="main-font" text=">>>"/>
			</frame>
		</frame>
		
		<frame id="Frame_ResultError" posn="0 -50" hidden="1">
			<quad posn="-4 4 -1" sizen="128 16" class="shadow"/>
			<quad sizen="120 8" bgcolor="EEE"/>
			<quad posn="0 0 1" sizen="1 8" bgcolor="F44"/>
			<quad posn="1 0 1" sizen="8 8" style="Icons64x64_1" substyle="QuitRace" colorize="F44"/>
			<label posn="9 -4 1" sizen="109 8" valign="center2" textsize="1" textcolor="000" autonewline="1" maxline="2" id="Label_ErrorMessage" text="???"/>
		</frame>
		
		<frame id="Frame_CommandPass" posn="0 -50" hidden="1">
			<quad posn="-4 4 -1" sizen="128 16" class="shadow"/>
			<quad sizen="120 8" bgcolor="EEE"/>
			<quad posn="0 0 1" sizen="1 8" bgcolor="393"/>
			<quad posn="3 -2 1" sizen="4 4" style="Icons64x64_1" substyle="TrackInfo" colorize="393"/>
			<label posn="9 -4 1" sizen="109 8" valign="center2" textsize="1" textcolor="000" autonewline="1" maxline="2" id="Label_CommandMessage" text="???"/>
		</frame>
	</frame>
</frame>
</frame>

<script><!--
// --------------------------------------------- //
//  FINDME: MANIALINK SEARCH ENGINE by domino54  //
//  script version: 2015-08-17                   //
// --------------------------------------------- //

/**
 *	This manialink allows users to browse stored database with
 *	external manialinks adderesses using search bar.
 */

#RequireContext CMlScript

#Const	Version			"2015-08-17"
#Const	ScriptName		"FindMe.Script.txt"

#Include "AnimLib" as AL
#Include "MathLib" as ML
#Include "TextLib" as TL

// ---------------------------------- //
// Constants
// ---------------------------------- //
/// Url of preview images
#Const C_PreviewImagesCatalog "http://dominolink.aq.pl/findme/images/"

#Const C_ResultsPerPage		10	///< Amount of links to show on page
#Const C_MinEntryLength		3	///< Minimal length of entry to get shown

#Const C_ToolBgColorNormal	<.93, .93, .93>		///< Normal color of card background
#Const C_ToolBgColorFocus	<1., 1., 1.>		///< Color of card background when in focus

#Const C_FindMeRefAddress	"findme"	///< Phrase added as reference to manialink url

#Const C_AnimOpacityDelay		500		///< Hovering time before displaying preview
#Const C_AnimOpacityDuration	250		///< Duration of the preview window opacity animation
#Const C_AnimPositionDuration	500		///< Duration of the preview window position animation

/// Text commands
#Const C_CommandsShowAll	["showall", "all", "a"]		///< Display all manialinks
#Const C_CommandsSetting	["setting", "set", "s"]		///< Change the settings
#Const C_CommandsRotation	["rotation", "rot", "r"]	///< Set the page oriantation

/// Available settigns
#Const C_CommandsSetAvailable ["dynamic", "thumbnails", "preview"]

/// Rotation easter eggs :)
#Const C_RotationCommands [
	"upside down" => 180.,
	"tilt" => 2.25,
	"clear" => 0.
]

/// Name tags on quick selection cards
#Const C_QuickCardNames ["skins", "maps", "competitions", "titles", "maniaflash", "objects"]

/// Icons at quick selection cards
#Const C_QuickCardStyles [
	["Icons64x64_1", "Opponents"],
	["Icons128x128_1", "United"],
	["Icons64x64_1", "OfficialRace"],
	["ManiaPlanetMainMenu", "IconStore"],
	["UIConstructionBullet_Buttons", "RootMotionMode"],
	["UIConstruction_Buttons2", "GhostBlocks"]
]

/// Code
#Const C_Code [127, 127, 31, 31, 65, 109, 65, 109, 18, 10]

#Const C_KeyNameToChar ["Space" => " ", "Numpad0" => "0", "Numpad1" => "1", "Numpad2" => "2", "Numpad3" => "3", "Numpad4" => "4", "Numpad5" => "5", "Numpad6" => "6", "Numpad7" => "7", "Numpad8" => "8", "Numpad9" => "9", "NumpadAdd" => "+", "NumpadSubstract" => "-", "NumpadDivide" => "/", "NumpadMultiply" => "*", "Decimal" => ","]

// ---------------------------------- //
// Manialink start
// ---------------------------------- //
***StartManialink***
***
// Global frame
declare Frame_Global <=> (Page.GetFirstChild("Frame_Global") as CMlFrame);

// ---------------------------------- //
// Load elements
declare Entry_Omnibox			<=> (Page.GetFirstChild("Entry_Omnibox")		as CMlEntry);
declare Quad_ClearOmnibox		<=> (Page.GetFirstChild("Quad_ClearOmnibox")	as CMlQuad);
declare Quad_MenuBarColorBg		<=> (Page.GetFirstChild("Quad_MenuBarColorBg")	as CMlQuad);

// Homepage
declare Frame_PageHome			<=> (Page.GetFirstChild("Frame_PageHome")		as CMlFrame);
declare Label_DataLinksCount	<=> (Page.GetFirstChild("Label_DataLinksCount")	as CMlLabel);
declare Quad_SetThumbnailChk	<=> (Page.GetFirstChild("Quad_SetThumbnailChk")	as CMlQuad);
declare Quad_SetDynamicChk		<=> (Page.GetFirstChild("Quad_SetDynamicChk")	as CMlQuad);
declare Quad_SetPreviewChk		<=> (Page.GetFirstChild("Quad_SetPreviewChk")	as CMlQuad);

// Results page
declare Frame_PageResults		<=> (Page.GetFirstChild("Frame_PageResults")	as CMlFrame);
declare Label_ResultsHeader		<=> (Page.GetFirstChild("Label_ResultsHeader")	as CMlLabel);
declare Frame_PageNavigation	<=> (Page.GetFirstChild("Frame_PageNavigation")	as CMlFrame);
declare Frame_NavButtonPrev		<=> (Page.GetFirstChild("Frame_NavButtonPrev")	as CMlFrame);
declare Frame_NavButtonNext		<=> (Page.GetFirstChild("Frame_NavButtonNext")	as CMlFrame);
declare Label_NavPageCounter	<=> (Page.GetFirstChild("Label_NavPageCounter")	as CMlLabel);

// Result cards
declare CMlFrame[] Frame_ResultCards;
for (I, 0, C_ResultsPerPage - 1) Frame_ResultCards.add((Page.GetFirstChild("Frame_ResultCard#"^I) as CMlFrame));

// Error message
declare Frame_ResultError	<=> (Page.GetFirstChild("Frame_ResultError")	as CMlFrame);
declare Label_ErrorMessage	<=> (Page.GetFirstChild("Label_ErrorMessage")	as CMlLabel);

// Command pass
declare Frame_CommandPass		<=> (Page.GetFirstChild("Frame_CommandPass")	as CMlFrame);
declare Label_CommandMessage	<=> (Page.GetFirstChild("Label_CommandMessage")	as CMlLabel);

// Address tooltip
declare Frame_AddressTooltip	<=> (Page.GetFirstChild("Frame_AddressTooltip")	as CMlFrame);
declare Label_AddressText		<=> (Page.GetFirstChild("Label_AddressText")	as CMlLabel);

// Preview
declare Frame_PreviewWindow		<=> (Page.GetFirstChild("Frame_PreviewWindow")		as CMlFrame);
declare Quad_ManialinkPreview	<=> (Page.GetFirstChild("Quad_ManialinkPreview")	as CMlQuad);
declare Quad_PreviewBackground	<=> (Page.GetFirstChild("Quad_PreviewBackground")	as CMlQuad);
declare Quad_PreviewArrow		<=> (Page.GetFirstChild("Quad_PreviewArrow")		as CMlQuad);

declare CMlFrame[] Frame_QuickCards;
for (I, 0, C_QuickCardNames.count - 1) {
	Frame_QuickCards.add((Page.GetFirstChild("Frame_QuickCard#"^I) as CMlFrame));
	declare Label_ResultCardTitle <=> (Frame_QuickCards[I].GetFirstChild("Label_ResultCardTitle") as CMlLabel);
	Label_ResultCardTitle.SetText(C_QuickCardNames[I]);
}

for (I, 0, C_QuickCardStyles.count - 1) {
	declare Quad_QuickCardIcon <=> (Frame_QuickCards[I].GetFirstChild("Quad_QuickCardIcon") as CMlQuad);
	Quad_QuickCardIcon.Style = C_QuickCardStyles[I][0];
	Quad_QuickCardIcon.Substyle = C_QuickCardStyles[I][1];
}

// ---------------------------------- //
// Variables
declare Text	Last_OmniboxValue;	///< Previous searched question
declare Boolean	IsCommand;			///< True if typed question is command
declare Boolean	JustStarted;		///< Used to restore previous search page

Last_OmniboxValue = "!";	///< Allows to print home page
JustStarted = True;			///< Allows to restore last search page

// Generate data base
declare DataBase = CreateDataBase();

// Home page
Label_DataLinksCount.SetText(TL::ToText(DataBase.count));

// Matching data
declare Text[][Text]		ExistsAtLeastOnce;	///< Ids of data, where all searched words exists at least once
declare Integer[Integer]	MatchCount;			///< Number of matching words found in each data
declare Integer[]			MatchingData;		///< Data matching searched question in most matches order

// Pages
declare Integer PagesCurrentNb	= 1;	///< Number of current page
declare Integer PagesPreviousNb	= 0;	///< Number of previous page
declare Integer PagesAllCount	= 1;	///< Count of all pages

// ---------------------------------- //
// Animations
declare Integer	WindowAnimStartTime;	///< Start time of preview window position animation
declare Real	WindowAnimPrevPosY;		///< Previous preview window position
declare Real	WindowAnimTargetPosY;	///< Target preview window position

declare Integer WindowAnimOpacityTime;		///< Start time of preview window opacity animation
declare Real	WindowAnimPrevOpacity;		///< Previous preview window opacity
declare Real	WindowAnimTargetOpacity;	///< Target preview window opacity

// ---------------------------------- //
// Persistent settings
declare persistent Text		Persistent_FindMe_LastSearch	for Page;			///< Last search omnibox value
declare persistent Integer	Persistent_FindMe_LastPage		for Page;			///< Last search page

// Restore previous search
if (Persistent_FindMe_LastSearch != "") Entry_Omnibox.Value = Persistent_FindMe_LastSearch;

// Settings
declare persistent Boolean	Persistent_FindMe_DynamicInput	for Page = True;	///< Use dynamic search
declare persistent Boolean	Persistent_FindMe_Thumbnails	for Page = True;	///< Display thumbnails
declare persistent Boolean	Persistent_FindMe_PreviewImg	for Page = True;	///< Show preview window

// Icons
Quad_SetThumbnailChk	.StyleSelected = Persistent_FindMe_Thumbnails;
Quad_SetDynamicChk		.StyleSelected = Persistent_FindMe_DynamicInput;
Quad_SetPreviewChk		.StyleSelected = Persistent_FindMe_PreviewImg;
***

// ---------------------------------- //
// Global loop
// ---------------------------------- //
***Yield***
***
+++Animations+++

// ---------------------------------- //
// Events management
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// Mouse click
	if (Event.Type == CMlEvent::Type::MouseClick) {
		// ---------------------------------- //
		// Navigation
		switch (Event.ControlId) {
			// Previous page
			case "Quad_NavButtonPrev" : {
				if (PagesCurrentNb > 1) PagesCurrentNb -= 1;
			}
			// Next page
			case "Quad_NavButtonNext" : {
				if (PagesCurrentNb < PagesAllCount) PagesCurrentNb += 1;
			}
			// Show all manialinks
			case "Quad_ButtonShowAll" : {
				Entry_Omnibox.Value = "/"^C_CommandsShowAll[0];
			}
			// Clear entry
			case "Quad_ClearOmnibox" : {
				Entry_Omnibox.Value = "";
			}
			// Check thumbnail display
			case "Quad_SetThumbnailButton" : {
				Persistent_FindMe_Thumbnails = !Persistent_FindMe_Thumbnails;
				Quad_SetThumbnailChk.StyleSelected = Persistent_FindMe_Thumbnails;
			}
			// Check dynamic inputs
			case "Quad_SetDynamicButton" : {
				Persistent_FindMe_DynamicInput = !Persistent_FindMe_DynamicInput;
				Quad_SetDynamicChk.StyleSelected = Persistent_FindMe_DynamicInput;
			}
			// Check preview visibility
			case "Quad_SetPreviewButton" : {
				Persistent_FindMe_PreviewImg = !Persistent_FindMe_PreviewImg;
				Quad_SetPreviewChk.StyleSelected = Persistent_FindMe_PreviewImg;
			}
		}
		
		//  Sound
		if (Event.Control.HasClass("valid-1")) Audio.PlaySoundEvent(CAudioManager::ELibSound::Valid, 1, 0.);
		
		// ---------------------------------- //
		// Click result
		if (Event.Control.HasClass("result")) {
			for (I, 0, C_ResultsPerPage - 1) {
				if (Frame_ResultCards[I].Controls.exists(Event.Control)) {
					declare ResultLink = DataBase[MatchingData[(PagesCurrentNb - 1) * C_ResultsPerPage + I]][1];
					ResultLink = AddReferenceCode(ResultLink);
					OpenLink(ResultLink, CMlScript::LinkType::ManialinkBrowser);
				}
			}
		}
		
		// Click quick card
		if (Event.Control.HasClass("quick")) {
			for (I, 0, C_QuickCardNames.count - 1) {
				if (Frame_QuickCards[I].Controls.exists(Event.Control)) {
					Entry_Omnibox.Value = C_QuickCardNames[I];
				}
			}
		}
		
		// Buttons highlight
		if (Event.Control.HasClass("highlight") && !Event.Control.HasClass("ignore")) {
			declare Quad <=> (Event.Control as CMlQuad);
			if (PagesCurrentNb == 1 || PagesCurrentNb == PagesAllCount)
				Quad.BgColor = C_ToolBgColorNormal;
		}
	}
	// ---------------------------------- //
	// Mouse over
	else if (Event.Type == CMlEvent::Type::MouseOver) {
		//  Sound
		if (Event.Control.HasClass("focus-0")) Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 0, 0.);
		if (Event.Control.HasClass("focus-1")) Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 1, 0.);
		
		// Buttons highlight
		if (Event.Control.HasClass("highlight")) {
			declare Quad <=> (Event.Control as CMlQuad);
			Quad.BgColor = C_ToolBgColorFocus;
		}
		
		if (Event.Control.HasClass("result")) {
			for (I, 0, C_ResultsPerPage - 1) {
				if (Frame_ResultCards[I].Controls.exists(Event.Control)) {
					declare Index = MatchingData[(PagesCurrentNb - 1) * C_ResultsPerPage + I];
					
					// ---------------------------------- //
					// Show address
					declare ResultLink = DataBase[Index][1];
					ResultLink = AddReferenceCode(ResultLink);
					Label_AddressText.SetText(ResultLink);
					Frame_AddressTooltip.Show();
					
					// ---------------------------------- //
					// Display preview window
					if (Persistent_FindMe_PreviewImg && DataBase[Index].count >= 5) {
						// Set preview image
						Quad_ManialinkPreview.ImageUrl = C_PreviewImagesCatalog^DataBase[Index][4];
						
						// Start animation
						WindowAnimStartTime		= Now;
						WindowAnimTargetPosY	= Event.Control.AbsolutePosition.Y + 12.5;
						
						// Switch position instantly
						if (Quad_ManialinkPreview.Opacity < .01) {
							Frame_PreviewWindow.RelativePosition.Y = WindowAnimTargetPosY;
							WindowAnimPrevPosY = WindowAnimTargetPosY;
						}
						// Animate from current position
						else WindowAnimPrevPosY = Frame_PreviewWindow.RelativePosition.Y;
						
						// Show preview window
						if (Quad_ManialinkPreview.Opacity < .01) WindowAnimOpacityTime = Now + C_AnimOpacityDelay;
						else WindowAnimOpacityTime = Now;
						WindowAnimPrevOpacity	= Quad_ManialinkPreview.Opacity;
						WindowAnimTargetOpacity	= 1.;
					}
				}
			}
		}
	}
	// ---------------------------------- //
	// Mouse out
	else if (Event.Type == CMlEvent::Type::MouseOut) {
		// Buttons highlight
		if (Event.Control.HasClass("highlight")) {
			declare Quad <=> (Event.Control as CMlQuad);
			Quad.BgColor = C_ToolBgColorNormal;
		}
		
		// ---------------------------------- //
		// Hide address
		if (Event.Control.HasClass("result")) {
			Frame_AddressTooltip.Hide();
			
			// Hide preview window
			WindowAnimOpacityTime	= Now;
			WindowAnimPrevOpacity	= Quad_ManialinkPreview.Opacity;
			WindowAnimTargetOpacity	= 0.;
		}
	}
	// ---------------------------------- //
	// Key press / Dynamic inputs
	else if (Event.Type == CMlEvent::Type::KeyPress && Persistent_FindMe_DynamicInput) {
		// Select all
		if (Event.KeyName == "SelectAll") {
			Entry_Omnibox.StartEdition();
			Entry_Omnibox.Value = RemoveLastCharacter(Entry_Omnibox.Value);
		}
		// Clear omnibox
		if (Event.KeyName == "Cut" || Event.KeyName == "Delete") {
			Entry_Omnibox.Value = "";
		}
		// Backspace
		else if (Event.KeyName == "Back") {
			Entry_Omnibox.Value = RemoveLastCharacter(Entry_Omnibox.Value);
		}
		// Start command
		else if (Event.KeyName == "Period") {
			Entry_Omnibox.Value ^= "/";
		}
		// Type text
		else if (TL::Length(Event.KeyName) == 1) {
			Entry_Omnibox.Value ^= TL::ToLowerCase(Event.KeyName);
		}
		// Other
		else if (C_KeyNameToChar.existskey(Event.KeyName)) {
			Entry_Omnibox.Value ^= C_KeyNameToChar[Event.KeyName];
		}
	}
	// ---------------------------------- //
	//  Menu navigation
	else if (Event.Type == CMlEvent::Type::MenuNavigation) {
		// Escape
		if (Event.MenuNavAction == CMlEvent::EMenuNavAction::Cancel) {
			BrowserQuit();
		}
		// Enter - open first result
		else if (Event.MenuNavAction == CMlEvent::EMenuNavAction::Select && MatchingData.count > 0) {
			declare ResultLink = DataBase[MatchingData[0]][1];
			ResultLink = AddReferenceCode(ResultLink);
			OpenLink(ResultLink, CMlScript::LinkType::ManialinkBrowser);
		}
		// Page up
		else if (Event.MenuNavAction == CMlEvent::EMenuNavAction::PageUp && PagesCurrentNb > 1) {
			PagesCurrentNb -= 1;
		}
		// Page down
		else if (Event.MenuNavAction == CMlEvent::EMenuNavAction::PageDown && PagesCurrentNb < PagesAllCount) {
			PagesCurrentNb += 1;
		}
	}
}

// ---------------------------------- //
// Omnibox value change
if (Last_OmniboxValue != Entry_Omnibox.Value) {
	Last_OmniboxValue = Entry_Omnibox.Value;
	Frame_ResultError.Hide();
	
	// Reset everything
	ExistsAtLeastOnce	.clear();
	MatchCount			.clear();
	MatchingData		.clear();
	
	// Hide everything
	Frame_PageResults		.Hide();
	Frame_PageHome			.Hide();
	Quad_ClearOmnibox		.Hide();
	Frame_PageNavigation	.Hide();
	Frame_AddressTooltip	.Hide();
	Frame_CommandPass		.Hide();
	
	// Restore saved page
	if (JustStarted && Persistent_FindMe_LastPage > 0) {
		PagesCurrentNb = Persistent_FindMe_LastPage;
		JustStarted = False;
	}
	
	// New search
	else PagesCurrentNb = 1;
	
	PagesPreviousNb = 0;	///< Allows to print page
	
	// Hide all result cards
	foreach (Frame in Frame_ResultCards) {
		Frame.Hide();
	}
	
	// Hide preview window
	WindowAnimOpacityTime	= Now;
	WindowAnimPrevOpacity	= Quad_ManialinkPreview.Opacity;
	WindowAnimTargetOpacity	= 0.;
	
	// ---------------------------------- //
	// Check if search is command
	IsCommand = False;
	declare Cmd = TL::Split("/", Entry_Omnibox.Value);
	if (Cmd.count >= 2 && Cmd[0] == "") IsCommand = True;
	
	// ---------------------------------- //
	// Commands
	if (IsCommand) {
		Frame_PageResults.Show();
		Quad_ClearOmnibox.Show();
		Label_ResultsHeader.SetText(_("Command input"));
		
		declare CommandParam = TL::Split(" ", TL::SubString(Entry_Omnibox.Value, 1, TL::Length(Entry_Omnibox.Value) - 1));
		log(CommandParam);
		
		// ---------------------------------- //
		// Show all links
		if (C_CommandsShowAll.exists(CommandParam[0])) {
			for (I, 0, DataBase.count - 1) MatchingData.add(I);
			Label_ResultsHeader.SetText(TL::Compose(_("Displaying all listed manialinks (%1)"), TL::ToText(MatchingData.count)));
		}
		
		// ---------------------------------- //
		// Change the settings
		else if (C_CommandsSetting.exists(CommandParam[0])) {
			+++SettingCommand+++
		}
		
		// ---------------------------------- //
		//  Command unknown
		else {
			Label_ErrorMessage.SetText(TL::Compose(_("Command \"%1\" doesn't exists."), CommandParam[0]));
			Frame_ResultError.Show();
		}
	}
	
	// ---------------------------------- //
	// Find matching keys
	else if (Entry_Omnibox.Value != "") {
		Frame_PageResults.Show();
		Quad_ClearOmnibox.Show();
		
		if (TL::Length(Entry_Omnibox.Value) >= C_MinEntryLength) ---SearchIn---
		
		// Results header
		if (MatchingData.count == 1) Label_ResultsHeader.SetText("Found 1 matching link");
		else Label_ResultsHeader.SetText(TL::Compose("Found %1 matching links", TL::ToText(MatchingData.count)));
	}
	
	// ---------------------------------- //
	// Home page (omnibox empty)
	else Frame_PageHome.Show();
	
	// ---------------------------------- //
	// Save last search
	Persistent_FindMe_LastSearch = Entry_Omnibox.Value;
	
	// ---------------------------------- //
	// Prepare key to be displayed
	if (MatchingData.count > 0) PagesAllCount = ML::CeilingInteger((MatchingData.count - 1) * .1);
	else PagesAllCount = 1;
	
	// Upside down?
	if (C_RotationCommands.existskey(Entry_Omnibox.Value))
		Frame_Global.RelativeRotation = C_RotationCommands[Entry_Omnibox.Value];
	
	// Show navigation
	if (PagesAllCount > 1) Frame_PageNavigation.Show();
}

// ---------------------------------- //
// Show current results page
if (PagesPreviousNb != PagesCurrentNb) {
	PagesPreviousNb = PagesCurrentNb;
	
	// Page Navigation
	Frame_NavButtonPrev.Visible = (PagesCurrentNb != 1);
	Frame_NavButtonNext.Visible = (PagesCurrentNb != PagesAllCount);
	Label_NavPageCounter.SetText(TL::Compose("%1 / %2", TL::ToText(PagesCurrentNb), TL::ToText(PagesAllCount)));
	
	// Save current page
	Persistent_FindMe_LastPage = PagesCurrentNb;
	
	// Hide all result cards
	foreach (Frame in Frame_ResultCards) {
		Frame.Hide();
	}
	
	// ---------------------------------- //
	// Display matching results
	if (MatchingData.count > 0) {
		for (I, (PagesCurrentNb - 1) * C_ResultsPerPage, PagesCurrentNb * C_ResultsPerPage - 1) {
			if (I < MatchingData.count) {
				declare Index = I - (PagesCurrentNb - 1) * C_ResultsPerPage;
				declare Data = DataBase[MatchingData[I]];
				
				// Show result card
				Frame_ResultCards[Index].Show();
				
				// Set card title
				declare Label_ResultCardTitle <=> (Frame_ResultCards[Index].GetFirstChild("Label_ResultCardTitle") as CMlLabel);
				Label_ResultCardTitle.SetText(TL::StripFormatting(Data[0]));
				
				// Set card URL text
				declare Label_ResultCardURL <=> (Frame_ResultCards[Index].GetFirstChild("Label_ResultCardURL") as CMlLabel);
				Label_ResultCardURL.SetText(Data[1]);
				
				// Set card description
				declare Label_ResultCardDesc <=> (Frame_ResultCards[Index].GetFirstChild("Label_ResultCardDesc") as CMlLabel);
				Label_ResultCardDesc.SetText(TL::StripFormatting(Data[2]));
				
				declare Quad_ResultCardPreview <=> (Frame_ResultCards[Index].GetFirstChild("Quad_ResultCardPreview") as CMlQuad);
				if (Data.count >= 5 && Persistent_FindMe_Thumbnails)
					Quad_ResultCardPreview.ImageUrl = C_PreviewImagesCatalog^Data[4];
				else Quad_ResultCardPreview.ImageUrl = "";
			}
		}
	}
	
	// ---------------------------------- //
	// Not found message
	else {
		if (!IsCommand && Entry_Omnibox.Value != "") {
			if (TL::Length(Entry_Omnibox.Value) < C_MinEntryLength)
				Label_ErrorMessage.SetText(TL::Compose(_("Phrase \"$<%1$>\" is too short. Enter phrase at least %2 characters long."), Entry_Omnibox.Value, TL::ToText(C_MinEntryLength)));
			else
				Label_ErrorMessage.SetText(TL::Compose(_("No links found for \"$<%1$>\"."), Entry_Omnibox.Value));
			Frame_ResultError.Show();
		}
	}
}
***

// ---------------------------------- //
// Search the database
// ---------------------------------- //
***SearchIn***
***
// Split typed in words
declare SplitOmnibox = TL::Split(" ", Entry_Omnibox.Value);

// Remove repeated words from array
declare Integer[Text] WordExistNb;
foreach (Word in SplitOmnibox) {
	if (WordExistNb.existskey(Word)) {
		WordExistNb[Word] += 1;
		if (WordExistNb[Word] > 1) {
			WordExistNb[Word] = 1;
			SplitOmnibox.remove(Word);
		}
	} else WordExistNb[Word] = 1;
}

// Browse whole database
foreach (DataId => Data in DataBase) {
	// Split key into attributes
	foreach (Attributes in Data) {
		// Split attributes into words
		declare SplitAttribute = TL::Split(" ", Attributes);
		
		// Compare each omnibox word with each attribute word
		foreach (WordAttribute in SplitAttribute) {
		foreach (WordOmnibox in SplitOmnibox) {
			// Word has been found
			if (TL::Find(WordOmnibox, WordAttribute, False, False)) {
				// Create array if not exists
				if (!ExistsAtLeastOnce.existskey(Data[1])) {
					ExistsAtLeastOnce[Data[1]] = [""];
					ExistsAtLeastOnce[Data[1]].remove("");
				}
				// Add word to array
				if (!ExistsAtLeastOnce[Data[1]].exists(WordOmnibox))
					ExistsAtLeastOnce[Data[1]].add(WordOmnibox);
				// How many times all words appear in data
				if (!MatchCount.existskey(DataId)) MatchCount[DataId] = 1;
				else MatchCount[DataId] += 1;
			}
		} }
	}
}

// Sort matches from most to less
for (I, 0, DataBase.count - 1) if (MatchCount.existskey(I)) MatchCount[I] *= -1;
MatchCount = MatchCount.sort();

// Add results in their order
foreach (IndexMatch => Match in MatchCount) {
	// Data must contain every searched word at least once
	if (ExistsAtLeastOnce[DataBase[IndexMatch][1]].count == SplitOmnibox.count) {
		MatchingData.add(IndexMatch);
	}
}
***

// ---------------------------------- //
// Animations processing
// ---------------------------------- //
***Animations***
***
// ---------------------------------- //
// Preview window animation - change position
if (Now <= WindowAnimStartTime + C_AnimPositionDuration) {
	declare T = ML::ToReal(Now - WindowAnimStartTime);
	declare B = WindowAnimPrevPosY;
	declare C = WindowAnimTargetPosY - WindowAnimPrevPosY;
	Frame_PreviewWindow.RelativePosition.Y = AL::Ease("EaseOutCirc", T, B, C, ML::ToReal(C_AnimPositionDuration));
}

// ---------------------------------- //
// Preview window animation - opacity change
if (Now <= WindowAnimOpacityTime + C_AnimOpacityDuration) {
	declare T = ML::ToReal(Now - WindowAnimOpacityTime);
	declare B = WindowAnimPrevOpacity;
	declare C = WindowAnimTargetOpacity - WindowAnimPrevOpacity;
	declare Opacity = AL::Ease("EaseInOutSine", T, B, C, ML::ToReal(C_AnimOpacityDuration));
	Quad_ManialinkPreview	.Opacity = Opacity;
	Quad_PreviewBackground	.Opacity = Opacity;
	Quad_PreviewArrow		.Opacity = Opacity;
}
***

// ---------------------------------- //
// Setting command
// ---------------------------------- //
***SettingCommand***
***
// No setting name
if (CommandParam.count == 1) {
	Label_ErrorMessage.SetText(TL::Compose(_("Usage: /%1 <setting name> <value>"), CommandParam[0]));
	Frame_ResultError.Show();
}
// No setting value
else if (CommandParam.count == 2) {
	if (C_CommandsSetAvailable.exists(CommandParam[1]))
		Label_ErrorMessage.SetText(TL::Compose(_("Usage: /%1 %2 <value>"), CommandParam[0], CommandParam[1]));
	else
		Label_ErrorMessage.SetText(TL::Compose(_("Setting \"%1\" doesn't exist!"), CommandParam[1]));
	Frame_ResultError.Show();
}
// Change setting
else if (CommandParam.count == 3) {
	// Wrong boolean
	if (CommandParam[2] != "0" && CommandParam[2] != "1") {
		Label_ErrorMessage.SetText(_("The boolean must be \"0\" or \"1\"!"));
		Frame_ResultError.Show();
	} else {
		Label_CommandMessage.SetText(TL::Compose(_("The setting \"%1\" has been changed to \"%2\"!"), CommandParam[1], CommandParam[2]));
		Frame_CommandPass.Show();
		
		// Change the setting
		declare Boolean Setting = IntegerToBoolean(TL::ToInteger(CommandParam[2]));
		switch (CommandParam[1]) {
			case "dynamic"		: Persistent_FindMe_DynamicInput	= Setting;
			case "thumbnails"	: Persistent_FindMe_Thumbnails		= Setting;
			case "preview"		: Persistent_FindMe_PreviewImg		= Setting;
		}
	}
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //	

// ---------------------------------- //
/** Add reference manialink code suffix for "findme"
 *
 *	@param	_ManialinkCode		Manialink code to add suffix
 *
 *	@return		Manialink with attached suffix
 */
Text AddReferenceCode(Text _ManialinkCode) {
	declare Text OutputMessage = _ManialinkCode;
	if (TL::Find("?", OutputMessage, False, False)) OutputMessage^= "&";
	else OutputMessage ^= "?";
	OutputMessage ^= "ref="^C_FindMeRefAddress;
	return OutputMessage;
}

// ---------------------------------- //
/** Remove last character from text
 *
 *	@param	_Text	Text to remove last character
 *
 *	@return		Text without last character
 */
Text RemoveLastCharacter(Text _Text) {
	return TL::SubString(_Text, 0, TL::Length(_Text) - 1);
}

// ---------------------------------- //
/** Convert integer to boolean
 *
 *	@param	_Integer	Integer to convert
 *
 *	@return		Boolean
 */
Boolean IntegerToBoolean(Integer _Integer) {
	return (_Integer == 1);
}

// ---------------------------------- //
/** Build DataBase #01
 *
 *	0 => Title
 *	1 => URL (id)
 *	2 => Description
 *	3 => Keywords
 *	4 => Image file name
 *
 *	@return		Database
 *
 *	Manialinks disabled by commands are temporary unavailable or permanently removed.
 */
Text[][] CreateDataBase() {
	return [
		["FindMe", "findme", "Search for many interesting manialinks!", "how to find list maniaexplore domino54 domino'54 dommy54 dommy'54", "findme.jpg"],
		["ManiaHome", "maniahome", "Your personal notifications and bookmarks page", "manager privacy settings", "home.jpg"],
		["ManiaPub", "maniapub", "Advertise your manialink here!", "publication tools publishing advertisement adverts ads how to do your manialink", "maniapub.jpg"],
		["ManiaFlash", "maniaflash", "Create your own channel in a few clicks", "publication tools how to create do make your manialink", "maniaflash.jpg"],
		["ManiaPlanet News", "maniaflash?maniaplanet-news", "Official news channel by Nadeo", "information from trackmania shootmania stadium canyon valley storm", "maniaplanet-news.jpg"],
		["Manialink styles", "styles", "List of all existing manialink elements styles", "nadeo eole how to create make your do manialink list quads labels gauges backgrounds", "styles.jpg"],
		["Browser homepage", "home", "Old ManiaPlanet 2 browser home site", "maniahome outdated of date maniapub publication publishing", "oldhome.jpg"],
		["DominoLive", "maniaflash?dominolive", "Check what's new at Dommy's side", "storm by news information domino54 pursuit trackmania shootmania invasion hunger games dominis gtx gaming town xeron", "dominolive.jpg"],
		["ManiaCalendar", "maniacalendar", "The source of upcoming ManiaPlanet events", "cups compete competitions competition toffe hubble zocka smurfscup community trackmania shootmania sm elite stadium storm canyon valley environment mixed mixing nascar cplay paragon esl speedball f1 gp rpg trial siege ryal obstacle combo battlepro Fusion Palteza mali ToffeSmurf Dore2Cuo Amelie iGn Mario edrm Ed Fox Deejay AwS Marius penta Some0ne K3 BossBravo esu Shortz HubbleSmurf Insects eSports Speed Aerosol", "maniacalendar.jpg"],
		["domino54", "domino54", "Title packs, crosshairs and more...", "tm sm gamemodes tricon studio horns titles packs by avatars master of the universe hunger games invasion dominis your lord pursuit trackmania shootmania findme gtx gaming town xeron dommy54 dommy'54", "domino54.jpg"],
		["MX Monthly Tracks Contest", "maniaflash?mtc", "Compete and send your best maps", "maniaexchange competitions compete cups canyon valley stadium maps tracks", "mtc.jpg"],
		["Stunters", "stunters", "Earn points by performing crazy stunts!", "tm trackmania gamemodes spaii titles packs canyon stadium by valley multienvironment", "stunters.jpg"],
		["Mr. DVD", "mr.dvd", "Skins and signs for TrackMania and ShootMania", "mods airships horns avatars music canyon valley stadium maps tracks titles packs", "mrdvd.jpg"],
		// ["Kripke", "kripke", "Kripkes manialink", "canyon stadium valley skins horns tracks avatars by maps"],
		["Obstacle", "obstacle", "Run across challenging obstacle maps", "sm gamemodes steeffeen titles packs shootmania storm objects blocks titishu titi-shu storm by timeattack", "obstacle.jpg"],
		["SpeedBall", "speedball", "Bring the ball to oppositing team's goalpost", "gamemodes shootmania sm title packs steeffeen titles packs objects blocks titishu titi-shu by storm handball", "speedball.jpg"],
		["TrackMania RPG", "trackmaniarpg", "Where racers become adventurers", "tm stadium by titles packs tracks objects blocks hawkger ziza maxi@031 maxi031 maps", "rpg.jpg"],
		["ManiaLoto", "manialoto", "Try your luck and win some planets!", "free money coppers hazard top'o'luck box'o'planets how to get where can i topoluck boxoplanets", "loto.jpg"],
		["Tetris", "tetris", "Play a classic game in your browser", "ftmarcel minigames oldschool 3d 2d games ft by manialinks marcel blocks", "tetris.jpg"],
		["TM-Jinzo", "tm-jinzo", "Find out stuff for creators (old N-Jin)", "njin n-jin tmjinzo tricon studio titles packs tm sm qm gtx gaming town xeron", "tmjinzo.jpg"],
		["R-Link", "r-link", "The manialinks directory", "rlink how to add my your list find search", "rlink.jpg"],
		["Stunning Screenshots Challenge", "stunningscreenshots", "Results of the latest SSC", "purification trackmania images photos shootmania sm nerpson nikooo26 cups competitions", "ssc.jpg"],
		["CPlay Tt.eSports", "maniaflash?cplay", "News covering ShootMania Permier Series", "thermaltake sm cups competitions compete elite dreammywow dreammyw0w zerax ze-rax narwak ward khan xtns!ve xtnsive extensive nickyaco reazon exr' streams", "cplay.jpg"],
		["Ze-Rax YouTube-Channel", "ze-rax", "Ze-Rax' best YouTube videos", "shootmania sm elite gtx gaming by town xeron storm zerax cplay.tt cplay.tv cartoonlink", "zerax.jpg"],
		["Zeraxex", "maniaflash?zeraxex", "Videos, pictures and more...", "shootmania elite sm gtx gaming town by xeron storm ze-raxex frags cplay.tt cplay.tv cartoonlink fragmovies", "zeraxex.jpg"],
		["Manialink Library Demo", "lib-manialink", "Checkout animations and tooltips, that can be added into your manialink", "eole by nadeo interesting how to do make create", "manialinklib.jpg"],
		["Smurfen.net", "maniaflash?smurfen", "News about Smurfen.net", "smurfscups shootmania tm trackmania sm toffe haagse canyon royal compete competitions how to get win planets hubblesm wohoohi woolookoligie", "smurfen.jpg"],
		["Paragon League", "maniaflash?paragonleague", "The eSports league by the Paragon Community", "elite sm clans clans teams siege combo battlepro shootmania storm cups competitions compete elite league kremsy lukas", "paragon.jpg"],
		["ManiaPlanet Official Store", "store", "Collection of various free items by Nadeo", "tm sm skins titles packs shootmania canyoncar valley stadium trackmania susu combo alienware stormman rabbits cart nations", "officialstore.jpg"],
		["TM News", "maniaflash?tmnews", "Weekly news-show covering everything TrackMania", "fbs frostbeule weekly race stadium valley canyon united forever nations", "tmnews.jpg"],
		["TrackMania Dirt", "tmdirt", "Official manialink of =RR= Dirt title pack", "titles packs stadium by", "tmdirt.jpg"],
		["Metoxys", "metoxys", "Various metoxys' tracks", "trackmania canyon by maps tracks", "metoxys.jpg"],
		["ESL TrackMania 2", "maniaflash?esltm2", "All news regarding the ESL scene, competitions and more about TrackMania", "cups competitions go4tm news streams information rpg go4trackmania", "esltm.jpg"],
		["mQuery", "mquery", "A bunch of maniascript manialink plugins", "keep it simple proni p.roni zocka php css js javascript", "mquery.jpg"],
		["Menu concept art", "menuartwork", "Alternate ManiaPlanet menu concept by N-Jin", "tmjinzo gtx gaming town xeron njin tm-jinzo menu design home", "menuconcept.jpg"],
		["Jump'n'Run", "jumpnrun", "Simple platformer game with level editor by Seeba", "seba mario minecraft steve 2d", "jumpnrun.jpg"],
		["Flighthigh", "flighthigh", "Amazing TrackMania solo campaigns by Flighthigh", "canyon valley titles packs tracks maps", "flighthigh.jpg"],
		["Storage Player", "storage", "Listen to some cool music", "free mp3 ogg songs domino54 domino'54 dommy54 dommy'54", "storage.jpg"],
		// ["BugSweeper", "bugsweeper", "Play classic Minesweeper game in bug edition", "2d games"],
		["Yoshi", "maniaflash?yoshi", "Sharing community projects", "yoshi-star", "yoshi.jpg"],
		["Nerpson's Manialink", "nerpson", "Discover all my work and creations in single manialink", "nikooo26 projects creations blog videos videomaker ManiaPlanet mediaplanet objects items mods tracks", "nerpson.jpg"],
		["Nerpson's Channel", "maniaflash?nerpson", "Channel with Nerpson news", "nikooo26 stunningscreenshots challenge shootmania trackmania sm information", "nerpsonch.jpg"],
		["Elite Statistics", "elite-stats", "Get all Elite statistics from official matches", "cups competitons willa information shootmania elite lasers rockets players teams matches hits eliminations accuracy total average", "elitestats.jpg"],
		["N-Jin (Alpha)", "n-jins", "The source of community creations", "creators njins tricon studio njins tm-jinzo tmjinzo gtx gaming town xeron", "njins.jpg"],
		["Zocka Manialink", "zockaml", "Zocka tracks and manialink concepts", "tm tracckmania maps proni p.roni tracks by ripple effect json cookies maniaplanet-style notifications", "zockaml.jpg"],
		["Under Nationwide Clouds", "unc-crew", "Page of the UNC Crew", "trackmania teams clans horns cars canyon skins avatars", "unccrew.jpg"],
		["Awesome Cars", "awesome", "Some nice skins", "canyoncar", "awesomecars.jpg"],
		// ["Planets (don't click this!)", "planets", "Trap your friends with style", "crashme how to trap troll your friend teammates"],
		["ManiaExplore", "explore", "Search for interesting manialinks and add your own to the catalog", "TheBigMiike list doryt thebigmike maniaexplore findme in categories", "explore.jpg"],
		["DivingDuck", "divingduck", "Many car models, skins and 3D objects", "tm trackmania DD_railway_system DD_railway_pack canyon titles packs cars", "divingduck.jpg"],
		["ManiaRevival", "revival", "CN.Team manialink by Rotsyx", "tm clans teams maps tracks trackmania canyon horns avatars skins cars", "revival.jpg"],
		["krapS Mania", "tmkraps", "Various cars and skins by krapS", "tm trackmania canyon stadium valley horns screenshots avatars", "kraps.jpg"],
		["Fantaribo", "fantaribo","High quality car skins", "tm trackmania HQ cars canyon common", "fantaribo.jpg"],
		["Doppler", "maniaflash?doppler", "Discover the lastest news about Doppler gamemode", "changelogs tm trackmania gamemodes competitions new servers nerpson nikooo26", "doppler.jpg"],
		["Zocka Newsfeed", "maniaflash?zocka", "Posts regarding Zocka ManiaScript and manialinks", "proni p.roni ripple effect json cookies maniaplanet-style notifications zockaml", "zockanews.jpg"],
		["fB's Weekly Race", "maniaflash?fbsweeklyrace", "1h Stadium endurance race every Saturday", "fbs tm frostbeule trackmania compete competitions", "weeklyrace.jpg"],
		["xrayjay's skins & objects", "maniaflash?xrayjay", "Skins and objects for all titles", "tm sm items shootmania trackmania embedable embeddable packs valley storm maps editors", "xrayjay.jpg"],
		["Mewin's Manialink", "mewinsml", "Proudly presented by Mewin site with some nice stuff", "shootmania sm gamemodes servers titles packs infection tricon studio ictf actf capture the flag horns avatars", "mewin.jpg"],
		["BCZ Akbalder's Manialink", "akbalder", "Content, SM gamemodes and minigames from Akbalder", "tm sm shootmania skins horns maps gamemodes canyoncar screenshots big crasher's crashers zone goalhunt jailbreak target tetris flood it by minesweeper connect four 4 quick manialink", "akbalder.jpg"],
		["Google Search", "google-search", "Search the web directly in ManiaPlanet", "nerpson nikooo26 internet", "google.jpg"],
		["Meuhmania", "meuhmanie", "News from Meuh (french)", "tm trackmania skins mods videos objects items", "meuhmania.jpg"],
		["TrackMania Manialink Styles", "exemple", "Browse available styles for your manialinks", "tm styles smurfs smurfen quads backgrounds icons text formatting labels", "exemple.jpg"],
		["Drop", "dropml", "Simple minigame by Zocka based on Drop web browser game", "zockaml minigames notch markus persson", "drop.jpg"],
		["Nascar Racing League", "maniaflash?nrt", "All information about Nascar Racing League and Stadium Racing Evolution", "NRL SRE tm trackmania cups events competitions titles packs multilaps", "nrl.jpg"],
		["TitlePack Center", "titlepack-center", "Browse various titles made by the community", "canyon stadium valley storm domino54 domino'54 dommy54 dommy'54", "titlepack-center.jpg"],
		["TrackMania 2 United Forever", "tmunited", "United campaign recreated with custom items by Adamkooo", "adamkooo2 titles packs multienvironment nations solo tracks maps", "united.jpg"]
	];
}
 
// ---------------------------------- //
// Main
// ---------------------------------- //	
main() {
	wait (LocalUser != Null);
	EnableMenuNavigation(True, False, Null, 0);
	---StartManialink---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>
