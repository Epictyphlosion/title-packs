<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="2" name="FindMe">
<timeout>0</timeout>
<quad posn="-160 90 -1" sizen="320 180" image="http://static.maniaplanet.com/manialinks/images/background.jpg"/>

<stylesheet>
	<style id="Entry_Omnibox" textsize="2" textcolor="FFF" textemboss="1" focusareacolor1="237" focusareacolor2="459"/>
	<style id="Label_ResultsHeader" textsize="1" textcolor="000"/>
	<style id="Label_ResultsPage" textsize="2" textcolor="000"/>
	<style id="Label_NavPageCounter" textsize="2" textcolor="FFF"/>
	<style id="Label_FooterText" sizen="0 0" halign="right" valign="center2" scale=".45" textcolor="444"/>
</stylesheet>

<frame posn="-40 48 1" id="Frame_Search">
	<quad posn="-10 -10 -1"  sizen="30 30" valign="center" style="ManiaPlanetLogos" substyle="IconPlanets" opacity="1"/>
	<quad posn="0 0 0" sizen="80 20" style="Bgs1" substyle="BgTitle3_3"/>
	<label posn="5 -7 1" valign="center2" style="BgMainMenuTitleHeader" text="Search" translate="1"/>
	<frame posn="5 -13 1" id="Frame_Omnibox">
		<entry posn="0 0 0" valign="center2" sizen="70 5" id="Entry_Omnibox"/>
		<quad posn="64.5 0 1" sizen="6 6" valign="center" style="Icons64x64_1" substyle="QuitRace" id="Quad_ClearOmnibox" ScriptEvents="1" hidden="1"/>
	</frame>
</frame>

<frame posn="-55 30 1" id="Frame_ResultsWindow">
	<quad posn="0 0 0" sizen="110 114" style="Bgs1" substyle="BgTitle3_3"/>
	<label posn="5 -5 1" sizen="100 4" valign="center2" id="Label_ResultsHeader"/>
	<quad posn="55 -7.5 1" halign="center" sizen="104 .25" bgcolor="444"/>
	<label posn="5 -10 1" sizen="125 116" scale=".8" maxline="29" id="Label_ResultsPage"/>
	
	<frame posn="55 -107 1" id="Frame_PageNavigation" hidden="1">
		<quad posn="-12 0 0" sizen="8 8" halign="center" valign="center" style="Icons64x64_1" substyle="ArrowDisabled"/>
		<quad posn="-12 0 1" sizen="8 8" halign="center" valign="center" style="Icons64x64_1" substyle="ArrowPrev" id="Quad_NavButtonPrev" ScriptEvents="1"/>
		<quad posn="12 0 0" sizen="8 8" halign="center" valign="center" style="Icons64x64_1" substyle="ArrowDisabled"/>
		<quad posn="12 0 1" sizen="8 8" halign="center" valign="center" style="Icons64x64_1" substyle="ArrowNext" id="Quad_NavButtonNext" ScriptEvents="1"/>
		<quad posn="0 0 0" sizen="15 6.5" halign="center" valign="center" style="Bgs1" substyle="BgPager"/>
		<label posn="0 0 1" sizen="14 7" halign="center" valign="center2" id="Label_NavPageCounter"/>
	</frame>
	
	<frame posn="5 -104 1" id="Frame_HomeButtons" hidden="1">
		<frame posn="0 0 0" id="Frame_BookmarkButton">
			<quad posn="2 -2.5 1" valign="center" sizen="6 6" style="BgRaceScore2" substyle="Fame"/>
			<label posn="0 0 0" style="CardButtonSmallS" text="     Bookmark" manialink="http://maniahome.maniaplanet.com/bookmarks/add/?url=findme&amp;name=FindMe%20-%20Search%20manialinks!"/>
		</frame>
		<label posn="43 0 0" halign="center" style="CardButtonSmallS" text="Show all pages" id="Label_ButtonShowAll" ScriptEvents="1"/>
	</frame>
	
	<label posn="105.5 -105.5" id="Label_FooterText" text="request your manialink" url="http://forum.maniaplanet.com/viewtopic.php?f=8&amp;t=30102"/>
	<label posn="105.5 -108" id="Label_FooterText" text="powered by domino54" manialink="domino54"/>
</frame>
<script><!--
/**
 *	Manialink search by domino54
 */

#RequireContext CMlScript

#Const	Version				"2015-01-01"
#Const	ScriptName			"FindMe.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_ResultsPerPage		10			///< Amount of links to show on page
#Const C_ShowAllCommand		"show all"	///< Text command to show all pages list
#Const C_MinEntryLength		3			///< Minimal length of entry to get shown

// ---------------------------------- //
/** Search DataBase #01
 *
 * [0 => Title, 1 => URL (id), 2 => Description, 3 => Keywords]
 */
#Const C_DataBase_01 [
	["FindMe", "findme", "Search for many interesting manialinks!", "how to find manialniks"],
	["ManiaHome", "maniahome", "Your personal notifications and bookmarks page", "manager privacy settings"],
	["ManiaPub", "maniapub", "Advertise your manialink here!", "publication tools publishing advertisement adverts ads how to do your manialink"],
	["ManiaFlash", "maniaflash", "Create your own channel in a few clicks", "publication tools how to create do make your manialink"],
	["ManiaPlanet News", "maniaflash?maniaplanet-news", "Official news channel by Nadeo", "information from"],
	["Manialink styles", "styles", "List of all existing manialink elements styles", "nadeo eole how to create make your do manialink list quads labels gauges backgrounds"],
	["Browser homepage", "home", "Old ManiaPlanet 2 browser home site", "maniahome outdated of date maniapub publication publishing"],
	["TitlePack Center", "titlepack-center", "Browse various title packs nade by the community", "canyon stadium valley storm titles packs domino54 dommy"],
	["DominoLive", "maniaflash?dominolive", "Check what's new at Dommy's side", "storm titles packs news information domino54 invasion hunger games"],
	["domino54", "domino54", "Title packs, crosshairs and more...", "horns titles packs avatars master of the universe your lord"],
	["MX Monthly Tracks Contest", "maniaflash?mtc", "Compete and send your best maps", "maniaexchange competitions compete cups canyon valley stadium maps tracks"],
	["Stunters", "stunters", "Earn points by performing crazy stunts!", "spaii titles packs canyon stadium valley multienvironment"],
	["Mr. DVD", "mr.dvd", "Skins and signs for TrackMania and ShootMania", "mods airships horns avatars music canyon valley stadium maps tracks titles packs"],
	["Kripke", "kripke", "Kripkes manialink", "canyon stadium valley skins horns tracks avatars maps"],
	["Obstacle", "obstacle", "Run across challenging obstacle maps", "steeffeen titles packs objects blocks titishu titi-shu storm by timeattack"],
	["SpeedBall", "speedball", "Bring the ball to oppositing team's goalpost", "steeffeen titles packs objects blocks titishu titi-shu by storm handball"],
	["TrackMania RPG", "trackmaniarpg", "Where racers become adventurers", "stadium titles packs tracks objects blocks hawkger ziza maxi@031 maxi031 maps"],
	["ManiaLoto", "manialoto", "Try your luck and win some planets!", "free money coppers hazard top'o'luck box'o'planets how to get where can i"],
	["Tetris", "tetris", "Play a classic game in your browser", "oldschool 3d 2d games ft marcel blocks"],
	["TM-Jinzo", "tm-jinzo", "Find out stuff for creators", "njin n-jin tmjinzo titles packs tm sm qm"],
	["R-Link", "r-link", "The manialinks directory", "rlink how to add my your manialink search"],
	["Zeraxex", "maniaflash?zeraxex", "Videos, pictures and more...", "shootmania storm ze-raxex frags fragmovies"],
	["Smurfen.net", "maniaflash?smurfen", "News about Smurfen.net", "smurfscups toffe haagse canyon royal compete competitions how to get win planets"],
	["Paragon League", "maniaflash?paragonleague", "The eSports league by the Paragon Community", "clans teams shootmania storm cups competitions compete elite league kremsy lukas"],
	["Metoxys", "metoxys", "Various metoxys' tracks", "canyon maps tracks"],
	["mQuery", "mquery?p=home", "A bunch of maniascript manialink plugins", "keep it simple proni p.roni"],
	["Menu concept art", "menuartwork", "Alternate ManiaPlanet menu concept by N-Jin", "tmjinzo njin tm-jinzo menu design home"],
	["Jump'n'Run", "jumpnrun", "Simple platformer game with level editor by Seeba", "seba mario minecraft steve 2d"],
	["Flighthigh", "flighthigh", "Amazing TrackMania solo campaigns by Flighthigh", "canyon valley titles packs tracks maps"],
	["Storage Player", "storage", "Listen to some cool music", "free mp3 ogg domino54 dommy"],
	["BugSweeper", "bugsweeper", "Play classic Minesweeper game in bug edition", "2d games"],
	["Yoshi", "maniaflash?yoshi", "Sharing community projects", "yoshi-star"],
	["Nerpson's manialink", "nerpson", "Discover all my work and creations in single manialink", "nikooo26 projects creations blog videos videomaker ManiaPlanet mediaplanet objects items mods tracks"],
	["ZockaMl", "zockaml", "My tracks and manialink concepts", "proni tracks by"],
	["Under Nationwide Clouds", "unc-crew", "Page of the UNC Crew", "teams clans horns cars canyon skins avatars"],
	["Awesome Cars", "awesome", "Some nice skins", "canyon"],
	["Planets", "planets", "Trap your friend with style (don't click!)", "crashme how to trap troll your friend"],
	["DivingDuck", "divingduck", "Many car models, skins and 3D objects", "DD_railway_system DD_railway_pack canyon titles packs cars"],
	["ManiaÂ»Revival", "revival", "CN.Team manialink by Rotsyx", "teams maps tracks canyon horns avatars skins cars"],
	["krapS Mania", "tmkraps", "Various cars and skins by krapS", "horns screenshots avatars"],
	["Fantaribo", "fantaribo", "High quality car skins", "HQ cars canyon common"]
]

// ---------------------------------- //
// Manialink start
// ---------------------------------- //
***StartManialink***
***
// ---------------------------------- //
// Load elements
declare Entry_Omnibox		<=> (Page.GetFirstChild("Entry_Omnibox") as CMlEntry);
declare Label_ResultsPage	<=> (Page.GetFirstChild("Label_ResultsPage") as CMlLabel);
declare Label_ResultsHeader	<=> (Page.GetFirstChild("Label_ResultsHeader") as CMlLabel);
declare Frame_HomeButtons	<=> (Page.GetFirstChild("Frame_HomeButtons") as CMlFrame);
declare Quad_ClearOmnibox	<=> (Page.GetFirstChild("Quad_ClearOmnibox") as CMlQuad);

declare Frame_PageNavigation	<=> (Page.GetFirstChild("Frame_PageNavigation") as CMlFrame);
declare Quad_NavButtonPrev		<=> (Page.GetFirstChild("Quad_NavButtonPrev") as CMlQuad);
declare Quad_NavButtonNext		<=> (Page.GetFirstChild("Quad_NavButtonNext") as CMlQuad);
declare Label_NavPageCounter	<=> (Page.GetFirstChild("Label_NavPageCounter") as CMlLabel);

// ---------------------------------- //
// Variables
declare Text Last_OmniboxValue = "!"; ///< Allows to print home page
declare Text[] MatchingData;
declare Text[][Text] ExistsAtLeastOnce;
declare Text[] TextResults;

// Pager
declare Integer CurrentPage = 1;
declare Integer PreviousPage = 0;
declare Integer PagesCount = 1;

// ---------------------------------- //
// Save previous search
declare persistent Text Persistent_FindMe_LastSearch for Page;
if (Persistent_FindMe_LastSearch != "") {
	Entry_Omnibox.Value = Persistent_FindMe_LastSearch;
}
***

// ---------------------------------- //
// Global loop
// ---------------------------------- //
***Yield***
***
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// Mouse click
	if (Event.Type == CMlEvent::Type::MouseClick) {
		switch (Event.ControlId) {
			case "Quad_NavButtonPrev" : {
				if (CurrentPage > 1) CurrentPage -= 1;
			}
			case "Quad_NavButtonNext" : {
				if (CurrentPage < PagesCount) CurrentPage += 1;
			}
			case "Label_ButtonShowAll" : {
				Entry_Omnibox.Value = C_ShowAllCommand;
			}
			case "Quad_ClearOmnibox" : {
				Entry_Omnibox.Value = "";
			}
		}
	}
}

// ---------------------------------- //
// Show current results page
if (PreviousPage != CurrentPage) {
	PreviousPage = CurrentPage;
	
	declare Text ResultsPageText;
	ResultsPageText = "";
	
	// Reset page
	Label_ResultsPage.SetText("");
	
	// Page Navigation
	Quad_NavButtonPrev.Visible = (CurrentPage != 1);
	Quad_NavButtonNext.Visible = (CurrentPage != PagesCount);
	Label_NavPageCounter.SetText(TextLib::Compose("%1 / %2", TextLib::ToText(CurrentPage), TextLib::ToText(PagesCount)));
	
	// ---------------------------------- //
	// Display matching results
	if (TextResults.count > 0) {
		for (I, (CurrentPage - 1) * C_ResultsPerPage, CurrentPage * C_ResultsPerPage - 1) {
			if (I < TextResults.count) ResultsPageText ^= TextResults[I];
		}
		Label_ResultsPage.SetText(ResultsPageText);
	}
	
	// ---------------------------------- //
	// Not found message
	else {
		if (Entry_Omnibox.Value != "") {
			if (TextLib::Length(Entry_Omnibox.Value) < C_MinEntryLength) {
				Label_ResultsPage.SetText(TextLib::Compose(_("Phrase \"$<%1$>\" is too short. Enter phrase at least %2 characters long."), Entry_Omnibox.Value, TextLib::ToText(C_MinEntryLength)));
			} else {
				Label_ResultsPage.SetText(TextLib::Compose(_("Phrase \"$<%1$>\" has been not found."), Entry_Omnibox.Value));
			}
		}
	}
}

// ---------------------------------- //
// Omnibox value change
if (Last_OmniboxValue != Entry_Omnibox.Value) {
	Last_OmniboxValue = Entry_Omnibox.Value;
	
	// Reset everything
	MatchingData.clear();
	TextResults.clear();
	ExistsAtLeastOnce.clear();
	
	CurrentPage = 1;
	PreviousPage = 0;	///< Allows to print page
	
	// ---------------------------------- //
	// Find matching keys
	if (Entry_Omnibox.Value != "") {
		Frame_PageNavigation.Show();
		Frame_HomeButtons.Hide();
		Quad_ClearOmnibox.Show();
		
		// Split typed in words
		declare SplitWords = TextLib::Split(" ", Entry_Omnibox.Value);
		
		// Search function
		foreach (Data in C_DataBase_01) {
			if (TextLib::Length(Entry_Omnibox.Value) >= C_MinEntryLength) {
				if (Entry_Omnibox.Value != C_ShowAllCommand) {
					foreach (Param in Data) {
						foreach (Word in SplitWords) {
							if (TextLib::Find(Word, Param, False, False)) {
								// Create array if not exists
								if (!ExistsAtLeastOnce.existskey(Data[1])) {
									ExistsAtLeastOnce[Data[1]] = [""];
									ExistsAtLeastOnce[Data[1]].remove("");
								}
								// Add word to array
								if (!ExistsAtLeastOnce[Data[1]].exists(Word)) ExistsAtLeastOnce[Data[1]].add(Word);
							}
						}
					}
					
					// Add data if all words are matching
					if (ExistsAtLeastOnce.existskey(Data[1])) {
						if (ExistsAtLeastOnce[Data[1]].count == SplitWords.count) MatchingData.add(Data[1]);
					}
				}
				
				// Show list of all manialinks
				else {
					MatchingData.add(Data[1]);
				}
			}
		}
		
		// Results header
		if (MatchingData.count == 1) Label_ResultsHeader.SetText(_("Found 1 matching link"));
		else Label_ResultsHeader.SetText(TextLib::Compose(_("Found %1 matching links"), TextLib::ToText(MatchingData.count)));
	}
	
	// ---------------------------------- //
	// Home page (omnibox empty)
	else {
		Frame_PageNavigation.Hide();
		Frame_HomeButtons.Show();
		Quad_ClearOmnibox.Hide();
		
		// Display keys amount in header
		Label_ResultsHeader.SetText(TextLib::Compose(_("We have currently %1 links in our database"), TextLib::ToText(C_DataBase_01.count)));
	}
	
	// ---------------------------------- //
	// Save last search
	Persistent_FindMe_LastSearch = Entry_Omnibox.Value;
	
	// ---------------------------------- //
	// Prepare key to be displayed
	if (MatchingData.count > 0) {
		PagesCount = MathLib::CeilingInteger((MatchingData.count - 1) * .1);
		
		foreach (Data in C_DataBase_01) {
			if (MatchingData.exists(Data[1])) TextResults.add(CreateTextResult(Data));
		}
	} else {
		PagesCount = 1;
	}
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //	

// ---------------------------------- //
/** Create text result form DataBase
 *
 *	@param	_Data	Data from which result will be created
 *
 *	@return		Text format of result
 */
Text CreateTextResult(Text[] _Data) {
	if (_Data.count < 3) return "F00Wrong key\n\n\n";
	
	declare DataName = _Data[0];
	declare DataAdress = _Data[1];
	declare DataDescription = _Data[2];
	
	declare Text DataTextResult;
	DataTextResult = "$h["^DataAdress^"]$<"^DataName^"$>$h $070("^DataAdress^")$g\n$777$<"^DataDescription^"$>$z\n\n";
	return DataTextResult;
}

// ---------------------------------- //
// Main
// ---------------------------------- //	
main() {
	wait (LocalUser != Null);
	---StartManialink---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>
